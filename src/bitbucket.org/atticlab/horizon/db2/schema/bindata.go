// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_2_options.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\xeb\x6f\xdb\x38\x12\xff\x5e\xa0\xff\x03\xb1\x5f\xec\xe0\x9c\x5c\xdc\xb4\x79\x38\xc8\x02\xde\x44\x7b\x35\x2e\xb5\xdb\xd8\xb9\x6d\xb1\x58\x10\xb4\x44\xcb\xbc\x4a\xa2\x56\xa4\x92\x78\x0f\xf7\xbf\x1f\xf4\x7e\x52\xa4\x1e\xe9\x7d\xb4\x35\xfc\xf1\x37\xc3\xe1\x70\x38\xa4\x74\x7c\xfc\xf6\xcd\xf1\x31\xf8\x4c\x19\x37\x3d\xbc\xfe\x72\x0f\x0c\xc4\xd1\x16\x31\x0c\x0c\xdf\x76\x83\x87\x6f\xdf\x84\x22\x77\xbe\xed\x62\x03\xec\x3c\x6a\x67\x32\x4f\xd8\x63\x84\x3a\xe0\xea\xe4\xc3\xc9\x69\x5e\x6c\x7b\x00\xae\x09\x03\x88\xb2\xcc\xdb\x37\x6b\x6d\x03\x18\x47\x1c\xdb\xd8\xe1\x90\x13\x1b\x53\x9f\x83\x1b\x70\x7a\x1d\x3d\xb3\xa8\xfe\xbd\xe6\x6f\xdd\x22\x81\x3c\x76\x74\x6a\x10\xc7\x04\x37\x60\xf4\xb8\xf9\xf5\x72\x74\x9d\x22\x3a\x06\xf2\x0c\xa8\x53\x67\x47\x3d\x9b\x38\x26\x64\xdc\x23\x8e\xc9\xc0\x0d\xa0\x4e\x82\xb2\xc7\xfa\x77\xb8\xf3\x1d\x9d\x13\xea\xc0\x2d\x35\x08\x0e\x04\x76\xc8\x62\xb8\xd8\x93\x4d\x1c\x68\x63\xc6\x90\x19\x4a\x3c\x23\xcf\x21\x8e\x19\xcb\x78\xf4\x19\x32\xac\xfb\x1e\xe1\x87\x00\x7f\xb7\xbb\x4e\x75\xc3\xc8\xd3\xf7\xd0\x45\x7c\x0f\x6e\x80\xeb\x6f\x2d\xa2\x4f\x02\x73\xe8\x88\x23\x8b\x9a\xa1\xe0\xdd\xc3\xea\x33\x58\x2c\xef\xb4\xaf\x60\xf1\x2b\xd0\xbe\x2e\xd6\x9b\x75\x2c\x7b\xc2\x3d\x64\x60\x88\x77\x3b\xac\x73\x06\xb7\x07\x48\x3d\x03\x7b\x70\x4b\xe9\xf7\xeb\xe6\x96\xc4\x31\xf0\x0b\xdc\x13\xc6\xa9\x77\x80\xdc\x43\x0e\x43\xa1\xa2\x0c\x52\x07\x12\xa3\x55\x73\xea\x62\x0f\xa5\x8d\xf9\xc1\xc5\x7d\x9a\x67\x5c\xfa\xf1\x68\xd9\xd8\xc2\x86\x89\xbd\xb0\x25\xc3\x7f\xfa\xd8\xd1\xdb\x69\x91\x6b\xef\x7a\xf8\x89\x50\x9f\xc5\xff\xc1\x3d\x62\xfb\xae\x58\x03\x40\x10\xdb\xa5\x1e\xc7\x1e\x8c\x27\x58\x67\x9c\xce\x06\xd5\x2d\xca\xb0\x01\x11\x6f\x05\x90\xf8\x75\x17\x9f\x42\xba\x4e\x7d\x87\x33\xf8\x4c\xf8\x3e\xf0\x29\xc2\x59\x37\x80\xf6\x8a\xe7\x9b\x22\xc3\xf0\x30\x93\x75\xbd\xe7\x6e\x30\x7b\xf7\x5c\xda\xd3\x9e\x15\x26\xc8\xf6\x20\x27\xb7\x4f\xfd\x50\x49\x9a\x46\x54\xa8\x5c\x92\x30\x0e\xf9\x0b\x74\x15\x40\x03\x51\xea\x2a\x8b\x62\x65\xb9\x24\xe6\x49\xa4\x75\x6a\xdb\x84\xb1\xd8\x64\x0a\x93\xa9\xd8\x00\x31\x86\x65\xbe\x5b\x6a\x11\xf9\x80\x8a\xe3\xd6\x36\x94\xb4\xd9\x26\xd3\x4b\x2e\xa7\xa0\xac\x72\xb7\xa1\x1d\x18\xd4\xa9\x81\x21\x61\xcc\xc7\x5e\xa2\xe0\xfc\x7e\xa3\x3d\x80\xcd\xfc\x97\x7b\x2d\xd7\x6c\xb5\xbc\xff\x96\x1f\xb0\xd2\x5a\x03\x5d\xe4\x71\xa2\x13\x17\x39\x9c\x81\xb0\xe3\xdb\xd5\x72\xbd\x79\x98\x2f\x96\x9b\x1c\x8c\xac\x29\x74\xbf\xe3\x43\x2b\x12\xe9\x4a\xd1\x96\x42\x7d\x43\x75\x02\x26\xf5\x5c\x68\x13\x33\x5e\xa7\x1a\x7a\x2c\x49\xaa\x77\x91\xf9\x53\x03\x7a\xce\xe9\x94\x81\xc3\xd1\x6f\xc0\x0c\x9f\xb7\x80\x8b\xa7\x88\x45\x6c\xd2\x68\xfb\xa2\x60\x73\x07\xaa\xce\x16\xb5\xbe\x5d\xdd\x3f\x7e\x5a\x02\x62\x44\xbd\xdf\x69\xbf\xce\x1f\xef\x37\xaa\xe0\x02\x27\xea\x03\x9d\x1b\xbb\x3e\x30\xd1\x48\x49\x10\xc2\x9f\xea\xf6\x4b\xd7\xb0\xb5\xf6\xe5\x51\x5b\xde\x76\xb0\x3a\x24\x46\x90\x5b\xb5\xef\xbb\x80\xa2\xd8\x3c\x4b\x06\xd5\x89\x0b\x66\x77\x2b\xda\xf5\x18\x8a\x8d\xe3\x9c\x49\x51\x3a\x4e\x90\x14\xa5\x93\xb4\x44\x22\x5e\x8a\x3b\x72\xe3\xe5\x42\x89\x92\xa1\x32\x79\x39\x76\x14\x52\x94\x60\x0b\x6b\xb4\x48\xa6\x10\x49\x12\x61\xed\xeb\x46\x5b\xae\x17\xab\x65\x3e\xde\x07\x36\xc3\x4d\x12\xae\xe5\x9a\xec\x4f\x2b\xd5\xe1\xf6\xa3\xf6\x69\x5e\xe9\xf2\x3a\xda\x18\x1f\x1f\x83\x25\xb2\xf1\x2c\xf9\x17\x6c\x0e\x2e\x9e\xc5\x8d\xae\xc1\x5a\xdf\x63\x1b\xcd\xc0\xf1\x35\x58\x3d\x3b\xd8\x9b\x81\xe3\x64\x43\x7d\xfb\xa0\xcd\x37\x5a\x02\x9f\x82\x46\x7b\xed\x3c\x70\x4c\x27\x46\x4e\x19\xab\x80\x17\xd4\x5b\xae\x36\x25\x15\xc1\x6f\x8b\xcd\xc7\x94\x41\x71\x77\x5a\x62\x91\x21\x95\xf8\xdc\xae\x3e\x7d\xd2\x96\x9b\x66\x36\x91\x0c\x58\x2d\xab\x38\x60\xb1\x06\xa3\xcf\xf7\x7f\x77\xcd\xf5\x97\x7b\xe0\x7a\x54\xc7\x86\xef\x21\x0b\x58\xc8\x31\x7d\x64\xe2\x51\x1d\x9d\x78\x14\x87\xb4\x49\x04\x59\x34\x89\x70\x50\x32\x90\x22\x93\xce\xd6\x88\x7b\x0f\x8c\x61\x20\x8e\x40\x90\x7d\x81\x1d\xf5\x40\xf0\x3f\x71\x4c\x10\xe4\x67\x80\xee\xc0\xf8\x3b\x3e\x4c\xc0\x13\xb2\x7c\x7c\x04\x5c\x44\x3c\x96\x18\x48\xb9\xf0\x10\x08\x1a\x78\x87\x7c\x8b\x43\x8e\xb6\x16\x66\x2e\xd2\x31\xb8\x01\xa3\x51\xe5\x79\xb8\xcb\xa2\xc4\xc8\x17\x48\x4a\xb6\x28\xcd\xbd\xd8\x12\xe1\x44\xcd\xec\x90\x4c\x0f\xc1\xa0\x44\xd3\xba\x94\x38\x8c\xdf\xbe\x01\x00\x80\x78\xa7\x05\xf4\x3d\xf2\x90\xce\xb1\x07\x9e\x90\x77\x20\x8e\x39\x3e\x7f\x7f\x14\x8e\xe0\xf2\xf1\xfe\x7e\x12\x0b\x87\x71\x25\xc8\x63\x6b\xe4\xa7\xef\x2a\xf2\x36\x7a\xc9\x05\x76\xea\x73\xb0\x25\x26\x71\x78\xb2\x9c\x82\xd3\x72\x0b\x03\x11\xeb\x00\xc3\x76\x0a\xd2\x36\x75\xf8\xbe\x8d\x7c\x81\x0f\x71\xca\x0d\x46\xc7\xd3\xd1\x6c\x46\x1c\x8e\x4d\xec\x89\xa9\xb5\x6c\x98\x67\xa9\xda\xf4\xed\x9b\xa3\xba\x99\x11\x45\xeb\x3e\x4e\x10\xa6\x38\xf1\xd8\x13\x23\x21\x53\x62\x1c\xce\x0f\x81\x36\xea\xa3\x1f\x6d\x75\xd4\x3c\x8b\x30\x88\x1c\xea\x1c\x6c\xea\x33\xb0\xa5\xd4\xc2\xc8\x51\x32\x46\xb2\xca\x25\x4b\x43\xbc\x26\x2a\x9b\x25\x5d\x44\xf3\x68\x11\xa7\xf5\x66\xfe\xb0\x89\x42\xd6\x34\xfa\x67\xb1\xbc\x7d\xd0\xc2\xf0\xf2\xcb\xb7\xe4\xbf\xe5\x0a\x7c\x5a\x2c\xff\x35\xbf\x7f\xd4\xb2\x3f\xe6\x5f\x73\x7f\xdc\xce\x6f\x3f\x6a\x60\xda\x56\x05\xb0\xfa\x6d\xa9\xdd\x81\x5f\xbe\xc9\x75\x89\x52\xd6\x5a\x55\x52\x94\xe8\xdf\x93\xb0\x42\x50\xe1\x91\x4b\x2e\x7a\x38\x57\x2e\x0d\x97\x79\xd8\x77\x1c\x6d\xb1\x33\xef\xa8\xf3\x8a\x40\x2a\x0c\xc6\xe0\xdf\x8c\x3a\xdb\xf2\xe3\x9d\x85\x38\xdc\x61\x2c\x9d\xf7\x2e\xf6\x74\xec\x48\x64\x05\x5e\x56\xcd\xd3\x7a\xbb\x5a\x05\xf2\x87\xf9\x9b\x54\x99\xee\x4e\x57\x81\xce\x3c\x2f\x7b\x24\x70\xbf\x72\xf2\xdc\xc3\x07\xcb\x95\x82\xcc\x11\x39\x7e\xa9\xb8\x21\x72\x5d\x8b\x84\x25\x56\xc0\x89\x8d\x19\x47\xb6\x0b\x82\x55\x39\xfc\x09\xfe\xa2\x0e\x16\xb8\x45\x65\x7b\xd0\x83\x73\x19\x4b\x3a\x7b\x1a\x17\xed\x44\x26\x57\x4a\x13\xc5\xf2\x6d\x78\x14\x44\x1c\x9d\x86\xc7\x39\x2e\x3a\xd8\x38\xe8\x3f\x09\xc0\xc9\x24\x09\x73\x93\xfa\xc6\xd4\xe7\x9d\x5a\x87\x59\x48\x60\xf9\xb0\x36\x16\xcd\x6f\x89\xa9\x93\x7d\xdb\x00\x96\x8e\xa1\x12\x43\x97\x06\x00\x0a\x0d\x5f\xdd\xad\x0a\x45\x7f\x0a\x0b\xac\x3f\x89\x4c\xdf\x34\x2c\x06\xe6\x88\x58\x6a\x46\x49\xb6\xbe\x03\x18\x25\x86\x4a\x8c\x92\x1c\xe7\x88\x58\xe6\x8e\x58\xd4\xd6\xf8\xba\xf3\x9d\x46\x17\xce\x97\x32\xc2\x81\x49\xa9\x08\x23\x7d\x36\x30\x8a\x0d\xd2\x33\x96\x52\x00\x08\xd2\xc9\x34\x06\x54\x1a\x79\x18\x71\x69\xab\x58\xd8\x77\x0d\x75\xe1\xd4\x9d\x92\xdf\xa5\x43\xa8\x8a\x42\xd3\x8a\x63\x51\x8e\x2c\xa8\x53\xe2\x30\x81\x67\xee\x30\x86\x2e\xa5\x96\xe0\xf1\x16\x31\x1c\xae\x94\xa2\xa0\x11\x3c\xf7\x30\xc3\xde\x93\x50\x26\x48\x75\xf9\x0b\x0c\xd2\x10\x46\xfe\xaa\x8a\x49\x9c\x5a\x50\x0c\x1a\xc0\xc7\x05\xc5\xc7\x2c\xe0\x0a\x14\x6a\x31\xf1\xe5\xc1\xa4\x93\xf6\x83\x65\x1f\x4a\xdd\xfc\xb0\x8c\xa4\x93\xd2\xdd\xb3\x14\xa5\xee\xb2\xcc\xa5\x59\x5c\x90\xcd\xd4\x94\x52\x87\xf4\x5c\x79\x7a\x50\xbc\x0b\x20\xca\x21\x82\xd4\x47\x8f\x77\xe6\xc1\x52\xd5\x7b\xa5\x8a\xff\x63\xd4\xf7\x74\x9c\xb8\xbf\x60\x69\x48\x77\xbf\xa3\xd9\xac\x22\xa1\x3a\x51\x84\xa5\xee\x01\xcc\x2d\x3c\x02\x51\x0e\x15\x4a\xa3\xd0\x3b\x58\xc8\x0e\x0d\x06\x0b\x17\x92\x8e\x7e\x78\xc0\x68\xa9\x78\xff\x90\x21\xe9\xb0\x1a\x34\x44\x0d\x24\x61\xa3\x70\x78\x34\xac\x27\xa7\xde\x9b\xa7\xa6\x9e\xc0\xc5\x79\x9b\x2c\x31\x54\x8e\x2c\xcd\x21\xa2\x5e\x38\xeb\xbd\x21\xb9\x41\xe2\xd9\x29\x4a\x10\xff\x6f\x19\x1e\x7f\x81\xd8\x79\xc2\x16\x75\x71\xed\x16\x95\xbf\x04\xc9\x96\x6f\x71\xd1\x53\x1b\x73\x24\x7a\x16\x58\x43\xf8\x9c\x11\xd3\x41\xdc\xf7\x70\xdd\x46\xf2\xea\xfc\xe8\xf7\x3f\xb2\x30\xfd\x9f\xff\xd6\x05\xea\xdf\xff\xa8\x24\x7e\xd8\xa6\xd1\x96\xb3\x1a\xd5\x53\x30\x87\x3a\xb8\x31\xee\xe7\xc0\xaa\x38\x89\x76\xc4\xc6\x70\x4b\x7d\xc7\x60\xc1\x20\x5e\x7a\xc8\x31\x45\x9b\x75\x62\x24\x13\x29\x39\xc7\x55\x0c\x02\xd1\x4c\x0a\x8f\xdf\xeb\x0f\x87\xd7\xda\x26\xd5\xcb\xc1\x2f\xfc\x09\x59\xe3\x51\xbe\xfe\x36\x9a\xcd\x3c\x6c\xea\x16\x62\xec\xd5\xa8\x35\x1c\x7f\xd7\xf2\xab\x94\x6a\x7e\x04\xc9\x96\xc7\xff\xb5\xc4\x95\xb2\xb7\x1f\xa9\x8c\xf2\x45\x89\x46\x75\x24\x2b\x8b\x58\xa1\x3b\xc4\x51\x78\x8e\x25\x3d\x2b\x02\x77\xf3\xcd\x5c\xae\xa8\x1c\x9b\x71\xc4\x09\xe3\x44\x1f\x1a\xbf\x72\xb2\xd1\x1e\x52\xa1\xa6\xbe\xd6\x14\x86\x7b\xad\xdd\x6b\xb7\x9b\xdc\xc1\xde\x09\xc3\x35\x33\x7b\x02\xa6\x93\xa8\xb8\xd5\x3c\x2c\x82\xe2\x7a\x57\xfd\xe4\x35\xdc\x9e\x4a\x56\xc3\x83\xaa\xa6\x4d\x75\x5c\x45\x75\x17\xcb\xb5\xf6\xb0\x01\x8b\xe5\x66\x55\xa9\xe5\x86\x09\xe2\x1a\x8c\x47\x53\x48\x1c\xc2\x09\xb2\x20\x0b\xe1\x4e\xd8\x9f\xd6\x68\x02\x46\xef\x4e\xa7\xe7\xc7\xa7\x97\xc7\x67\xa7\x60\x3a\x9d\x7d\xb8\x9c\xbd\x7b\x7f\x32\x3d\xbd\x9a\x5e\x5c\xfd\xed\xf4\x6c\x14\x70\x57\x82\x7f\x07\xa3\x9b\xa9\x85\xb9\xb8\x3d\x40\x4e\x89\xd1\xd4\xd5\xbb\xf7\x57\x97\xd3\x69\xab\xae\xce\x20\x32\x4d\x0f\x9b\x88\x63\x88\x5f\x5c\xec\x30\xcc\xe0\x8e\x7a\x69\x2d\xb8\xa9\xbf\xf7\xe7\x97\x1f\x2e\xce\x5b\xf5\x77\x01\x8b\x41\xa2\x09\xfe\xc3\xd9\xf4\xf4\xe2\xb2\x15\xfc\x65\x09\x1e\xf2\x67\x0a\x9f\xd1\xa1\xa9\x9b\xf3\xcb\xb3\xe9\xf4\x7d\xab\x6e\xae\xe0\x34\x2e\x1c\x37\x01\x5f\x5c\x9c\x5f\x9e\x5f\xb4\x04\xce\x9d\x55\x34\x40\x5f\x9d\xbf\x3f\x3b\xff\x90\x40\x8b\x27\x44\xe3\x29\x41\xef\x98\xd9\x54\x18\x1f\x0c\xbc\xae\xc0\x3c\x18\xb8\x42\xa1\xaf\x6b\x98\xec\x56\x58\xea\x19\x3a\xd5\x12\x14\xd5\x70\x2a\x29\x24\x0d\x36\x0a\x4a\x75\x94\xbe\xe3\xd0\x76\xbf\x3e\xd0\x48\xc8\x72\xab\xb6\x63\x21\xdc\x9d\x77\x4e\x57\x6a\xae\xe9\xa6\xf7\x9d\x92\x6b\xbd\x5d\xf6\x2b\x05\xdc\x68\xcf\x34\xbf\xbb\xcb\xdf\x15\xae\xe9\x1a\x7c\x7e\x58\x7c\x9a\x3f\x7c\x03\xff\xd4\xbe\x81\x71\x7c\xce\x38\xc9\x5d\xfc\x49\xac\x54\x9b\x74\x0d\x47\x3e\x80\xab\xe7\x9c\x76\x54\xa4\x4a\x0c\xd9\xe9\xfd\x60\xe4\x32\xcc\x5a\x86\xa5\x2e\x95\x68\xd6\xde\x5a\x1f\x82\x6b\x09\xb8\x96\x70\x5d\xe7\x4a\xac\x55\x6e\xf7\x0f\xa1\x44\x73\x3f\xb5\x3a\x29\x50\x6b\xa5\x62\xf3\x3b\x14\x43\x2a\x29\xea\xa9\x51\xcd\x46\x7a\x22\x45\xeb\xa6\x70\xcd\x5b\x2a\xb1\x72\xe1\xbb\x2d\xca\x25\xc8\xc7\xe5\xe2\xcb\xa3\x16\xbf\x10\x23\x40\x06\xab\x65\x5c\x55\x79\x5c\x2f\x96\xff\x00\x5b\xee\x61\x0c\xc6\x81\xd8\x24\xbe\x3c\x36\x09\x4f\x1f\x6a\x47\x26\xf7\xf6\x4d\x27\x86\x11\xb5\x0c\x25\x60\x53\x5b\x32\x2d\x90\x8b\x85\x27\x95\x72\xa4\x88\x63\xf8\x1e\x51\x3f\x82\x61\x81\x56\x89\x5d\xb9\xac\x2b\x22\x15\xbf\x04\xd5\x8f\x56\x04\xa2\x46\xac\x54\x39\x9e\x54\x6b\xc4\xb2\xe8\x3d\xcc\x70\xd7\x02\x06\x2a\xe4\x4a\x68\x05\xe2\xe3\x71\x76\x07\xed\xf8\xe7\x9f\xc1\x68\xe7\x51\x7b\x34\x9b\x71\xfc\xc2\x8f\x8e\x26\xa0\xf2\x9c\xd3\xf4\xa9\xba\x4a\x3d\x26\x5a\x83\x5e\xe9\x24\x13\x2b\x57\xa7\x5d\xd8\x2c\x55\x22\xbd\x9a\x1a\x2a\x5b\xd5\x56\x24\xad\xa2\x7c\xbe\xe4\x33\x80\xd6\x61\x28\x69\x33\x96\x51\x2e\x51\x50\xa0\x66\x44\xb3\xdc\x47\x2e\x15\x45\xad\x36\x1e\xd0\x3d\x3e\x14\x42\x6c\x15\xb4\xc9\x12\xc9\xed\x4b\xe1\x92\x97\x7f\x45\xb4\x3f\xb9\x12\x62\x3e\x64\x24\x17\xb1\x0a\xf4\xea\x2e\x5b\x4c\x92\x0b\x55\x4d\x9c\xb3\xd2\x6e\x7f\xb6\xc4\x50\xe6\x99\x1d\xde\x4e\x6a\x2f\x8a\x28\x70\x4f\xde\xf2\x1d\x88\x7e\x0c\x97\xd7\x40\x50\x77\xef\xa4\x90\x58\x8f\xe4\xc5\xe6\x81\xf4\x88\xe1\x04\x8b\x4c\x47\x4d\x8a\x07\xf3\xf5\xba\xe4\x5e\xe7\xee\x11\xa0\x72\x30\x5d\x87\x42\x6e\xf6\xd2\x7b\xea\x03\x58\xbe\x88\x98\x67\x9e\x5c\x11\x2c\x50\x15\x13\xab\xbe\x73\x3f\x08\xbb\x0a\xac\x5a\x12\x22\xe2\x99\xfb\x8a\x40\x9f\xb1\xce\x60\xba\xbb\xab\x82\x6b\xca\x3f\x9a\xd0\xdf\xc6\xd2\x3e\xf2\x1a\xa6\xb7\x96\x8b\x89\x72\x24\xd8\x52\x85\x41\x3c\xa4\x09\x5e\x4e\xbc\x9d\xd9\xf3\xdf\xc9\xe8\xe1\x3c\x72\x74\x25\xe2\xe0\xb7\x8f\xda\x83\x06\xc6\x63\xd1\xc5\xee\x1b\xc0\x3d\x1f\x1f\x81\xd5\x03\x18\x0b\xef\x6f\xc7\x42\x0a\x66\x28\x7f\x6a\x64\x30\x0b\x94\x80\xa5\x2b\xb1\x70\x97\xa8\xf0\x6d\x95\xc1\x48\xd7\xa1\x4b\x83\x67\x2a\xd9\x8e\xfe\x2b\x4c\x94\x02\x7a\xd7\xa0\xaf\xfe\x35\x9d\xd7\x30\x7b\xe5\xb6\xb4\x54\x8b\x52\x83\x76\x3a\xe5\x3f\x32\xf4\x8a\xa3\x91\xbf\x2e\x2f\x53\x28\x27\xdb\x4e\x97\xda\x8f\x2f\xbd\xa2\x52\xb5\x2f\x03\xc8\xb4\xab\x6b\xd4\x4e\xcd\xf4\x1b\x55\xaf\xa8\x5a\x7a\x43\x4d\xa6\x4e\x63\xed\x48\xf2\x8d\xae\xa1\xf9\x97\x3b\xa8\xcd\x57\xbb\xc4\x80\xc6\xcf\x94\x0d\x16\x04\x9a\x7a\x51\x51\xa5\x75\xe2\x55\xf3\xf1\xb6\xd7\x52\xa6\xb4\x00\x0a\x55\x50\x5b\x03\x6b\x3e\x5a\x37\xb4\x2f\x55\xbb\xe8\x95\xa0\x37\x7d\xae\xaf\x87\xcd\x1b\x60\xa5\xf9\xc6\x78\x9c\xdc\x7c\x0f\x8b\x3f\x8c\x5a\xf1\x9b\x6c\xd5\x6a\x92\x48\xb0\x52\x50\x12\x09\x96\x6a\x4a\x15\xd1\x2d\xf5\xcd\x3d\x57\xea\xbe\x20\xda\x4c\xa0\x20\x5a\x2e\x6b\x25\x79\x66\xe8\x9a\x37\xe0\xec\xac\x34\x6e\xa2\xcf\x5d\x02\x9d\xda\xae\x85\x39\x4e\x06\xe4\x7f\x01\x00\x00\xff\xff\x96\x80\xa0\x7f\x1f\x53\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 21279, mode: os.FileMode(438), modTime: time.Unix(1488309346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\xdd\x6f\xdb\xc8\x11\x7f\x37\xe0\xff\x61\x70\x2f\xb2\x51\xbb\xbd\xe0\x8a\xc3\x55\x86\x0f\x50\x6c\xa6\x11\x2a\x53\x89\x3e\x9a\x04\x87\x03\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xbf\x17\xfc\x14\xbf\x96\xa4\x14\xc9\xf7\xe0\x07\x93\xb3\x33\xf3\x9b\x99\xfd\xcd\x2c\x57\xb7\xb7\xf0\x17\x9f\xba\x82\x28\x84\x65\x70\x79\x71\x7b\x1b\xfd\xc1\x07\x2e\x95\x2b\x70\xfe\x71\x02\x0e\x51\x64\x45\x24\x82\x13\xfa\xa9\xc0\xe5\xc5\xdc\x58\x80\x54\x44\xa1\x8f\x4c\x59\x8a\xfa\xc8\x43\x05\xf7\xf0\xe3\x5d\xf2\xce\xe3\xf6\x73\xc3\x63\xdb\xa3\x91\x3c\x32\x9b\x3b\x94\xb9\x70\x0f\x83\xe5\xe2\xdd\x2f\x83\xbb\x5c\x23\x73\x88\x70\x2c\x9b\xb3\x35\x17\x3e\x65\xae\x25\x95\xa0\xcc\x95\x70\x0f\x9c\x65\x5a\x36\x68\x3f\x5b\xeb\x90\xd9\x8a\x72\x66\xad\xb8\x43\x31\x12\x58\x13\x4f\x62\xd9\x92\x4f\x99\xe5\xa3\x94\xc4\x8d\x25\xbe\x11\xc1\x28\x73\xef\x22\x08\x29\x52\x93\xf8\x38\x84\xc0\x0b\x5c\xf9\xd5\xbb\x83\xc5\x2e\xc0\x21\x18\x9f\x17\x86\x39\x1f\x4f\xcd\x3b\x98\xdb\x1b\xf4\xc9\x10\x6e\xef\x60\xfa\x8d\xa1\x18\xc2\x6d\x16\x84\x87\x99\x31\x5a\x18\x7b\x61\x18\xbf\x03\x73\xba\x00\xe3\xf3\x78\xbe\x98\x67\x3a\xe1\xd3\x78\xf1\x1e\xe6\x0f\xef\x8d\xa7\x11\x04\xae\x65\x13\x45\x3c\x9e\xf8\x50\xf1\x62\xaf\xa9\xe2\xcf\xc3\xf4\xe9\xc9\x30\x17\xed\xde\x24\x32\x30\x35\xeb\x7a\x60\x3c\x87\xc1\x87\xc9\xdf\x02\x37\xca\x68\x20\xb8\x8d\x4e\x28\x88\x07\x1e\x61\x6e\x48\x5c\x1c\x34\xb9\xb3\x91\x8a\x0b\x3c\x69\x4c\x12\x95\xe5\x90\x84\x2b\x8f\xda\xed\xe1\x28\x7b\x72\x74\x34\x52\xeb\x51\x30\xa2\xaa\x06\xb5\x0b\x10\xd6\x5c\x40\xf4\x3c\xaa\x47\x89\x4a\x02\x5f\xc3\xd5\x33\xee\x6e\xe0\x85\x78\x21\x5e\x43\x40\xa8\x90\x59\x80\xe2\x32\x45\x22\xec\x8d\x15\x10\xb5\x81\xfb\xd4\xff\x9b\x6a\x6a\x23\x41\x07\xd7\x24\xf4\x94\xa5\xc8\xca\x43\x19\x10\x1b\xa3\x8a\x1f\xd4\xde\x7f\xa3\x6a\x63\x71\xea\x14\x8b\xb8\x9a\x0b\x1a\xf9\xb8\xb3\x88\x6d\xf3\x90\x29\x99\xc5\x62\x31\x7a\x3b\x31\xf6\x91\x48\x83\x99\x87\xe3\x0e\x16\xb9\xed\x61\x25\x47\xf1\xd2\x9a\x62\xb8\xba\xbc\x00\x00\xa0\x0e\xac\xa8\x4b\x99\x8a\xd3\x67\x2e\x27\x93\x9b\xe4\x05\x71\x1c\x81\x52\x82\xbd\x21\x82\xd8\x0a\x05\xbc\x10\xb1\xa3\xcc\xbd\xfa\xf9\xef\xd7\x99\x4c\xa2\xcc\x8a\x03\x4c\x99\x42\x17\x45\x55\xcf\x2a\xe6\x08\xca\x6c\x1e\xef\xf3\x80\xec\x22\x2e\x91\xb0\xe2\xdc\x43\xc2\x72\x71\x78\x34\xde\x8d\x96\x93\x05\xbc\x1b\x4d\xe6\x46\x69\x31\x0f\xd5\x51\xab\x3d\xea\x53\x85\x8e\x45\x64\x9c\xf0\xff\x48\xce\x56\x97\x17\xd7\x8d\x7b\x20\x0d\x0f\xae\xd7\x68\x9f\x21\xec\xa9\xde\x2c\xea\x95\x6c\x58\xda\x2c\x64\x82\x3c\x40\x41\x62\x1a\xd4\x8a\xfe\xc0\x85\x83\xe2\x07\x5d\x1e\xda\x72\xe4\xa0\x22\xd4\xeb\x17\x21\x0f\x1d\x17\xc5\xe9\x23\x94\xea\xcd\x22\x24\xf1\x6b\x88\xcc\xd6\xba\x9c\x88\x5b\x1b\x22\x37\xcd\x25\x5a\x5d\x10\x08\x7c\xa1\x3c\x94\x56\xe7\xca\x2c\x60\x82\x30\x49\x92\xde\x13\x67\x29\x77\x25\xab\xb5\x1f\xab\x36\xf6\x59\xea\xb9\xc0\xf6\xb8\x8c\x0a\x54\x41\xd4\x44\xa5\x22\x7e\x00\x11\x4b\x44\xed\x34\x7a\x02\x7f\x70\x86\xb5\x45\x02\x89\xea\x5c\x95\x0a\x87\x81\xd3\x5f\x38\xaf\xad\xec\x7f\x3f\xe0\x42\xa1\xb0\x5e\x50\x48\xca\x59\x0d\xd0\x9b\x5a\x95\x71\x45\x3c\xcb\xe6\x94\x49\x4d\x99\xae\x11\xad\x80\x73\x4f\xf3\x3a\x1a\x41\xac\x35\xea\xe9\x24\x7a\x2f\x50\xa2\x78\xd1\xca\xf8\x64\x6b\xa9\xad\x25\x51\x59\x92\xfe\x51\x17\xeb\xa8\xf0\x7d\x16\x03\x22\x14\xb5\x69\x40\xce\xc1\xc4\xcd\x66\x0a\xbc\xac\x41\x77\x00\x25\x74\xd3\xcc\x51\xa1\xb0\xa8\x63\x49\xfc\x9a\x45\x64\x6e\x7c\x5c\x1a\xe6\x43\x4b\x50\x2a\x71\xc8\x16\xf4\x33\x93\x40\x99\x2f\x46\xb3\x45\x32\x50\xbc\x49\x9e\x8c\xcd\x87\x99\x11\x37\xff\xb7\x5f\xb2\x67\xe6\x14\x9e\xc6\xe6\xbf\x47\x93\xa5\xb1\x7f\x30\xfa\x5c\x78\xf0\x30\x7a\x78\x6f\xc0\x9b\x93\x81\x86\xe9\x27\xd3\x78\x84\xb7\x5f\xba\xd1\x8f\x26\x0b\x63\x76\x20\xf8\x5c\x7d\x87\xf8\x5f\xa9\xd3\x0b\xd2\x19\xcb\xb8\x7b\xa4\x28\x32\xaa\x7e\xee\x08\x02\x8f\xda\x09\xc2\xb8\xa3\x7d\x77\x43\x4b\x9f\x49\x1e\x0a\x1b\xb3\xbd\xa0\x69\x1a\x19\xb1\x0d\x06\xc3\x61\x4d\xa2\xef\xae\x29\xe2\x3c\x2b\x85\xe8\x0c\x25\x99\xd0\x51\x48\xd3\x6a\x4d\x3a\xbe\x9b\x40\x74\x1e\x9e\x9c\x42\x3a\x0c\xbd\x3a\x89\x1c\x08\xfc\xfb\x69\xa4\xc3\x60\x9d\x48\x74\x0b\x3a\xa8\xa4\xb0\xec\xac\x05\x9d\xd3\x49\xd1\xcf\xfe\xe3\x5e\x3a\xe5\x75\x8d\x91\xbd\xd9\xa6\x9d\x36\x9a\x85\xf7\xd6\x5b\x46\x21\xa2\xef\xf4\xba\x71\xf2\x4f\x9b\x07\xd5\xd6\x42\xf6\x82\x1e\x0f\x10\x14\x6e\xeb\x04\xbf\x8d\x46\xb3\xd0\x53\xba\xb7\x3e\x46\xc7\xf1\xe6\x77\x51\x34\xb4\xef\x25\x75\x19\x51\xa1\xc0\xa6\x03\xe9\x3f\x7e\xbe\xfe\xed\xf7\x3d\x75\xff\xf7\x7f\x4d\xe4\xfd\xdb\xef\xb5\x31\x11\x7d\x9e\x1c\x5d\xeb\x4c\x9f\x2b\x63\x9c\x61\x6b\x2f\x28\x28\xab\xeb\xc9\xd0\x51\x1f\xad\x15\x0f\x99\x23\xa3\x24\xfe\x22\x08\x73\x31\x63\xce\xd2\x2e\xa3\x4e\xb6\xa7\x52\x0f\xfa\xf2\x41\xb2\x8f\xa6\xe6\xa4\x6b\x52\x80\x44\xfe\x61\x3a\x59\x3e\x99\x51\x86\xe7\xc6\x22\x87\xcb\x70\xab\x5e\x88\x77\x35\xe8\x35\x9c\x0c\x86\x43\x81\xae\xed\x11\x29\x1b\x9b\xc0\x29\xc1\x68\x5b\xdd\x41\x70\x3a\x48\xb2\x0b\x50\x47\x54\x82\x67\xdc\xed\x3f\x5e\x99\xf3\xc5\x6c\x34\x36\x5b\x40\x37\xf2\xe2\x81\xe9\x4c\x0a\x6c\xf4\xf8\x58\xb0\xd8\xc7\x4f\xf8\x30\x1b\x3f\x8d\x66\x5f\xe0\x5f\xc6\x17\xb8\xa2\xce\x71\x5d\xfc\xbc\x88\x75\x66\x5b\x31\xb7\xfa\xda\x0b\xf5\x2a\x9f\x77\x32\x68\x63\xf3\xd1\xf8\x7c\x5c\x7f\x8b\x97\x16\x54\xc2\xd4\x6c\xee\x76\xcb\xf9\xd8\xfc\x27\xac\x94\x40\x84\xab\x54\xf8\xa6\xd6\x49\x74\x0e\x47\x8d\xf1\x94\xde\xc6\x8d\xb6\x97\xab\xd5\xf6\xac\xf3\x30\x69\xc8\xa7\xf4\x31\xd1\xd8\xcf\xcb\xca\x38\x70\x53\x6f\xfc\xda\x0d\x60\xa1\xb5\xda\x25\x32\x27\xf0\x7e\x69\x8e\x3f\x2e\x33\x10\x15\xf5\x45\x28\xd9\x07\xc3\x12\x8a\xa6\xa3\xff\x4d\xf6\xe1\xaf\x0d\xc0\x9e\x89\x4f\xec\x3a\x75\x7a\x3b\xbd\x3f\x43\xdc\x34\x7e\xc3\xe8\x01\x84\x07\x56\x70\x2e\x2c\xa9\xee\x22\x1c\x4d\x03\x3d\x0a\x5d\x33\xa8\xfc\x6b\xe4\x6a\x77\x0e\x5c\x65\xf5\x45\x68\xd9\xd7\xd6\x12\x16\xbd\x97\xc5\x4d\x7e\x2e\x57\x6b\x36\xfa\xed\x6c\x8d\xd3\x94\x39\xb8\xb5\xaa\xb7\x1e\x16\x67\x56\x7a\xb1\x71\x6a\x04\x9d\x06\x8b\x70\xf2\x5b\x98\x32\xeb\x27\x82\x07\xe2\x39\x7d\x32\xda\x6c\x75\xa3\xc8\x12\x52\xa2\x6b\x8d\xca\xf8\x46\x4c\x09\x42\x55\x8f\xf0\x50\xe7\x1a\x3e\xbd\x37\x66\x86\xf6\x4e\xe9\x1e\x94\x08\x11\xa6\x33\xfd\xc5\x51\x22\xd2\x1d\xe1\x94\xca\x22\xd0\xd1\x11\xe1\x64\x7d\xab\xd5\x4a\x27\x97\x46\x42\x3d\xca\x23\xdd\xdd\x91\xda\xfc\x86\xe1\x4c\x08\x9a\x4c\x75\x12\x4d\x2e\x79\x18\x96\x73\x57\x7a\xc9\xd4\xb1\x6c\xa9\x57\x59\xb9\x4c\x39\x7f\x42\x6a\xd7\x37\x9d\x90\x2a\x0b\x0e\x03\x58\xb8\x58\x7b\xb5\x3c\x15\x2f\xf3\xba\xd0\x15\x64\x0f\x03\xd6\x74\x75\xf8\x6a\x08\x1b\xef\x2d\xbb\xa0\x36\x2d\x3a\x0c\x73\x36\x29\xbf\x1a\xce\xfc\x5b\x59\x17\xb6\xd6\xa3\x50\x59\xfd\xfe\x6e\xe2\x35\xe8\xa3\x6a\xad\x71\x94\x3c\x86\x44\xca\x8a\xcb\x9f\xed\xcf\xc4\x22\x6d\x26\xfb\xe0\x2a\xaf\x38\x1c\xe3\xf9\x5a\x6e\xdd\x50\x2f\x3c\xba\xc6\x1b\x9f\x1d\xd4\xf6\x7c\xe7\x92\x54\xb7\x66\x18\x3e\xf2\x64\xd2\x94\x9e\x96\xe4\x14\xa7\xef\xd7\xd8\x49\x75\x7b\xdf\x75\x16\x50\x82\x38\x98\xcf\x5a\xd9\x69\xdb\x5a\x71\xfe\x7c\xb2\x22\x6b\xb1\xd1\x39\xd5\x5d\x5d\x65\xf7\x95\xb7\xbf\xfe\x0a\x03\xc9\xbd\xf4\x37\x4b\x71\x79\x0e\x86\x43\x85\x5b\x75\x7d\x7d\x03\x7a\x41\x9b\x3b\xfd\x04\xa9\x94\x21\x0a\xbd\xe8\x8a\x87\xee\x46\xf5\x32\x5f\x12\x6d\x77\xa0\x24\x5a\x71\x21\x1b\xea\xe3\x3d\x06\xf7\xf0\xd3\x4f\x95\x24\xea\x7e\xa4\x0a\x36\xf7\x03\x0f\x15\x66\x09\x29\xfe\xc8\xf5\x91\x7f\x63\x97\x17\x8e\xe0\x01\xc4\x3f\xcb\x6b\xae\x1e\x9b\x48\x9b\x38\xd1\x71\xa0\x5d\xb2\xbc\xcd\x5a\x57\x15\x18\xa4\x9f\xdc\x01\xba\xb3\x7e\xd8\x2a\x94\x95\x58\xab\x50\x7e\xc2\xda\x4b\xfd\x3f\x00\x00\xff\xff\x9f\xe0\x51\xba\x23\x2c\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 11299, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xc1\x0a\x82\x40\x10\x86\xef\x0b\xfb\x0e\x73\x2c\xc2\x27\xf0\x14\x29\xe1\x45\xc3\x12\xba\x2d\xa3\x2e\x39\x87\x76\x96\x71\x20\x7c\xfb\x08\x0f\x69\x5e\xba\xce\xfc\x7c\xff\xff\x25\x09\x1c\x9e\xf4\x10\x54\x0f\x4d\xb4\xc6\x9a\x53\x9d\x1f\x6f\x39\x14\x65\x96\xdf\x61\xe0\xe8\xda\xc9\x0d\x4c\x3d\x54\x25\x0c\x34\x2a\xcb\xe4\x38\x7a\x41\x25\x0e\x2e\xa2\x28\x75\x14\x31\xe8\x08\xcd\xb5\x28\xcf\xd0\xaa\x78\x0f\xbb\x6d\x96\xfa\x7d\xfa\xcb\xd7\x99\xaf\x6b\xbe\x0a\x86\x11\xbb\x3f\x1b\x96\xe9\xb9\xc3\x9a\xa5\x57\xc6\xaf\xf0\xb9\x65\x75\x75\xd9\x7a\xa5\xeb\xc7\x77\x50\x6a\xcd\x3b\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\xc1\x4b\xc3\x30\x14\xc7\xf1\x73\x03\xf9\x1f\xde\xb1\xc5\x0d\x54\xc4\xcb\x4e\xd5\x46\x10\xeb\x36\x4a\x7b\xd8\xa9\x3c\xd3\xd0\x05\x96\x64\xbc\xbc\x4d\xf7\xdf\x4b\xb1\x48\x0e\x2a\xe6\x18\x7e\x1f\x42\xbe\xcb\x25\x5c\x39\x3b\x12\xb2\x81\xee\x28\x85\x14\x8f\x8d\x2a\x5b\x05\x6d\xf9\x50\x2b\x40\xad\xc3\xc9\x73\x7f\xb0\xce\x72\x84\x5c\x8a\x0c\x87\x81\x4c\x8c\x90\x1e\xbd\x47\x42\xcd\x86\xe0\x8c\x74\xb1\x7e\xcc\xef\xef\x0a\x58\x6f\x5a\x58\x77\x75\xbd\x90\x62\x1a\x61\x8c\x86\x7b\x1d\x06\xf3\x17\xbc\xb9\x4d\x20\x00\x7c\x59\x87\x1f\x7d\x38\x1a\x42\xb6\xc1\x43\x96\xbd\xd9\xd1\x7a\xfe\x1e\x42\xa5\x9e\xca\xae\x6e\xe1\x7a\x7e\x6b\x40\x7b\xb8\xf4\x7c\x22\x1f\xce\x86\xfe\x01\x5c\xf0\xbc\x4f\xc8\x0c\xb2\x5f\xc1\xb6\x79\x7e\x2d\x9b\x1d\xbc\xa8\x5d\x3e\x27\x59\x24\x5f\x2c\xa4\x28\x56\x53\xce\x34\x70\x15\xde\xfd\x74\x57\x35\x9b\xed\x8f\x81\x57\x52\x7c\x06\x00\x00\xff\xff\x46\xb7\x65\xca\x91\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 401, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd1\xbd\x6e\xc3\x20\x10\xc0\xf1\xdd\x92\xdf\xe1\xf6\xc6\x43\x67\x4f\xb4\xd0\x89\xd8\x95\x05\x33\xa2\xa9\x95\x9e\x14\x20\xa2\xe7\x7e\xbc\x7d\xe5\xb6\x51\x08\xe9\x47\xf0\x7a\xf6\xfd\x05\xfc\x9a\x06\xae\x1c\x6e\xa3\xa5\x11\xf4\xbe\xae\xea\x8a\x49\x25\x06\x50\xec\x46\x0a\xb0\x9b\x4d\x98\x3c\x99\x1d\x3a\xa4\x67\x18\x44\xc7\xd6\x02\x6e\x7b\xa9\xd7\x1d\x38\xfb\x66\xc2\x7e\x8c\x96\x30\x78\x50\xfd\xe9\xc0\x84\x89\xda\x82\xda\xa3\xc5\xdd\xbb\xa1\x29\xfa\xf0\x32\xc6\x39\xf7\x35\xf9\x8c\x96\xa5\x5c\xf0\xf4\x94\xc5\x0e\xb3\x4b\x72\x75\x05\xc0\x38\xff\xf1\x9e\x06\x3d\x3c\xe0\x16\x3d\x41\xd7\x2b\xe8\xb4\x94\xc0\xc5\x1d\xd3\x52\x41\x73\xbd\xca\x56\x8f\x57\x28\x5a\x4b\x0f\xfb\xe7\x62\x3b\x83\xa5\x84\x3c\xbc\xfa\xe5\x88\xf3\xcb\x9c\x41\x96\x23\x7e\xbf\xf1\xd1\xf0\x00\xb1\x04\x31\x89\xe5\xae\xff\x22\xf2\xa1\xbf\xff\x4d\x71\x95\xff\x90\x5a\x9d\x7d\x3c\x15\x69\xeb\xea\x23\x00\x00\xff\xff\xef\x83\x3f\x08\x38\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 824, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x4f\x83\x30\x1c\xc5\xcf\x92\xf4\x3b\xbc\x23\x44\x76\xd0\x18\x2f\x3b\xa1\xf4\x40\xc4\x32\x09\x24\xee\x44\xfe\x2b\x0d\x36\xd9\xda\xa5\xed\x34\x7c\x7b\x83\xa8\x9b\x8b\xeb\xb1\xbf\xfe\x9a\xf7\xde\x62\x81\xeb\x9d\x1e\x1c\x05\x85\x76\xcf\x22\x16\x3d\xd6\x3c\x6b\x38\x9a\xec\xa1\xe4\x20\xef\x55\x40\xcc\x22\x00\xd0\x3d\x8e\x67\xa3\x07\xaf\x9c\xa6\x6d\xca\xa2\xab\x30\xee\xd5\x2f\xd1\x26\x40\x54\x0d\x44\x5b\x96\xe9\x6c\x4a\xdb\x1f\xb9\x7c\x23\x47\x32\x28\x87\x77\x72\xa3\x36\x43\x7c\x73\x9b\x9c\x1b\xda\xfb\x83\x72\x17\x8d\xfb\xbb\x7f\x8c\x8e\x8c\x35\xe3\xce\x1e\x3c\x36\xd6\x6e\x15\x99\xf3\x37\xab\xba\x78\xce\xea\x35\x9e\xf8\x3a\xd6\x7d\xc2\xa2\x64\x79\x52\xb9\x15\xc5\x4b\xcb\x51\x88\x9c\xbf\xce\xcd\x7d\x37\x25\xef\xe6\x30\xdd\x57\xcb\x4a\xfc\x8c\x32\xa1\xf4\x3b\x68\x8a\x09\xce\xbf\x9d\x4e\x9a\xdb\x0f\x33\xdd\xe5\x75\xb5\xfa\x33\xa9\x24\x2f\xa9\x57\xcb\xcf\x00\x00\x00\xff\xff\xec\xdd\xbf\x5a\x80\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 384, mode: os.FileMode(438), modTime: time.Unix(1488383638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_2_optionsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8d\x31\x0f\x82\x30\x14\x84\xf7\x97\xbc\xff\x70\x23\x44\x59\x74\x64\x42\xe9\x60\x44\x20\x0d\x0c\x8c\x2f\xd0\x28\x03\x2d\x29\x8d\xfa\xf3\x4d\x9d\x74\xbc\xbb\xdc\xf7\x65\x19\x76\xcb\x7c\xf7\x12\x0c\xfa\x95\x89\xe9\xac\x55\xd1\x29\x74\xc5\xa9\x52\x70\x6b\x98\x9d\xdd\x98\x12\x26\xc0\xca\x62\xf0\x14\x3f\x3e\xc4\x27\xc7\x43\x8a\xba\xe9\x50\xf7\x55\xb5\x8f\xeb\x24\x41\x10\xcc\x3b\x7c\x53\xab\x2f\xb7\x42\x0f\xb8\xaa\x21\x89\xbf\x94\x29\xcd\x23\x9f\xe9\xd7\x59\xba\x97\x8d\x5d\xa9\x9b\xf6\xdf\x89\x51\xb6\x51\x26\x93\x7f\x02\x00\x00\xff\xff\x7c\xc5\x4a\xdf\xa3\x00\x00\x00")

func migrations9_2_optionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_2_optionsSql,
		"migrations/9_2_options.sql",
	)
}

func migrations9_2_optionsSql() (*asset, error) {
	bytes, err := migrations9_2_optionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_2_options.sql", size: 163, mode: os.FileMode(438), modTime: time.Unix(1488383634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xc1\x6e\xea\x30\x10\x3c\x13\x29\xff\xb0\x37\x12\x3d\x90\xde\xe1\xe9\x1d\x40\x42\x4a\x1b\xb7\x8a\x9a\x06\x9a\x26\x52\x39\x45\x8e\xb3\x04\xb7\xc4\x46\xb6\x69\xcb\xdf\x57\x01\x9a\xa6\x40\x0b\xf8\x64\x7b\x66\x67\x77\x46\xda\x7e\x1f\xfe\x54\xbc\x54\xd4\x20\xa4\x4b\xdb\xb2\xad\xeb\x98\x78\x09\x81\xc4\xbb\x0a\x09\x30\x59\x55\x5c\x6b\x2e\x05\x38\xb6\xd5\xe1\x05\x34\x27\xe7\xa5\x46\xc5\xe9\xa2\x67\x5b\xf5\xfb\x05\xd7\xd9\x9c\xea\x79\x7d\x67\x73\xaa\x28\x33\xa8\x9c\xff\xff\x5c\x88\xc6\x09\x44\x69\x18\xb6\x88\xaf\x74\xb1\x42\xe8\x3c\x6b\x29\xf2\x7d\x7c\xb6\xa0\x26\x9b\x21\x42\x27\xe7\x25\x17\xa6\xc1\xc1\x27\x37\x5e\x1a\x26\xf0\x77\xc7\x5c\xa2\x62\x28\xb6\xe4\x53\xdc\x49\x1c\xdc\x7b\xf1\x14\xee\xc8\xd4\xe1\x85\x6b\x5b\xee\xb0\xe5\x36\x8d\x82\x87\x94\x40\x10\xf9\xe4\xa9\x65\x3a\xcb\x77\x9e\xc6\x51\x3b\x8a\xf4\x31\x88\x6e\x21\x37\x0a\x11\x9c\x4f\xdf\xb5\xde\x4e\xed\x98\x0c\x65\x4c\xae\x84\xf9\x4d\xc9\x71\xbe\xa2\xe9\x8f\x46\xdd\x99\x92\x55\xd7\x1d\x0c\x0c\xbe\x1b\xb7\x07\x7b\x30\x74\x8d\x6c\xd0\xf3\x9a\x67\x66\xbd\xc4\x4b\x27\xd8\x14\xd5\x8d\xb8\x30\x58\xa2\x3a\x3e\xc9\x01\xeb\xd4\x44\x5a\xe3\x45\x61\x6c\x0a\x9a\x2e\x3f\x45\xb2\x65\x31\x59\x9c\xc1\xe2\x5a\xaf\x50\x7d\x8b\xd0\xb6\xda\xfb\xe0\xcb\x37\x51\xff\xf9\xf1\x78\x72\xb8\x0f\x8c\x6a\x46\x0b\x1c\xda\xd6\x47\x00\x00\x00\xff\xff\x4e\x9e\xe0\x66\x44\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 836, mode: os.FileMode(438), modTime: time.Unix(1488383628, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_2_options.sql": migrations9_2_optionsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_2_options.sql": &bintree{migrations9_2_optionsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

