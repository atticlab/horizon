// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/4_account_statistics_updated_at_timezone.sql
// migrations/5_account_statistics_account_type.sql
// migrations/6_account_traits.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7b\x6f\xe3\x36\x12\xff\x3f\x40\xbe\x03\xd1\x7f\xec\xe0\x9c\x85\x9d\xf7\x03\x2d\xe0\x26\x4a\xd7\xa8\xd7\x69\x63\xe7\xb6\x8b\xc3\x81\xa0\x25\xc6\x51\x57\x16\x55\x49\xce\xa3\x87\xfb\xee\x37\x7a\xbf\x48\x91\x72\x24\x5f\x51\x60\x61\x69\x38\x33\xbf\x99\xe1\xcc\x70\xc4\xdd\xc3\xc3\xfd\xbd\xc3\x43\xf4\x1b\xf3\xfc\x95\x4b\xe7\xbf\x4f\x91\x41\x7c\xb2\x24\x1e\x45\xc6\x66\xed\x04\x2f\xf7\xf7\xf6\xf7\xe6\xda\x02\x79\x3e\xf1\xe9\x9a\xda\x3e\xf6\xcd\x35\x65\x1b\x1f\xfd\x88\x86\xd7\xd1\x3b\x8b\xe9\xdf\x39\x8f\x75\xcb\x0c\xe8\xa9\xad\x33\xc3\xb4\x57\xf0\xa6\xf7\xb8\xb8\xbb\xe8\x5d\xa7\x1c\x6d\x83\xb8\x06\xd6\x99\xfd\xc4\xdc\x35\x90\x60\xcf\x77\xe1\x0f\x0f\x48\x99\x9d\x70\x79\xa6\xc0\xfd\x69\x63\xeb\xbe\xc9\x6c\xbc\x04\x5e\x34\x20\x78\x22\x96\x47\x8b\x92\x80\x05\x5e\x53\xcf\x23\xab\x90\xe2\x95\xb8\x36\x70\xbb\x4e\x21\x50\xe2\xea\xcf\xd8\x21\xfe\x33\xbc\x75\x36\x4b\xcb\xd4\x07\xc8\x59\x61\x1d\x40\x5b\x2c\x23\x34\xe8\x13\xd9\x58\x80\x94\x2c\x2d\xea\x39\x44\xa7\x81\xee\xbd\xca\xfb\x57\xd3\x7f\xc6\xcc\x34\xf2\xea\x44\x36\x03\xa3\xce\xc8\x9a\x5e\x21\xa2\xeb\x6c\x03\xaa\x59\xe6\xda\xf4\xbd\x6b\xb4\x78\x77\xe0\xe9\x62\xfc\xf3\x54\xbb\x46\x73\xc0\xb6\x26\x57\xb1\x2a\xd7\xe8\xfe\xd5\xa6\xee\x15\x3a\x04\xb2\x54\xf2\x15\x4a\xbc\x70\xf3\xa0\x8d\x17\x5a\xb4\xb6\xc4\x17\xf5\xf7\xf7\x10\xfc\x47\x0c\xc3\x05\xfc\x60\x33\xe2\x12\xdd\xa7\x2e\x7a\x21\xee\x3b\xd8\xa0\x7f\x76\x72\x80\x66\xf7\x0b\x34\x7b\x9c\x4e\x07\x31\xb1\xe7\x51\x1f\x8c\x6f\x50\x0e\xfd\xe8\xa8\x42\xbf\x26\x6f\x98\x39\xd4\x25\xa1\x1f\x02\x57\x2f\xcd\x95\x69\xfb\xe8\x56\xbb\x1b\x3f\x4e\x17\x68\x58\x5e\x61\x10\xd3\x7a\xc7\xe1\x3a\x05\xea\x35\xb3\xfd\xe7\x26\xf4\x05\x7d\x4c\xbb\xbc\xa0\x7f\x38\xaa\x60\xc8\x34\x52\xa3\xcf\xeb\x24\x59\xb1\xbf\x77\x10\xba\x5f\x10\x00\xc1\xfe\x31\x3d\xdf\xd4\x3b\x08\x82\x8c\xf7\x4e\x02\x21\x32\xa2\x09\xdb\x7a\x4d\x15\x63\x00\xfc\xa9\x44\xfd\x4a\xe9\x77\x75\xde\x31\xb5\x2a\xf3\xc4\x99\x8a\xdc\x13\x72\x55\xf6\xc4\xb6\x37\xc4\x52\xe5\x1e\x53\xab\x32\xdf\x38\x90\x99\xa9\x81\x89\x8f\x82\x44\x0b\x1e\x5f\x3b\x28\xc8\x3f\xe1\x4f\xf4\x37\xb3\x69\x79\x49\x18\x1b\xd4\x75\x88\xeb\xbf\x63\x1f\x42\x0e\x79\x6b\x62\x59\x7c\x31\x92\xe8\xf5\x5d\xd2\x49\xfa\x8a\xf8\x26\x51\x6b\x1a\x89\x1d\x4a\x50\x96\x61\x85\x09\x2d\x1b\x54\x09\x87\xbc\x07\x95\xc8\x43\x4b\xc6\x2c\x4a\xec\x14\x4f\x98\x84\xf9\x8b\x23\x43\x37\x58\x2d\xb2\xc8\xc6\x30\x21\xed\x42\xb5\x68\xcf\x18\x09\xcb\x9c\x1d\xc0\x08\x74\x05\xdb\xb0\x1c\x35\xba\xcf\x5c\xfe\xae\x8e\x29\xbc\xcd\xf2\x4f\xaa\x43\x94\xd0\x37\x3f\x5b\x04\x19\x32\xff\x64\x4d\x7d\x92\xff\xad\xbb\x94\x1f\x5d\x41\x1e\xce\x02\x2c\x31\x54\xf0\x24\x78\xd0\xef\x81\x51\x7b\x57\x57\x21\x27\x64\xb3\xd7\xfe\x81\x3c\x1f\x26\x60\xb1\x69\x60\x8f\xfe\x95\x98\x71\xae\xfd\xfe\xa8\xcd\x6e\x6a\x2c\x59\xb2\x5d\xb2\xa0\xc2\x31\x82\x34\x5f\x8c\x1f\x16\xe8\xeb\x64\xf1\x19\x8d\xa2\x27\x93\x19\xac\xfc\xa2\xcd\x16\xe8\xe7\x6f\xc9\xb3\xd9\x3d\xfa\x32\x99\xfd\x73\x3c\x7d\xd4\xb2\x07\xe3\x3f\x72\x0f\x6e\xc6\x37\x9f\x35\x34\xda\x06\x0a\xba\xff\x3a\xd3\x6e\x41\x9a\x1c\xd3\x78\xba\xd0\x1e\xc4\x90\x52\x4e\xd9\x9b\x4f\xa6\xc1\xd3\x69\xc5\x5c\x07\xfa\xa0\x55\x54\x15\x5b\xdc\xb1\x25\xc6\xb9\x50\x0d\xbc\x5f\x89\x53\xc7\x81\x96\xac\x36\x5d\x09\xe2\xe3\x19\x0a\x19\x73\xdf\x71\x9c\x21\x5a\x44\x50\xe6\x2c\xcd\x3a\xb5\x45\x54\xa2\x3e\x7d\x7a\x82\x5d\xd8\x81\xf6\x31\xe3\x44\xf9\x12\x28\x2c\x04\x93\x10\xe6\x3a\x26\x11\xe9\x0f\xcc\x35\xa8\xfb\x83\x28\x07\x85\xa5\x44\xf0\xce\x80\xc4\x62\x5a\x1e\xfa\xd3\x63\xf6\x52\x62\x22\x8b\x1a\xc0\xa1\x03\x13\xc5\x8c\x13\x13\xc1\xfe\xd9\xc0\x19\x44\xa8\x73\x44\x8e\x9f\x89\xf7\xac\xd6\x2f\x39\x2e\x7d\x31\xd9\xc6\xc3\xd2\x95\x89\xc5\x5c\x62\x7b\x51\x16\xc6\xa1\x9b\x52\x55\x84\xf5\x3e\x73\x93\xe2\x02\xdd\x62\x9e\x3c\x83\x97\x17\x29\xe5\x7d\x59\x0b\xc2\x23\x4e\x83\x2b\xf9\xbd\x76\x98\x0b\xd6\xc1\x2f\xe0\x99\xa0\x1a\x95\x01\x8d\x2a\x61\xc6\xe0\x50\x06\xe8\x4d\x48\x36\xfc\x38\x7d\xa2\x14\x3b\x50\xc3\x45\x4d\x03\x1c\x63\x31\xd0\x88\xfc\x1e\xbe\x87\x0d\x4e\xdd\x17\x21\x4d\xd0\xf7\xfb\x6f\x38\xe8\x8f\x3d\xf3\xef\x2a\x99\x24\xc4\x33\x2f\x06\x5d\x98\xa9\x9b\x0e\xe9\x24\xa5\xf1\xe5\xc8\xdb\x89\x06\x49\x41\x9e\x68\xb6\xb2\x45\x6b\x5d\x80\x92\x98\x9d\xb5\x06\x5b\x81\xde\xbe\x5f\x50\x12\x97\x35\x11\xf5\xe4\x82\xce\xa2\xb2\xa8\xcb\x38\x96\x17\xe7\x7c\x4e\x15\x57\xf0\xa0\x0d\xd1\xe3\x81\x45\x50\xd4\x3e\x5c\xd3\x92\x2e\x9b\x6d\x5c\x9d\x26\x9b\x41\x50\x36\x92\xd4\xd6\x83\x16\xb9\x42\xa1\xba\x6d\xf2\x38\xbb\x4d\x22\x22\x49\xea\x69\x44\xc9\x27\x1f\x4e\x24\x22\x3d\x5b\x4f\x25\x12\x41\x3b\x4f\x26\x0d\x81\x7f\x3c\x9d\x48\x04\x56\x13\x8a\x68\x81\x24\xa5\xe4\x96\x75\x1b\xd7\x69\x2c\xe7\x15\x55\x6f\xfc\xe2\x7e\x4f\xd6\x50\x2a\x67\x9d\xfa\xf4\xc1\x27\xce\xa4\xd7\x34\x45\x44\xbc\x57\x45\x8d\xe5\xff\xad\x33\x84\xf6\x8a\xda\x2f\xd4\x02\xc5\xb8\x47\x49\x78\x0f\x4d\xda\xc6\xf2\x45\x6f\xd3\x61\x06\xe7\x5d\x60\x0d\xe1\x7b\xcf\x5c\xd9\xc4\xdf\x00\x77\x8e\x07\x2e\xcf\x0e\xfe\xf5\xef\x2c\x85\xff\xe7\xbf\xbc\x24\x0e\x14\xe5\x86\x91\xae\x59\x34\x6c\xab\x66\xfc\x94\x99\x0d\xd6\xa8\xad\x09\x39\x66\x55\x3e\x09\x3a\xb0\x2b\x5e\x82\x0f\x0d\x2f\x70\xe2\x05\x44\xf4\x4a\x74\xa8\x86\xed\x17\x6f\xab\x58\x07\xd5\x94\x10\xed\xa4\xfb\xd9\x34\x37\x79\x40\xd1\xab\x9b\xfb\xe9\xe3\x97\x59\xe0\xce\xe0\x93\x48\x82\xcd\x06\x3b\xbf\x10\xab\xdf\x2b\x8f\x30\x00\xaf\x4b\x57\xba\x45\x3c\xaf\x33\x15\x25\xed\xb0\x92\xde\x4a\xad\xd4\x2e\xc1\x08\xcb\x72\x23\x38\x92\x54\x2e\x06\x74\x4b\x60\xf7\x3c\x31\x57\xfe\x3d\x0b\xdd\x8e\x17\x63\x39\x50\x39\x6f\xc1\xa7\x92\xd6\xf8\x73\x86\xd9\x1f\xe7\xcd\x1d\x0b\x37\x67\xab\x38\x59\x04\x5f\xcb\xd9\xce\xb5\xa9\x76\xb3\xc8\x7d\xe0\xfc\x04\xe7\x58\xfe\xe6\x1c\xa0\xd1\x20\x9a\x7f\xd7\xbb\xbf\x6e\xbc\xa8\x08\x76\x32\x9b\x6b\xd0\x31\x4d\x66\x8b\xfb\xca\x50\x31\xec\x87\xe6\xa8\xdf\x1b\x61\xd3\x36\x7d\x93\x58\xd8\x0b\xd9\x7d\xf2\xfe\xb2\x40\xc9\xde\xd1\x70\x74\x76\x38\x0c\xfe\x47\xa3\xa3\xab\xd3\xf3\xab\x93\xe1\xa7\xf3\xe1\xd9\xf0\xe2\xe8\x1f\xc3\xe3\x5e\xa0\xbb\x12\xfb\x23\x60\x6f\xd0\xb7\xe2\x4e\x58\xc2\x2e\x61\xa6\x51\x2b\x6a\x74\x71\x39\x3c\x6e\x24\xea\x18\x93\xd5\x0a\xf6\x16\x14\x48\x4c\xdf\x1c\x6a\x7b\xd4\xc3\x60\xd0\x74\x0c\x59\x2b\xef\xe8\xf8\xec\xf8\xbc\x91\xbc\x13\x5c\xdd\x46\x38\x2b\xd0\x38\x99\xdd\xd7\x8a\x3d\x3e\x1d\x8e\x2e\x1a\x89\x3d\xe5\x89\x4d\x37\x1c\x04\x49\xad\xbc\x93\xe1\xe5\xf0\xb2\x91\xbc\x33\x5c\xdc\xcd\xb5\xec\x4f\x4f\x47\xe7\xcd\xe0\x9c\xe3\x62\xa2\xab\x67\x7f\x79\x72\xdc\x2c\x28\x2e\x4a\xec\xb1\xff\xca\xf0\x2b\x79\xaf\x15\x73\x76\x34\x3a\x4f\x8d\x24\xde\xa2\xb5\x03\xf4\x0f\xe7\xb9\xba\xf9\x76\x6b\xcc\x79\x93\xe1\xd6\x98\x2b\xcc\xe4\xb6\x4d\xdb\xdb\x4d\x7d\x3e\x98\xcb\xd5\x1a\x16\xd5\x04\x2f\x99\xf2\xb4\xe6\x05\xa5\xb1\xc6\x47\xfd\xd0\xf4\xc0\xdc\x92\x27\x64\xbd\x56\x53\x5f\x08\x8f\xc7\x5b\xb7\x17\xc5\xe4\xe3\x7c\xa7\xef\x09\xdf\x9b\xfb\xd9\x7c\xf1\x30\x86\xf4\xd5\xf4\xec\x5d\x3d\x30\x14\xa4\x44\x87\x96\xf1\xed\x6d\x4e\x04\x4f\x11\xf4\xdb\xc3\xe4\xcb\xf8\xe1\x1b\xfa\x55\xfb\x86\xfa\xf1\x27\xb8\x41\xee\x8e\x8a\xe2\x2d\x9b\xae\x51\x65\x92\x6a\x91\x95\x14\x92\xa2\x1b\x54\xaf\x6d\x28\x5c\xcc\xe8\x1a\x6c\x24\xa5\x16\x68\x4e\x91\x22\x48\xd3\x90\xdc\x03\xe8\x4a\xf7\x44\x00\x5f\xed\x82\x78\x25\x8d\x4b\xd5\xbc\x2b\xbd\x4b\x62\xb8\xda\xf3\x54\x51\xc2\x20\x29\x16\x1d\x41\xaa\x97\xca\x45\xa8\xa0\x68\x23\xc0\xc2\x9c\xdc\x31\x64\x91\xdc\x5a\xd0\xb5\xca\xaa\xed\x2e\x4e\x33\x1e\x25\x1b\x28\x42\x6f\x09\xde\xc9\xec\x56\xfb\x63\xcb\x19\x6b\xb8\x56\x22\x07\x4c\xc1\xbb\xa3\xf8\x38\x9f\xcc\x7e\x41\x4b\xdf\xa5\x34\xcd\x81\x5c\x14\xcb\xb4\x8b\x6d\x4f\xe3\x8c\x67\xa0\x1d\x77\x46\x5c\xd4\x2f\x22\x1e\x54\xe6\xaf\x22\x8d\x83\x71\x72\xab\xea\x86\xf3\x69\x25\x5d\xcb\x53\x6d\x91\x8a\x51\x7f\xdd\xaa\x92\x11\x4b\x35\x35\x4b\x63\xf4\x41\x75\x60\x2e\xdc\xca\x98\x06\xc7\xf4\x90\xa6\x0d\xf5\x1f\x67\x13\x68\xfd\x62\x14\x25\xfe\x79\x2c\xc9\xa5\x9b\x02\x0c\xde\xc7\xf3\x41\x72\x79\xa6\x0e\x41\x36\x1d\x6c\x5b\x77\xd3\x50\xd6\x3a\xfb\xfc\x36\xe0\x5e\x03\x50\x40\xc2\x1c\xec\x74\x06\x26\x66\x9e\xc7\x23\x18\xeb\x6e\x05\x4f\x8c\xca\x7f\xeb\x10\x55\xcc\x5c\xb0\x4f\xb6\xc4\x55\xfc\xec\xca\x47\x06\xe6\x0c\x52\x09\x6b\x07\x58\x8c\x28\x63\xba\xad\x9b\xe4\x2e\x49\x6f\x59\x81\xa4\x2e\xbc\x52\xe4\x9f\xc7\x91\x5c\x23\x2b\x28\x2e\x56\x33\xef\x85\xce\x74\xad\x08\x51\xcb\xb8\x22\xad\xfd\xc8\x81\x7e\xab\x51\x91\x31\xdd\x3e\xcc\x15\x42\x3a\x9a\xe0\x96\xa7\x5d\x18\x16\xc4\x2d\x45\xeb\xf6\x97\x4a\xcc\xe3\x4d\x6f\x99\x2a\x77\x3b\x62\xf6\x1d\xc4\x52\x9d\x30\x39\x0c\x25\x97\xc4\xe5\x27\xe0\x19\x1c\x63\xdb\x8b\xb0\x5a\x31\xd2\x02\x28\x3c\x52\x17\xd9\xc6\xbb\x3f\x60\x9b\x5e\xad\xec\x0a\x02\x4f\x96\x34\x13\xa5\x94\xcd\xc0\x74\x1e\x4b\x05\x59\xdb\xe6\x53\x31\xcb\xd2\x3d\xd2\x1d\xb8\xa4\x72\x75\x55\x8a\xa9\xb4\xa0\x19\xc2\xdc\xa5\xe2\xdd\x79\x2a\x7f\x93\x59\x06\x2f\x47\xdb\x0c\x19\xef\xde\xf4\xee\x20\x72\x6f\x6d\xcb\xb0\xf2\x16\x35\x03\x9d\x9c\x72\x76\x07\x34\xbd\x20\x24\x03\x57\x7b\x92\x2d\xb2\xcf\x3e\x07\xec\x24\x87\x94\xc5\x71\xdb\xcb\x6d\x32\x49\x91\x71\xb1\xcb\xe8\x2a\x95\xd4\xc9\x54\x01\xd6\xb8\x17\x2a\x09\xec\xb0\xf6\x56\x25\x29\x01\x52\xab\xc0\xf9\x76\x76\x27\x51\x57\x15\xf8\xa1\xee\x1a\x16\x18\x34\x6d\x4f\x92\xb1\x02\x5e\x32\xf6\xbd\x3d\x7f\xd4\x08\x91\x76\x42\xfd\x7e\x72\xb5\xf9\xf0\xa7\x9f\x50\xcf\x63\x16\xb4\x13\xe1\x97\x88\xc0\x43\xf1\xdf\xeb\x3b\x38\x18\x20\x31\x61\xf0\xc9\x42\x89\xd0\xf4\xbc\x0d\x75\xc5\xa4\x4b\xb6\x59\x3d\xfb\x4a\xe2\x0b\xa4\xf5\x0a\x14\x48\x4b\x2a\x1c\xa0\xaf\x9f\xb5\x07\x2d\x0a\x47\xf4\x23\x3a\x3e\x56\xf9\xd0\x62\x1a\xf8\x29\x37\x31\xbe\xfb\x55\x69\x68\xdc\xe2\x07\x96\x58\x01\x74\x77\xff\xa0\x4d\x7e\x99\xa5\x53\x60\xf4\xa0\xdd\x01\x9c\xd9\x8d\x36\xaf\x34\xef\xd5\x08\x15\xfd\x8b\x0f\x48\x67\x6b\xc7\xa2\x3e\x4d\x34\xfe\x5f\x00\x00\x00\xff\xff\x84\x39\xe5\x43\x22\x42\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16930, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\x6e\xc0\xff\x61\x91\x2f\x92\x71\xf2\x5d\x82\x1c\x82\x9c\x8d\x04\x50\x6c\xe6\x22\x54\xa6\x12\x89\x6a\x12\x14\x05\xb1\x22\x57\x12\x6b\x92\xcb\xec\x92\x7e\x49\xd1\xff\xde\x59\x92\x4b\xf1\x6d\x49\x4a\x16\xdd\x02\x45\x6b\xee\xec\xcc\x3c\x33\xb3\xcf\x0c\x97\x3a\x3f\x47\xff\xf2\x9c\x0d\xc3\x21\x41\xcb\xe0\xf4\xe4\xfc\x5c\xfc\x8b\x3e\x53\x1e\x6e\x18\x59\x7c\x99\x22\x1b\x87\x78\x85\x39\x41\x76\xe4\xa5\x02\xa7\x27\x0b\xcd\x40\x3c\x84\x4d\x1e\xf1\x43\x33\x74\x3c\x42\xa3\x10\xbd\x43\x2f\x2f\x93\x35\x97\x5a\xb7\x35\x8f\x2d\xd7\x11\xf2\xc4\xb7\xa8\xed\xf8\x1b\x58\x19\x2c\x8d\x8f\x6f\x07\x97\x99\x46\xdf\xc6\xcc\x36\x2d\xea\xaf\x29\xf3\x40\xc4\xe4\x21\x83\xff\x70\x10\xa5\xbe\xd4\xb2\x25\xa0\x7d\x1d\xf9\x56\xe8\x50\xdf\x5c\x81\x2e\x22\x04\xd6\xd8\xe5\xa4\x68\x09\x54\x98\x1e\xe1\x1c\x6f\x62\x89\x7b\xcc\x7c\xd0\x76\x29\x20\xa4\x48\x75\xec\x91\x0b\x14\xb8\xc1\x86\xff\x70\x2f\x91\xf1\x18\xc0\x9f\xda\x37\x43\xd3\x17\x93\x99\x7e\x89\x16\x60\xcd\xc3\x17\xe8\xfc\x12\xcd\xee\x7d\xc2\xe0\xff\x64\x10\xae\xe6\xda\xd8\xd0\x76\xc2\x68\xf2\x11\xe9\x33\x03\x1e\x4c\x16\xc6\x42\xea\x44\x5f\x27\xc6\x27\xb4\xb8\xfa\xa4\xdd\x8c\x51\xb0\x31\x2d\x88\xa7\x4b\x13\x1f\x4a\x5e\xec\x34\x95\xfc\xb9\x9a\xdd\xdc\x68\xba\xd1\xec\x4d\x22\x83\x60\x77\x45\x0f\x9a\x2c\xd0\xe0\xf3\xf4\x3f\xc1\x46\x64\x34\x60\xd4\x22\x76\xc4\xb0\x8b\x5c\xec\x6f\x22\x08\xce\xa0\xce\x9d\x2d\x0f\x29\x23\x47\x8d\x49\xa2\xb2\x18\x92\x68\xe5\x3a\x56\x73\x38\x8a\x9e\x1c\x1c\x8d\xd4\xba\x08\x86\xa8\x6a\x14\x82\x3a\x04\x85\x86\xc4\x73\x51\x8f\x9c\x84\x1c\xd1\x35\x1a\xde\x92\xc7\x11\xba\xc3\x6e\x44\xce\x50\x80\x1d\xc6\x65\x80\xe2\x32\x25\x98\x59\x5b\x33\xc0\xe1\x16\x6a\x2a\xf1\x7f\x54\x4e\xad\x10\xb4\xc9\x1a\x47\x2e\x9c\x0f\xbc\x72\x09\x0f\xb0\x45\x44\xc5\x0f\x2a\xeb\xf7\x4e\xb8\x35\xa9\x63\xe7\x8b\xb8\x9c\x0b\x47\xf8\xf8\x68\x62\xcb\xa2\x91\x1f\x72\x19\x0b\x63\xfc\x61\xaa\xed\x22\x91\x06\x33\x0b\x07\x88\x65\xb6\x2f\x4a\x39\x8a\xb7\x56\x14\xa3\xe1\xe9\x09\x82\x7f\x1c\x1b\xad\x9c\x8d\xe3\x87\x71\xfa\xf4\xe5\x74\x3a\x4a\x16\xb0\x6d\x33\x38\x51\x70\x0a\x31\xc3\x56\x48\x18\xc4\x89\x3d\x42\xf4\x86\x6f\xfe\x7b\x76\x7a\x72\x56\x5b\x49\xa9\x11\xb2\x5e\x13\xab\x07\xe7\x53\xbd\xd2\xf7\x12\x26\x53\x89\x45\x0a\xd2\x80\x00\x03\x0a\x32\x51\x8a\xbe\xa0\xcc\x26\xec\x05\x82\x25\xb2\x01\xd0\xa5\xe5\xb8\x94\x14\x6b\x36\x09\xb1\xe3\x72\xf4\x07\xa7\xfe\xaa\x25\x42\x2e\xb1\x41\xc3\xf1\x23\x94\xea\x95\x11\xe2\xe4\x47\x04\x2c\xac\x74\x39\x11\x37\xb7\x98\x6f\xeb\x13\x5d\xde\x10\x30\x72\xe7\xd0\x88\x9b\xad\x3b\x65\xc0\x18\xf6\x39\x4e\x18\x3c\xce\x52\xe6\xca\xb5\xf6\x71\xbc\x9c\x1a\xe8\x65\xd9\xc6\x2e\x4b\x1d\x37\x58\x2e\xe5\xc4\x36\x71\x88\x44\x2b\x82\xee\xe2\x05\x48\x9c\x35\xd1\x94\xc4\x13\xf4\x93\xfa\xa4\xb2\x89\x11\xe8\x6b\x6d\xbb\x52\xe1\x28\xb0\xbb\x0b\x67\xb5\x25\xff\xf6\x02\xca\x20\x3a\xe6\x1d\x64\x06\x60\x55\x00\xbd\xaa\x54\x19\x05\x82\x01\xf4\x8e\xcf\x15\x65\xba\x26\xc4\x0c\x28\x75\x15\xcb\xa2\x91\x9b\x20\xa3\xca\x7b\xbc\x0e\xc7\x9b\xb0\x3b\xa5\x8c\x87\x1f\xcc\xf0\xc1\x04\xae\x34\xb9\xf3\xb3\x2a\xd6\x52\xe1\xbb\x2c\x06\x98\x85\x8e\xe5\x04\xb8\x0f\x3e\xab\x37\x93\x63\x37\x05\xba\x3d\x28\xa1\x9d\x66\x0e\x0a\x05\xe8\x81\xe0\xfe\x90\x11\x59\x68\x5f\x96\x9a\x7e\xd5\x10\x94\x52\x1c\xe4\x86\x6e\x66\x12\x28\x0b\x63\x3c\x37\x92\xb6\xfc\x2a\x79\x32\xd1\x41\x5d\xdc\x42\x3f\x7c\x97\xcf\xf4\x19\xba\x99\xe8\xbf\x8e\xa7\x4b\x6d\xf7\x60\xfc\x2d\xf7\xe0\x6a\x0c\x4d\x1d\xbd\x3a\x1a\x68\x34\xfb\xaa\x6b\xd7\xe0\x42\x3b\xfa\xf1\xd4\xd0\xe6\x7b\x82\xcf\xd4\xb7\x88\xff\xdb\xb1\x3b\x41\xea\xb1\x8c\xdb\x1b\x73\x9e\x51\xd5\xdd\x3b\x08\xc0\x93\x04\x61\xdc\xd1\x9e\xdc\xd0\xd2\x67\x9c\x46\xcc\x22\xf2\x2c\x28\x9a\x86\x24\xb6\xc1\xe0\xe2\xa2\x22\xd1\xf5\xd4\xe4\x71\xf6\x4a\x21\x2a\x43\x49\x26\x54\x14\x52\xb7\x5b\x91\x8e\x27\x13\x88\xca\xc3\xa3\x53\x48\x8b\xa1\x67\x27\x91\x3d\x81\x3f\x9d\x46\x5a\x0c\x56\x89\x44\xb5\xa1\x85\x4a\x72\xdb\x7a\x2d\xe8\x8c\x4e\xf2\x7e\x76\x1f\xf7\xd2\x29\xaf\x6d\x8c\xec\xcc\x36\xcd\xb4\x51\x2f\xbc\xb3\xde\x30\x0a\x61\x75\xa7\x57\x8d\x93\xff\xd8\x3c\x08\x43\x15\xf1\xef\x88\x0b\x8e\xa1\x90\x3c\x54\x09\xfe\x41\x8c\x66\xf0\xc2\xa8\x5a\xf5\x88\x78\xa9\xad\x5f\x13\xd1\x50\xae\x73\x67\xe3\xe3\x30\x02\xed\x35\x19\xf8\xdf\x9b\xb3\xdf\x7e\xdf\x51\xf7\x9f\x7f\xd5\x91\x37\x48\x94\xc7\x44\xe2\x51\x33\xee\x22\x55\xa6\xcf\x94\xf9\x10\x8d\xc6\x5e\x90\x53\x56\xd5\x23\xd1\x41\x5c\xcd\x15\xe4\x10\x5e\xa0\x21\x9a\x6f\xa1\xa2\x37\x44\x32\x67\xe1\x94\xc1\xd9\x4b\xcf\x54\xea\x41\x57\x3e\x48\xce\xd1\x4c\x9f\xb6\x4d\x0a\x28\x91\xbf\x9a\x4d\x97\x37\xba\xc8\xb0\x78\xcf\x97\x70\x7d\x08\xfd\x1d\x76\x87\x83\x4e\xc3\x09\xc4\x85\x91\x8d\xe5\x62\xce\x6b\x9b\xc0\x31\xc1\x28\x5b\xdd\x5e\x70\x5a\x48\xb2\x0d\x50\x4b\x54\x82\x5b\xf2\xb8\xbb\x02\xd2\x17\xc6\x7c\x3c\xd1\x1b\x40\xd7\xf2\xe2\x9e\xe9\x4c\x0a\x6c\x7c\x7d\x9d\xb3\xd8\xc5\x4f\xf4\x79\x3e\xb9\x19\xcf\xbf\xa3\x5f\xb4\xef\x68\xe8\xd8\x87\x75\xf1\x7e\x11\xab\xcc\x36\x62\x6e\xf4\xb5\x13\xea\x55\x36\xef\x48\x68\x13\xfd\x5a\xfb\x76\x58\x7f\x8b\xb7\xe6\x54\x8a\xfb\xbe\xda\x6e\xb7\x5c\x4c\xf4\xff\xa3\x55\xc8\xe0\xdd\x77\x98\x0a\x8f\x2a\x9d\x44\xe5\xb0\x68\x8c\xc7\xf4\x36\x6e\xb4\x9d\x5c\x2d\xb7\x67\x95\x87\x49\x43\x3e\xa6\x8f\x89\xc6\x6e\x5e\x96\xc6\x81\x51\xb5\xf1\x2b\x0f\x80\x09\xd4\xfd\x98\xc8\x1c\xc1\xfb\xa5\x3e\x81\xc1\x2d\x05\x51\x52\x9f\x87\x22\x2f\x0c\x0b\x28\xea\x5e\xfd\x47\xf2\xe2\xaf\x09\xc0\x8e\x89\x8f\xec\x3a\x10\x6e\x57\xa7\x77\xef\x10\xa3\xda\x3b\x8c\x0e\x40\x68\x60\x06\x7d\x61\x49\x75\xe7\xe1\x28\x1a\xe8\x41\xe8\xea\x41\x65\xb7\x91\x50\x02\x3d\xe0\x2a\xaa\xcf\x43\x93\xb7\xad\x05\x2c\x6a\x2f\xf3\x87\xbc\x2f\x57\x2b\x36\xba\x9d\x6c\x85\xd3\x8e\x6f\x93\x07\xb3\xfc\xed\xc0\x04\xdd\xe9\xe7\x81\x63\x23\x68\x35\x98\x87\x93\x7d\xcb\x28\xb2\x7e\x22\xb8\x27\x9e\xe3\x27\xa3\xc9\x56\x3b\x8a\x4e\x09\x49\x99\x42\xe8\x14\x13\xf8\xd1\xda\x42\xa3\x95\x56\xaa\x12\x42\x1d\x9c\x4f\x0f\x8f\x50\x9b\x5d\xe0\xf7\x84\xa0\xce\x54\xeb\x39\xce\x24\xf7\xc3\xd2\x77\x21\x15\x4c\x1d\x4a\x46\x6a\x95\xa5\x6f\x15\xfd\x27\xa4\xf2\x75\xa4\x15\x52\x69\xc3\x7e\x00\x73\xdf\xad\x9e\x2d\x4f\xf9\x6f\x65\x6d\xe8\x72\xb2\xfb\x01\xab\xfb\x32\xf7\x6c\x08\x6b\x3f\x0b\xb6\x41\xad\xdb\xb4\x1f\x66\x39\x88\x3e\x1b\xce\xec\x2a\xaa\x0d\x5b\xe3\x9b\x46\x51\xfd\xee\xea\xff\x39\xe8\xa3\x6c\xad\x76\x52\x3b\x84\x44\x8a\x8a\x8b\xb7\xe2\x3d\xb1\x48\x93\xc9\x2e\xb8\x8a\x3b\xf6\xc7\xd8\x5f\xcb\xad\x1a\xea\x84\x47\xd5\x78\xe3\xd1\x3c\x7c\xe8\x6f\xec\x4f\x75\x2b\x66\xcd\x03\x07\xff\xba\xf4\x34\x24\x27\x3f\xdc\x3e\xc7\x49\xaa\xda\x7b\xd2\xa8\x0d\x1b\x6c\x92\xcd\x5a\xf2\x65\xd6\x5c\x51\x7a\x7b\xb4\x22\x6b\xb0\xd1\x3a\xd5\x0d\x87\xf2\x73\xe0\xf9\xfb\xf7\x68\xc0\xa9\x0b\xb3\x11\x17\xbf\x0e\x10\x65\x37\xb8\xb8\x10\x17\xce\x67\x67\x23\xa4\x16\xb4\xa8\xdd\x4d\xd0\xe1\x3c\x22\x4c\x2d\xba\xa2\xd1\x66\x1b\x76\x32\x5f\x10\x6d\x76\xa0\x20\x5a\x72\xe1\x0c\x7d\xfd\xa4\xcd\xb5\xe4\x8c\xa1\x77\xe8\xf5\xeb\x52\x12\x55\xbf\xa4\x44\x16\xf5\x02\x97\x84\x44\x26\x24\xff\x4b\xcc\x6b\x7a\xef\x9f\x9e\xd8\x8c\x06\x28\xfe\xed\x58\x7d\xf5\x58\x98\x5b\x90\xb7\xcb\x36\xc9\xe2\x31\x6b\xdc\x95\x63\x90\x6e\x72\x7b\xe8\x96\xfd\xb0\x51\x48\x96\x58\xa3\x50\xf6\x66\xb4\x93\xfa\x3b\x00\x00\xff\xff\x39\x8e\x26\xde\xc8\x2a\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10952, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xe2\xe5\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\xc8\x2f\x88\x4f\xaa\x8c\xcf\xc8\xcf\x4c\x51\xf0\xf7\x53\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\xcf\x2f\x48\x05\xea\xc8\xcc\xcf\x8b\x2f\x48\x2c\x2a\xc9\x4c\xce\x2c\x48\xcc\x2b\x29\x56\x08\x0d\xf6\xf4\x73\x57\x48\x2a\x29\x4a\x4d\x55\xd0\xc0\x54\x9b\x99\xa2\x69\x8d\x6e\x7e\x09\xc4\xfc\x12\x54\xf3\x4b\x8a\x12\xf3\x8a\x13\x93\x89\xb4\x01\x59\x35\xc4\x0e\x5e\x2e\x64\x7f\xb9\xe4\x97\xe7\x81\xc4\x5c\x82\xfc\x03\x30\xfd\x65\x8d\x2a\x81\x70\x10\x50\x02\x10\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x5f\x4b\xf3\x30\x14\xc6\xaf\x57\xe8\x77\x38\x97\x1b\xef\x06\xaf\x22\xde\xec\xaa\xda\x08\xc3\xda\x8d\xd2\x81\xbb\x0a\x31\x09\x5b\x70\x4d\x46\x73\x6a\x9d\x9f\xde\xcc\x85\x12\x74\xda\xe6\xf2\xf4\xf7\x3c\xa7\x7f\x7e\x9d\xcd\xe0\x5f\xa5\xb6\x35\x43\x09\xeb\x43\x1c\xc5\xd1\x7d\x41\x92\x92\x40\x99\xdc\x65\x04\x18\xe7\xa6\xd1\x48\x2d\x32\x54\x16\x15\xb7\x30\x8e\x23\x70\x87\x09\x51\x4b\x6b\x21\x3c\x7c\xc7\x6a\xc6\x51\xd6\xf0\xc6\xea\xa3\xd2\xdb\xf1\xed\xcd\x04\xf2\x65\x09\xf9\x3a\xcb\xa6\x3e\x68\xad\x44\xca\x8d\x90\x7f\x05\xaf\xae\x83\xa0\x23\xce\x59\xc1\xd4\xfe\x48\x95\xe6\xa6\x92\x30\x1a\xbd\xa8\xad\xd2\xd8\x71\x90\x92\x87\x64\x9d\x95\xf0\x7f\x1a\xe2\xa6\xc1\x81\x7c\x2b\xe5\xeb\xcf\xfe\x51\x1f\xef\x17\xf4\xf7\x57\x46\xe3\xae\x5b\x30\x9c\xef\x9e\xa0\x2f\xc0\xb4\x6e\xd8\x7e\x70\xbf\xc7\x07\xdf\x7f\x73\x10\xce\x13\x41\x19\xba\x97\x73\x1a\xa0\xaa\xa4\x53\xa3\x3a\x40\xab\x70\xe7\x7a\xbe\x26\xf0\x61\xb4\xfc\xfe\xd9\x57\xc5\xe2\x29\x29\x36\xf0\x48\x36\x63\xef\xce\x34\x70\x61\x12\x47\x93\x79\xa0\xdf\x22\x4f\xc9\xf3\x05\xfd\xa8\xcf\x52\x25\xde\x61\x99\x5f\x14\xd4\x23\xe7\xbe\x50\xf0\xd4\xb4\xfa\x34\x4b\x8b\xe5\x6a\xd0\x86\xb9\x67\x7f\xfb\x19\xdc\xf5\xcf\x00\x00\x00\xff\xff\xc8\xa3\x81\x80\x41\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 833, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_account_statistics_updated_at_timezoneSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xe2\xe5\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x2e\x49\x2c\xc9\x2c\x2e\xc9\x4c\x2e\x56\x80\x48\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x94\x16\xa4\x00\x75\xa6\xc4\x27\x96\x28\x84\x44\x06\xb8\x2a\x94\x64\xe6\xa6\x02\x15\xe7\x16\x28\x94\x67\x96\x64\x80\xb9\x0a\x55\xf9\x79\xa9\xd6\x20\x93\x91\xed\x72\xc9\x2f\xcf\xa3\xb2\x6d\xf9\xa5\x25\x28\x16\x02\x02\x00\x00\xff\xff\x0d\x5f\xe8\x82\xdb\x00\x00\x00")

func migrations4_account_statistics_updated_at_timezoneSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_account_statistics_updated_at_timezoneSql,
		"migrations/4_account_statistics_updated_at_timezone.sql",
	)
}

func migrations4_account_statistics_updated_at_timezoneSql() (*asset, error) {
	bytes, err := migrations4_account_statistics_updated_at_timezoneSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_account_statistics_updated_at_timezone.sql", size: 219, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_account_statistics_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\x4f\x4b\xc4\x30\x10\x47\xef\x85\x7e\x87\x39\x2a\xee\x82\xf7\x3d\x45\x13\x61\x31\x9b\x2e\x31\x39\xf4\x14\x42\x1a\x24\xd8\x3f\x21\x33\x22\xfd\xf6\xda\xe2\x41\xa8\xd0\x8b\x78\x9e\xe1\xf1\xde\xef\x78\x84\xbb\x21\xbd\x16\x4f\x11\x6c\xae\xab\xba\x62\xd2\x08\x0d\x86\x3d\x48\x01\x3e\x84\xe9\x7d\x24\x87\xe4\x29\x21\xa5\x80\xc0\x38\x87\xc7\x46\xda\x8b\x02\x58\x8f\xb1\x64\x5f\x68\x76\x34\xe7\x08\x38\xf8\xbe\x4f\x23\x81\x6a\x0c\x28\x2b\x25\x70\xf1\xc4\xac\x34\x70\x7f\xda\x45\x73\xdd\x5c\xbf\xd8\xea\xc5\x68\x76\x56\xe6\x97\x17\x97\xdf\xe2\xbc\x0f\x5a\x1c\xaf\xfa\x7c\x61\xba\x85\x67\xd1\xde\xf8\xae\x2b\x11\xf1\x00\x1e\x31\x92\x0b\x53\x17\x0f\x5b\xf9\xdb\xd3\x92\x5f\x57\x3f\x27\xe1\xd3\xc7\xf8\x7f\xde\xdf\xa0\x75\xdc\x8d\xde\x9f\x64\x2f\x8d\x9f\x01\x00\x00\xff\xff\x13\x75\x4c\x7a\xf3\x01\x00\x00")

func migrations5_account_statistics_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_account_statistics_account_typeSql,
		"migrations/5_account_statistics_account_type.sql",
	)
}

func migrations5_account_statistics_account_typeSql() (*asset, error) {
	bytes, err := migrations5_account_statistics_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_account_statistics_account_type.sql", size: 499, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_account_traitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xb1\x4e\xc3\x30\x10\x86\xf7\x48\x79\x87\xdb\x9a\x08\xba\x21\x96\x4e\xa1\x75\xa5\x8a\xd0\x56\x6e\x3a\x74\x8a\x2e\x8e\x49\x0f\x12\xbb\x72\x2e\x94\xf2\xf4\x18\x68\xd4\x54\xb0\xe0\xc9\xfe\x7d\x9f\xec\xef\x6e\x3c\x86\x9b\x86\x2a\x87\xac\x61\x7b\x08\x83\x30\x98\x4a\x91\x64\x02\xb2\xe4\x21\x15\x80\x4a\xd9\xce\x70\xce\x0e\x89\x5b\x88\xc2\x00\xfc\xa2\x12\x0a\xaa\xc8\x30\xac\xe5\xe2\x29\x91\x3b\x78\x14\x3b\x90\x62\x2e\xa4\x58\x4e\xc5\x06\xf6\xd4\xb2\x75\xa7\xfc\x8c\xb7\x11\x95\xf1\xed\x0f\x5b\xd4\x56\xbd\xe6\x64\x94\x6d\xc8\x54\xf9\x01\x4f\x8d\xf6\x15\x50\x58\x5b\x6b\x34\xb0\x5c\x65\xb0\xdc\xa6\x29\xcc\xc4\x3c\xd9\xa6\x19\xcc\x93\x74\x23\xae\x60\xdb\xf1\xff\xe8\x30\x88\x27\xbf\xd5\xba\x92\x38\xaf\x6d\x35\xb0\xda\x08\xb9\x48\xd2\xa1\xd5\xf9\x61\x54\xde\x07\xd4\x1e\x9d\xdf\x69\x07\x6f\xe8\x4e\xfe\x03\xd1\xfd\x5d\xef\xd5\x76\xc5\x8b\x56\x0c\xac\xdf\xf9\x02\x91\x35\xc3\xa4\xd1\x8c\xc3\xb3\x72\xda\x37\xbe\xcc\xd1\x73\xd4\xe8\x96\xb1\x39\xc0\x91\x78\xef\x15\xbf\x13\xf8\xb0\x46\x5f\xac\x4a\xfd\x8c\x5d\xcd\x10\x19\x7b\x8c\x62\xc0\x61\xd1\xc8\x77\x65\x14\xf7\xaa\xc3\xb9\xce\xec\xd1\x7c\x65\x33\xb9\x5a\xff\x39\xd7\xc9\xf5\x5d\xdf\x18\x1f\x7f\x06\x00\x00\xff\xff\x44\xae\xa3\x07\x1f\x02\x00\x00")

func migrations6_account_traitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_account_traitsSql,
		"migrations/6_account_traits.sql",
	)
}

func migrations6_account_traitsSql() (*asset, error) {
	bytes, err := migrations6_account_traitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_account_traits.sql", size: 543, mode: os.FileMode(438), modTime: time.Unix(1466782995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\x41\x4b\xc3\x30\x14\x07\xf0\x73\x03\xf9\x0e\xef\xd8\xe2\x06\x2a\xe2\xc5\x53\xb5\x11\xc4\xba\x8d\xd2\x1e\x76\x2a\xcf\x34\x74\x0f\xd6\x64\x24\x6f\xd3\x7d\x7b\x5b\x2c\x92\x83\xba\x1c\xc3\xff\x97\xbc\xf7\x5f\x2e\xe1\x6a\xa0\xde\x23\x1b\x68\x0e\x52\x48\xf1\x54\xa9\xbc\x56\x50\xe7\x8f\xa5\x02\xd4\xda\x1d\x2d\xb7\x7b\x1a\x88\x03\xa4\x52\x24\xd8\x75\xde\x84\x00\xf1\xd1\x3b\xf4\xa8\xd9\x78\x38\xa1\x3f\x93\xed\xd3\xfb\xbb\x0c\x56\xeb\x1a\x56\x4d\x59\x2e\xa4\x98\x42\x18\x82\xe1\x56\xbb\xce\xfc\x07\x6f\x6e\x23\x38\x26\xbe\xed\x80\x9f\xad\x3b\x98\x71\x4c\x72\x16\x92\xe4\x9d\x7a\xb2\xfc\x13\x84\x42\x3d\xe7\x4d\x59\xc3\xf5\xfc\x57\x87\xb4\x3f\xb7\x7c\xf4\xd6\x9d\xc6\xc7\x2f\x83\xc1\x59\xde\x45\x64\x06\xc9\x9f\x60\x53\xbd\xbc\xe5\xd5\x16\x5e\xd5\x36\x9d\x2b\x59\x44\x2b\x66\x52\x64\x0f\x53\x9d\x71\xc1\x85\xfb\xb0\xd3\x5d\x51\xad\x37\xbf\x16\x3c\x8a\xaf\x00\x00\x00\xff\xff\x46\xb7\x65\xca\x91\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 401, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x3d\x6f\xc3\x20\x10\x86\x77\x4b\xfe\x0f\xb7\x37\x1e\x3a\x67\xa2\x85\x4e\x04\x2a\x0b\x66\x44\x53\x2b\x3d\x29\x40\xe4\xe2\x7e\xfc\xfb\xc6\x6d\xa3\x60\xdc\x8f\xe0\xf5\x85\xf7\x81\xbb\xa7\x69\xe0\xca\xe1\xae\xb7\xb1\x03\x7d\xa8\xab\xba\x22\x5c\xb1\x16\x14\xb9\xe1\x0c\xec\x76\x1b\x06\x1f\xcd\x1e\x1d\xc6\x67\x68\x99\x20\x1b\x06\xb7\x92\xeb\x8d\x00\x67\xdf\x4c\x38\x74\xc7\x2a\x06\x0f\x4a\x4e\x03\x13\x86\xb8\x2e\xa0\x3d\x5a\xdc\xbf\x9b\x38\xf4\x3e\xbc\x74\xfd\x88\xfb\x4a\x3e\xa1\x65\x28\x17\x7c\x7c\xca\x60\xa7\xec\x12\x5c\x5d\x01\x10\x4a\x7f\x9c\xd3\xa0\x87\x07\xdc\xa1\x8f\x20\xa4\x02\xa1\x39\x07\xca\xee\x88\xe6\x0a\x9a\xeb\x55\x56\x3d\x8f\x50\x54\x4b\x3f\xfb\x67\x71\x3d\x0a\x4b\x15\xd2\xf0\xea\x97\x4b\x1c\x37\x33\x13\x59\x2e\xf1\x7b\xc7\x67\x87\x27\x11\x4b\x24\x26\xb0\xdc\xeb\xbf\x12\x69\x2b\xef\x7f\xb3\xb8\xca\x2f\xa4\xae\x66\x87\x53\x23\xc7\x87\x3f\x02\x00\x00\xff\xff\xef\x83\x3f\x08\x38\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 824, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/4_account_statistics_updated_at_timezone.sql": migrations4_account_statistics_updated_at_timezoneSql,
	"migrations/5_account_statistics_account_type.sql": migrations5_account_statistics_account_typeSql,
	"migrations/6_account_traits.sql": migrations6_account_traitsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"4_account_statistics_updated_at_timezone.sql": &bintree{migrations4_account_statistics_updated_at_timezoneSql, map[string]*bintree{}},
		"5_account_statistics_account_type.sql": &bintree{migrations5_account_statistics_account_typeSql, map[string]*bintree{}},
		"6_account_traits.sql": &bintree{migrations6_account_traitsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

