// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7b\x6f\xe3\x36\x12\xff\x3f\x40\xbe\x03\xd1\x7f\xec\xe0\x9c\x85\x9d\xf7\x03\x2d\xe0\x26\x4a\xd7\xa8\xd7\x69\x63\xe7\xb6\x8b\xc3\x81\xa0\x25\xc6\x51\x57\x16\x55\x49\xce\xa3\x87\xfb\xee\x37\x7a\xbf\x48\x91\x72\x24\x5f\x51\x60\x61\x69\x38\x33\xbf\x99\xe1\xcc\x70\xc4\xdd\xc3\xc3\xfd\xbd\xc3\x43\xf4\x1b\xf3\xfc\x95\x4b\xe7\xbf\x4f\x91\x41\x7c\xb2\x24\x1e\x45\xc6\x66\xed\x04\x2f\xf7\xf7\xf6\xf7\xe6\xda\x02\x79\x3e\xf1\xe9\x9a\xda\x3e\xf6\xcd\x35\x65\x1b\x1f\xfd\x88\x86\xd7\xd1\x3b\x8b\xe9\xdf\x39\x8f\x75\xcb\x0c\xe8\xa9\xad\x33\xc3\xb4\x57\xf0\xa6\xf7\xb8\xb8\xbb\xe8\x5d\xa7\x1c\x6d\x83\xb8\x06\xd6\x99\xfd\xc4\xdc\x35\x90\x60\xcf\x77\xe1\x0f\x0f\x48\x99\x9d\x70\x79\xa6\xc0\xfd\x69\x63\xeb\xbe\xc9\x6c\xbc\x04\x5e\x34\x20\x78\x22\x96\x47\x8b\x92\x80\x05\x5e\x53\xcf\x23\xab\x90\xe2\x95\xb8\x36\x70\xbb\x4e\x21\x50\xe2\xea\xcf\xd8\x21\xfe\x33\xbc\x75\x36\x4b\xcb\xd4\x07\xc8\x59\x61\x1d\x40\x5b\x2c\x23\x34\xe8\x13\xd9\x58\x80\x94\x2c\x2d\xea\x39\x44\xa7\x81\xee\xbd\xca\xfb\x57\xd3\x7f\xc6\xcc\x34\xf2\xea\x44\x36\x03\xa3\xce\xc8\x9a\x5e\x21\xa2\xeb\x6c\x03\xaa\x59\xe6\xda\xf4\xbd\x6b\xb4\x78\x77\xe0\xe9\x62\xfc\xf3\x54\xbb\x46\x73\xc0\xb6\x26\x57\xb1\x2a\xd7\xe8\xfe\xd5\xa6\xee\x15\x3a\x04\xb2\x54\xf2\x15\x4a\xbc\x70\xf3\xa0\x8d\x17\x5a\xb4\xb6\xc4\x17\xf5\xf7\xf7\x10\xfc\x47\x0c\xc3\x05\xfc\x60\x33\xe2\x12\xdd\xa7\x2e\x7a\x21\xee\x3b\xd8\xa0\x7f\x76\x72\x80\x66\xf7\x0b\x34\x7b\x9c\x4e\x07\x31\xb1\xe7\x51\x1f\x8c\x6f\x50\x0e\xfd\xe8\xa8\x42\xbf\x26\x6f\x98\x39\xd4\x25\xa1\x1f\x02\x57\x2f\xcd\x95\x69\xfb\xe8\x56\xbb\x1b\x3f\x4e\x17\x68\x58\x5e\x61\x10\xd3\x7a\xc7\xe1\x3a\x05\xea\x35\xb3\xfd\xe7\x26\xf4\x05\x7d\x4c\xbb\xbc\xa0\x7f\x38\xaa\x60\xc8\x34\x52\xa3\xcf\xeb\x24\x59\xb1\xbf\x77\x10\xba\x5f\x10\x00\xc1\xfe\x31\x3d\xdf\xd4\x3b\x08\x82\x8c\xf7\x4e\x02\x21\x32\xa2\x09\xdb\x7a\x4d\x15\x63\x00\xfc\xa9\x44\xfd\x4a\xe9\x77\x75\xde\x31\xb5\x2a\xf3\xc4\x99\x8a\xdc\x13\x72\x55\xf6\xc4\xb6\x37\xc4\x52\xe5\x1e\x53\xab\x32\xdf\x38\x90\x99\xa9\x81\x89\x8f\x82\x44\x0b\x1e\x5f\x3b\x28\xc8\x3f\xe1\x4f\xf4\x37\xb3\x69\x79\x49\x18\x1b\xd4\x75\x88\xeb\xbf\x63\x1f\x42\x0e\x79\x6b\x62\x59\x7c\x31\x92\xe8\xf5\x5d\xd2\x49\xfa\x8a\xf8\x26\x51\x6b\x1a\x89\x1d\x4a\x50\x96\x61\x85\x09\x2d\x1b\x54\x09\x87\xbc\x07\x95\xc8\x43\x4b\xc6\x2c\x4a\xec\x14\x4f\x98\x84\xf9\x8b\x23\x43\x37\x58\x2d\xb2\xc8\xc6\x30\x21\xed\x42\xb5\x68\xcf\x18\x09\xcb\x9c\x1d\xc0\x08\x74\x05\xdb\xb0\x1c\x35\xba\xcf\x5c\xfe\xae\x8e\x29\xbc\xcd\xf2\x4f\xaa\x43\x94\xd0\x37\x3f\x5b\x04\x19\x32\xff\x64\x4d\x7d\x92\xff\xad\xbb\x94\x1f\x5d\x41\x1e\xce\x02\x2c\x31\x54\xf0\x24\x78\xd0\xef\x81\x51\x7b\x57\x57\x21\x27\x64\xb3\xd7\xfe\x81\x3c\x1f\x26\x60\xb1\x69\x60\x8f\xfe\x95\x98\x71\xae\xfd\xfe\xa8\xcd\x6e\x6a\x2c\x59\xb2\x5d\xb2\xa0\xc2\x31\x82\x34\x5f\x8c\x1f\x16\xe8\xeb\x64\xf1\x19\x8d\xa2\x27\x93\x19\xac\xfc\xa2\xcd\x16\xe8\xe7\x6f\xc9\xb3\xd9\x3d\xfa\x32\x99\xfd\x73\x3c\x7d\xd4\xb2\x07\xe3\x3f\x72\x0f\x6e\xc6\x37\x9f\x35\x34\xda\x06\x0a\xba\xff\x3a\xd3\x6e\x41\x9a\x1c\xd3\x78\xba\xd0\x1e\xc4\x90\x52\x4e\xd9\x9b\x4f\xa6\xc1\xd3\x69\xc5\x5c\x07\xfa\xa0\x55\x54\x15\x5b\xdc\xb1\x25\xc6\xb9\x50\x0d\xbc\x5f\x89\x53\xc7\x81\x96\xac\x36\x5d\x09\xe2\xe3\x19\x0a\x19\x73\xdf\x71\x9c\x21\x5a\x44\x50\xe6\x2c\xcd\x3a\xb5\x45\x54\xa2\x3e\x7d\x7a\x82\x5d\xd8\x81\xf6\x31\xe3\x44\xf9\x12\x28\x2c\x04\x93\x10\xe6\x3a\x26\x11\xe9\x0f\xcc\x35\xa8\xfb\x83\x28\x07\x85\xa5\x44\xf0\xce\x80\xc4\x62\x5a\x1e\xfa\xd3\x63\xf6\x52\x62\x22\x8b\x1a\xc0\xa1\x03\x13\xc5\x8c\x13\x13\xc1\xfe\xd9\xc0\x19\x44\xa8\x73\x44\x8e\x9f\x89\xf7\xac\xd6\x2f\x39\x2e\x7d\x31\xd9\xc6\xc3\xd2\x95\x89\xc5\x5c\x62\x7b\x51\x16\xc6\xa1\x9b\x52\x55\x84\xf5\x3e\x73\x93\xe2\x02\xdd\x62\x9e\x3c\x83\x97\x17\x29\xe5\x7d\x59\x0b\xc2\x23\x4e\x83\x2b\xf9\xbd\x76\x98\x0b\xd6\xc1\x2f\xe0\x99\xa0\x1a\x95\x01\x8d\x2a\x61\xc6\xe0\x50\x06\xe8\x4d\x48\x36\xfc\x38\x7d\xa2\x14\x3b\x50\xc3\x45\x4d\x03\x1c\x63\x31\xd0\x88\xfc\x1e\xbe\x87\x0d\x4e\xdd\x17\x21\x4d\xd0\xf7\xfb\x6f\x38\xe8\x8f\x3d\xf3\xef\x2a\x99\x24\xc4\x33\x2f\x06\x5d\x98\xa9\x9b\x0e\xe9\x24\xa5\xf1\xe5\xc8\xdb\x89\x06\x49\x41\x9e\x68\xb6\xb2\x45\x6b\x5d\x80\x92\x98\x9d\xb5\x06\x5b\x81\xde\xbe\x5f\x50\x12\x97\x35\x11\xf5\xe4\x82\xce\xa2\xb2\xa8\xcb\x38\x96\x17\xe7\x7c\x4e\x15\x57\xf0\xa0\x0d\xd1\xe3\x81\x45\x50\xd4\x3e\x5c\xd3\x92\x2e\x9b\x6d\x5c\x9d\x26\x9b\x41\x50\x36\x92\xd4\xd6\x83\x16\xb9\x42\xa1\xba\x6d\xf2\x38\xbb\x4d\x22\x22\x49\xea\x69\x44\xc9\x27\x1f\x4e\x24\x22\x3d\x5b\x4f\x25\x12\x41\x3b\x4f\x26\x0d\x81\x7f\x3c\x9d\x48\x04\x56\x13\x8a\x68\x81\x24\xa5\xe4\x96\x75\x1b\xd7\x69\x2c\xe7\x15\x55\x6f\xfc\xe2\x7e\x4f\xd6\x50\x2a\x67\x9d\xfa\xf4\xc1\x27\xce\xa4\xd7\x34\x45\x44\xbc\x57\x45\x8d\xe5\xff\xad\x33\x84\xf6\x8a\xda\x2f\xd4\x02\xc5\xb8\x47\x49\x78\x0f\x4d\xda\xc6\xf2\x45\x6f\xd3\x61\x06\xe7\x5d\x60\x0d\xe1\x7b\xcf\x5c\xd9\xc4\xdf\x00\x77\x8e\x07\x2e\xcf\x0e\xfe\xf5\xef\x2c\x85\xff\xe7\xbf\xbc\x24\x0e\x14\xe5\x86\x91\xae\x59\x34\x6c\xab\x66\xfc\x94\x99\x0d\xd6\xa8\xad\x09\x39\x66\x55\x3e\x09\x3a\xb0\x2b\x5e\x82\x0f\x0d\x2f\x70\xe2\x05\x44\xf4\x4a\x74\xa8\x86\xed\x17\x6f\xab\x58\x07\xd5\x94\x10\xed\xa4\xfb\xd9\x34\x37\x79\x40\xd1\xab\x9b\xfb\xe9\xe3\x97\x59\xe0\xce\xe0\x93\x48\x82\xcd\x06\x3b\xbf\x10\xab\xdf\x2b\x8f\x30\x00\xaf\x4b\x57\xba\x45\x3c\xaf\x33\x15\x25\xed\xb0\x92\xde\x4a\xad\xd4\x2e\xc1\x08\xcb\x72\x23\x38\x92\x54\x2e\x06\x74\x4b\x60\xf7\x3c\x31\x57\xfe\x3d\x0b\xdd\x8e\x17\x63\x39\x50\x39\x6f\xc1\xa7\x92\xd6\xf8\x73\x86\xd9\x1f\xe7\xcd\x1d\x0b\x37\x67\xab\x38\x59\x04\x5f\xcb\xd9\xce\xb5\xa9\x76\xb3\xc8\x7d\xe0\xfc\x04\xe7\x58\xfe\xe6\x1c\xa0\xd1\x20\x9a\x7f\xd7\xbb\xbf\x6e\xbc\xa8\x08\x76\x32\x9b\x6b\xd0\x31\x4d\x66\x8b\xfb\xca\x50\x31\xec\x87\xe6\xa8\xdf\x1b\x61\xd3\x36\x7d\x93\x58\xd8\x0b\xd9\x7d\xf2\xfe\xb2\x40\xc9\xde\xd1\x70\x74\x76\x38\x0c\xfe\x47\xa3\xa3\xab\xd3\xf3\xab\x93\xe1\xa7\xf3\xe1\xd9\xf0\xe2\xe8\x1f\xc3\xe3\x5e\xa0\xbb\x12\xfb\x23\x60\x6f\xd0\xb7\xe2\x4e\x58\xc2\x2e\x61\xa6\x51\x2b\x6a\x74\x71\x39\x3c\x6e\x24\xea\x18\x93\xd5\x0a\xf6\x16\x14\x48\x4c\xdf\x1c\x6a\x7b\xd4\xc3\x60\xd0\x74\x0c\x59\x2b\xef\xe8\xf8\xec\xf8\xbc\x91\xbc\x13\x5c\xdd\x46\x38\x2b\xd0\x38\x99\xdd\xd7\x8a\x3d\x3e\x1d\x8e\x2e\x1a\x89\x3d\xe5\x89\x4d\x37\x1c\x04\x49\xad\xbc\x93\xe1\xe5\xf0\xb2\x91\xbc\x33\x5c\xdc\xcd\xb5\xec\x4f\x4f\x47\xe7\xcd\xe0\x9c\xe3\x62\xa2\xab\x67\x7f\x79\x72\xdc\x2c\x28\x2e\x4a\xec\xb1\xff\xca\xf0\x2b\x79\xaf\x15\x73\x76\x34\x3a\x4f\x8d\x24\xde\xa2\xb5\x03\xf4\x0f\xe7\xb9\xba\xf9\x76\x6b\xcc\x79\x93\xe1\xd6\x98\x2b\xcc\xe4\xb6\x4d\xdb\xdb\x4d\x7d\x3e\x98\xcb\xd5\x1a\x16\xd5\x04\x2f\x99\xf2\xb4\xe6\x05\xa5\xb1\xc6\x47\xfd\xd0\xf4\xc0\xdc\x92\x27\x64\xbd\x56\x53\x5f\x08\x8f\xc7\x5b\xb7\x17\xc5\xe4\xe3\x7c\xa7\xef\x09\xdf\x9b\xfb\xd9\x7c\xf1\x30\x86\xf4\xd5\xf4\xec\x5d\x3d\x30\x14\xa4\x44\x87\x96\xf1\xed\x6d\x4e\x04\x4f\x11\xf4\xdb\xc3\xe4\xcb\xf8\xe1\x1b\xfa\x55\xfb\x86\xfa\xf1\x27\xb8\x41\xee\x8e\x8a\xe2\x2d\x9b\xae\x51\x65\x92\x6a\x91\x95\x14\x92\xa2\x1b\x54\xaf\x6d\x28\x5c\xcc\xe8\x1a\x6c\x24\xa5\x16\x68\x4e\x91\x22\x48\xd3\x90\xdc\x03\xe8\x4a\xf7\x44\x00\x5f\xed\x82\x78\x25\x8d\x4b\xd5\xbc\x2b\xbd\x4b\x62\xb8\xda\xf3\x54\x51\xc2\x20\x29\x16\x1d\x41\xaa\x97\xca\x45\xa8\xa0\x68\x23\xc0\xc2\x9c\xdc\x31\x64\x91\xdc\x5a\xd0\xb5\xca\xaa\xed\x2e\x4e\x33\x1e\x25\x1b\x28\x42\x6f\x09\xde\xc9\xec\x56\xfb\x63\xcb\x19\x6b\xb8\x56\x22\x07\x4c\xc1\xbb\xa3\xf8\x38\x9f\xcc\x7e\x41\x4b\xdf\xa5\x34\xcd\x81\x5c\x14\xcb\xb4\x8b\x6d\x4f\xe3\x8c\x67\xa0\x1d\x77\x46\x5c\xd4\x2f\x22\x1e\x54\xe6\xaf\x22\x8d\x83\x71\x72\xab\xea\x86\xf3\x69\x25\x5d\xcb\x53\x6d\x91\x8a\x51\x7f\xdd\xaa\x92\x11\x4b\x35\x35\x4b\x63\xf4\x41\x75\x60\x2e\xdc\xca\x98\x06\xc7\xf4\x90\xa6\x0d\xf5\x1f\x67\x13\x68\xfd\x62\x14\x25\xfe\x79\x2c\xc9\xa5\x9b\x02\x0c\xde\xc7\xf3\x41\x72\x79\xa6\x0e\x41\x36\x1d\x6c\x5b\x77\xd3\x50\xd6\x3a\xfb\xfc\x36\xe0\x5e\x03\x50\x40\xc2\x1c\xec\x74\x06\x26\x66\x9e\xc7\x23\x18\xeb\x6e\x05\x4f\x8c\xca\x7f\xeb\x10\x55\xcc\x5c\xb0\x4f\xb6\xc4\x55\xfc\xec\xca\x47\x06\xe6\x0c\x52\x09\x6b\x07\x58\x8c\x28\x63\xba\xad\x9b\xe4\x2e\x49\x6f\x59\x81\xa4\x2e\xbc\x52\xe4\x9f\xc7\x91\x5c\x23\x2b\x28\x2e\x56\x33\xef\x85\xce\x74\xad\x08\x51\xcb\xb8\x22\xad\xfd\xc8\x81\x7e\xab\x51\x91\x31\xdd\x3e\xcc\x15\x42\x3a\x9a\xe0\x96\xa7\x5d\x18\x16\xc4\x2d\x45\xeb\xf6\x97\x4a\xcc\xe3\x4d\x6f\x99\x2a\x77\x3b\x62\xf6\x1d\xc4\x52\x9d\x30\x39\x0c\x25\x97\xc4\xe5\x27\xe0\x19\x1c\x63\xdb\x8b\xb0\x5a\x31\xd2\x02\x28\x3c\x52\x17\xd9\xc6\xbb\x3f\x60\x9b\x5e\xad\xec\x0a\x02\x4f\x96\x34\x13\xa5\x94\xcd\xc0\x74\x1e\x4b\x05\x59\xdb\xe6\x53\x31\xcb\xd2\x3d\xd2\x1d\xb8\xa4\x72\x75\x55\x8a\xa9\xb4\xa0\x19\xc2\xdc\xa5\xe2\xdd\x79\x2a\x7f\x93\x59\x06\x2f\x47\xdb\x0c\x19\xef\xde\xf4\xee\x20\x72\x6f\x6d\xcb\xb0\xf2\x16\x35\x03\x9d\x9c\x72\x76\x07\x34\xbd\x20\x24\x03\x57\x7b\x92\x2d\xb2\xcf\x3e\x07\xec\x24\x87\x94\xc5\x71\xdb\xcb\x6d\x32\x49\x91\x71\xb1\xcb\xe8\x2a\x95\xd4\xc9\x54\x01\xd6\xb8\x17\x2a\x09\xec\xb0\xf6\x56\x25\x29\x01\x52\xab\xc0\xf9\x76\x76\x27\x51\x57\x15\xf8\xa1\xee\x1a\x16\x18\x34\x6d\x4f\x92\xb1\x02\x5e\x32\xf6\xbd\x3d\x7f\xd4\x08\x91\x76\x42\xfd\x7e\x72\xb5\xf9\xf0\xa7\x9f\x50\xcf\x63\x16\xb4\x13\xe1\x97\x88\xc0\x43\xf1\xdf\xeb\x3b\x38\x18\x20\x31\x61\xf0\xc9\x42\x89\xd0\xf4\xbc\x0d\x75\xc5\xa4\x4b\xb6\x59\x3d\xfb\x4a\xe2\x0b\xa4\xf5\x0a\x14\x48\x4b\x2a\x1c\xa0\xaf\x9f\xb5\x07\x2d\x0a\x47\xf4\x23\x3a\x3e\x56\xf9\xd0\x62\x1a\xf8\x29\x37\x31\xbe\xfb\x55\x69\x68\xdc\xe2\x07\x96\x58\x01\x74\x77\xff\xa0\x4d\x7e\x99\xa5\x53\x60\xf4\xa0\xdd\x01\x9c\xd9\x8d\x36\xaf\x34\xef\xd5\x08\x15\xfd\x8b\x0f\x48\x67\x6b\xc7\xa2\x3e\x4d\x34\xfe\x5f\x00\x00\x00\xff\xff\x84\x39\xe5\x43\x22\x42\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16930, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\xb6\x13\x7f\x1f\x20\xdf\x81\xe8\x1b\x3b\xf8\x3b\xff\xb5\xe8\x50\x74\x09\x5a\xc0\x4d\x94\xd5\x98\x23\xb7\xb1\xbc\xb6\x18\x06\x81\x96\x68\x5b\x8b\x24\xaa\x22\x95\x87\x0e\xfb\xee\x3b\x4a\xa2\xac\x27\x4a\xb2\x63\x65\x03\x86\x2d\xd2\xf1\xee\x7e\x77\xc7\xdf\x1d\x29\x9f\x9e\xa2\xff\x79\xce\x3a\xc4\x9c\xa0\x45\x70\x7c\x74\x7a\x2a\xfe\x45\x9f\x28\xe3\xeb\x90\xcc\x3f\x4f\x91\x8d\x39\x5e\x62\x46\x90\x1d\x79\xa9\xc0\xf1\xd1\x5c\x33\x10\xe3\xb0\xc8\x23\x3e\x37\xb9\xe3\x11\x1a\x71\xf4\x0e\xbd\x3c\x4f\xde\xb9\xd4\xba\xad\x79\x6c\xb9\x8e\x90\x27\xbe\x45\x6d\xc7\x5f\xc3\x9b\xc1\xc2\xb8\x7a\x3b\x38\xcf\x34\xfa\x36\x0e\x6d\xd3\xa2\xfe\x8a\x86\x1e\x88\x98\x8c\x87\xf0\x1f\x06\xa2\xd4\x97\x5a\x36\x04\xb4\xaf\x22\xdf\xe2\x0e\xf5\xcd\x25\xe8\x22\x42\x60\x85\x5d\x46\x8a\x96\x40\x85\xe9\x11\xc6\xf0\x3a\x96\xb8\xc7\xa1\x0f\xda\xce\x05\x84\x14\xa9\x8e\x3d\x72\x86\x02\x37\x58\xb3\xef\xee\x39\x32\x1e\x03\xf8\x53\xfb\x6a\x68\xfa\x7c\x32\xd3\xcf\xd1\x1c\xac\x79\xf8\x0c\x9d\x9e\xa3\xd9\xbd\x4f\x42\xf8\x3f\x19\x84\x8b\x1b\x6d\x6c\x68\x5b\x61\x34\xb9\x42\xfa\xcc\x80\x07\x93\xb9\x31\x97\x3a\xd1\x97\x89\xf1\x11\xcd\x2f\x3e\x6a\xd7\x63\x14\xac\x4d\x0b\xe2\xe9\xd2\xc4\x87\x92\x17\x5b\x4d\x25\x7f\x2e\x66\xd7\xd7\x9a\x6e\x34\x7b\x93\xc8\x20\x58\x5d\xd1\x83\x26\x73\x34\xf8\x34\xfd\x29\x58\x8b\x8c\x06\x21\xb5\x88\x1d\x85\xd8\x45\x2e\xf6\xd7\x11\x04\x67\x50\xe7\xce\x86\x71\x1a\x92\x83\xc6\x24\x51\x59\x0c\x49\xb4\x74\x1d\xab\x39\x1c\x45\x4f\xf6\x8e\x46\x6a\x5d\x04\x43\x54\x35\xe2\xa0\x0e\x41\xa1\x21\xf1\x5c\xd4\x23\x23\x9c\x21\xba\x42\xc3\x5b\xf2\x38\x42\x77\xd8\x8d\xc8\x09\x0a\xb0\x13\x32\x19\xa0\xb8\x4c\x09\x0e\xad\x8d\x19\x60\xbe\x81\x9a\x4a\xfc\x1f\x95\x53\x2b\x04\x6d\xb2\xc2\x91\x0b\xfb\x03\x2f\x5d\xc2\x02\x6c\x11\x51\xf1\x83\xca\xfb\x7b\x87\x6f\x4c\xea\xd8\xf9\x22\x2e\xe7\xc2\x11\x3e\x3e\x9a\xd8\xb2\x68\xe4\x73\x26\x63\x61\x8c\x3f\x4c\xb5\x6d\x24\xd2\x60\x66\xe1\x00\xb1\xcc\xf6\x59\x29\x47\xf1\xd2\x8a\x62\x34\x3c\x3e\x42\xf0\x8f\x63\xa3\xa5\xb3\x76\x7c\x1e\xa7\x4f\x5f\x4c\xa7\xa3\xe4\x05\xb6\xed\x10\x76\x14\xec\x42\x1c\x62\x8b\x93\x10\xe2\x14\x3e\x42\xf4\x86\x6f\x7e\x3e\x91\x32\x89\x32\x33\x0e\x30\xe8\x20\x6b\x10\x2b\xe9\x59\xc6\x1c\xe1\x00\x15\xc4\xfb\x3c\xc0\x8f\x82\x4b\x18\x5a\x52\xea\x12\xec\x67\xe2\xe8\x52\xbb\x1a\x2f\xa6\x06\xba\x1a\x4f\xe7\x5a\x61\x31\x90\xcb\x5e\xab\x5d\xc7\x73\x38\xb1\x4d\xcc\xe2\x84\xff\xc5\xa8\xbf\x3c\x3e\x3a\xa9\xdd\x03\x69\x78\xc8\x6a\x45\xac\x1e\xc2\x9e\xea\x95\x51\x2f\x65\xc3\x54\x66\x41\x0a\xd2\x80\x00\x77\x0b\x1a\x54\x8a\xbe\xa0\xa1\x4d\xc2\x17\xaa\x3c\x34\xe5\xc8\x26\x1c\x3b\x6e\xb7\x08\xb9\xc4\x06\x0d\x87\x8f\x50\xaa\x57\x46\x88\x91\xef\x11\xf4\x0f\xa5\xcb\x89\xb8\xb9\xc1\x6c\x53\x5f\xa2\xe5\x05\x41\x48\xee\x1c\x1a\x31\xb3\x75\xa5\x0c\x58\x88\x7d\x86\x93\xde\x13\x67\x29\x73\x45\xd6\xda\xcb\xb2\x8d\x6d\x96\x3a\x2e\xb0\x5c\xca\x44\x81\x72\x24\x9a\x28\xf4\x45\x2f\x40\x82\x25\x44\x3b\x15\x4f\xd0\x0f\xea\x93\xca\xa2\x90\x60\xde\xba\x2a\x15\x8e\x02\xbb\xbb\x70\x56\x5b\xf2\x6f\x2f\xa0\x21\x44\xc7\xbc\x83\xcc\x00\xac\x0a\xa0\x57\x95\x2a\xa3\x40\x8d\x80\xde\xf1\x99\xa2\x4c\x57\x84\x98\x01\xec\x5e\xc5\x6b\x31\x82\x98\x20\xa3\xa4\x13\xf1\x1e\x88\x89\x84\x77\x4a\x19\x0f\x3f\x98\xfc\xc1\x84\x4d\x6f\x32\xe7\x47\x55\xac\xa5\xc2\xb7\x59\x0c\x70\xc8\x1d\xcb\x09\x70\x1f\x4c\x5c\x6f\x26\xc7\xcb\x0a\x74\x3b\x50\x42\x3b\xcd\xec\x15\x0a\xd0\x03\xc1\xfd\x2e\x23\x32\xd7\x3e\x2f\x34\xfd\xa2\x21\x28\xa5\x38\xc8\x05\xdd\xcc\x24\x50\xe6\xc6\xf8\xc6\x48\x06\x8a\x57\xc9\x93\x89\x0e\xea\xe2\xe6\xff\xe1\x9b\x7c\xa6\xcf\xd0\xf5\x44\xff\x7d\x3c\x5d\x68\xdb\x07\xe3\xaf\xb9\x07\x17\x63\x18\x47\xd0\xab\x83\x81\x46\xb3\x2f\xba\x76\x09\x2e\xb4\xa3\x1f\x4f\x0d\xed\x66\x47\xf0\x99\xfa\x16\xf1\xff\x3b\x76\x27\x48\x3d\x96\x71\xfb\x48\x91\x67\x54\xf5\xdc\x11\x04\xe0\x49\x82\x30\xee\x68\x4f\x6e\x68\xe9\x33\x46\xa3\xd0\x22\x72\x2f\x28\x9a\x86\x24\xb6\xc1\xe0\xec\xac\x22\xd1\x75\xd7\xe4\x71\xf6\x4a\x21\x2a\x43\x49\x26\x54\x14\x52\xb7\x5a\x91\x8e\x27\x13\x88\xca\xc3\x83\x53\x48\x8b\xa1\x67\x27\x91\x1d\x81\x3f\x9d\x46\x5a\x0c\x56\x89\x44\xb5\xa0\x85\x4a\x72\xcb\x7a\x2d\xe8\x8c\x4e\xf2\x7e\x76\x1f\xf7\xd2\x29\xaf\x6d\x8c\xec\xcc\x36\xcd\xb4\x51\x2f\xbc\xb5\xde\x30\x0a\x61\x75\xa7\x57\x8d\x93\xff\xd9\x3c\x08\x43\x15\xf1\xef\x88\x0b\x8e\x21\x4e\x1e\xaa\x04\xff\x20\x46\x33\x38\xea\xaa\xde\x7a\x44\x1c\xc7\xeb\xdf\x89\x68\x28\xdf\x33\x67\xed\x63\x1e\x81\xf6\x9a\x0c\xfc\xf2\xe6\xe4\x8f\x3f\xb7\xd4\xfd\xf7\x3f\x75\xe4\x0d\x12\xe5\x31\x91\x78\x34\x39\xba\x56\x99\x3e\x53\xe6\x43\x34\x1a\x7b\x41\x4e\x59\x55\x8f\x44\x07\x71\x35\x97\x90\x43\x38\xfa\x43\x34\xdf\x42\x45\xaf\x89\x64\xce\xc2\x2e\x83\xbd\x97\xee\xa9\xd4\x83\xae\x7c\x90\xec\xa3\x99\x3e\x6d\x9b\x14\x50\x22\x7f\x31\x9b\x2e\xae\x75\x91\x61\x71\x43\x21\xe1\xfa\x10\xfa\x3b\xec\x0e\x07\x9d\x86\x13\x88\x4b\x48\xd6\x96\x0b\xe7\xeb\xda\x26\x70\x48\x30\xca\x56\xb7\x13\x9c\x16\x92\x6c\x03\xd4\x12\x95\xe0\x96\x3c\x6e\x2f\xaf\xf4\xb9\x71\x33\x9e\xe8\x0d\xa0\x6b\x79\x71\xc7\x74\x26\x05\x36\xbe\xbc\xcc\x59\xec\xe2\x27\xfa\x74\x33\xb9\x1e\xdf\x7c\x43\xbf\x69\xdf\xd0\xd0\xb1\xf7\xeb\xe2\xfd\x22\x56\x99\x6d\xc4\xdc\xe8\x6b\x27\xd4\xcb\x6c\xde\x91\xd0\x26\xfa\xa5\xf6\x75\xbf\xfe\x16\x2f\xcd\xa9\x14\x37\x95\xb5\xdd\x6e\x31\x9f\xe8\xbf\xa2\x25\x0f\xe1\xec\x3b\x4c\x85\x47\x95\x4e\xa2\x72\x58\x34\xc6\x43\x7a\x1b\x37\xda\x4e\xae\x96\xdb\xb3\xca\xc3\xa4\x21\x1f\xd2\xc7\x44\x63\x37\x2f\x4b\xe3\xc0\xa8\xda\xf8\x95\x1b\xc0\x04\xea\x7e\x4c\x64\x0e\xe0\xfd\x42\x9f\xc0\xe0\x96\x82\x28\xa9\xcf\x43\x91\x17\x86\x05\x14\x75\x47\xff\x91\xbc\xf8\x6b\x02\xb0\x65\xe2\x03\xbb\x0e\x84\xdb\xd5\xe9\xed\x19\x62\x54\x7b\x87\xd1\x01\x08\x0d\xcc\xa0\x2f\x2c\xa9\xee\x3c\x1c\x45\x03\xdd\x0b\x5d\x3d\xa8\xec\x36\x12\x4a\xa0\x07\x5c\x45\xf5\x79\x68\xf2\xb6\xb5\x80\x45\xed\x65\x7e\x93\xf7\xe5\x6a\xc5\x46\xb7\x9d\xad\x70\xda\xf1\x6d\xf2\x60\x96\xbf\x7a\x98\xa0\x3b\xfd\xb0\x71\x68\x04\xad\x06\xf3\x70\xb2\xaf\x30\x45\xd6\x4f\x04\x77\xc4\x73\xf8\x64\x34\xd9\x6a\x47\xd1\x29\x21\x29\x53\x08\x9d\x62\x02\x3f\x58\x5b\x68\xb4\xd2\x4a\x55\x42\xa8\x83\xf3\xe9\xe6\x11\x6a\xb3\x0b\xfc\x9e\x10\xd4\x99\x6a\xdd\xc7\x99\xe4\x6e\x58\xfa\x2e\xa4\x82\xa9\x7d\xc9\x48\xad\xb2\xf4\xad\xa2\xff\x84\x54\xbe\x8e\xb4\x42\x2a\x2d\xd8\x0d\x60\xee\xbb\xd5\xb3\xe5\x29\xff\xad\xac\x0d\x5d\x4e\x76\x37\x60\x75\x5f\xe6\x9e\x0d\x61\xed\x67\xc1\x36\xa8\x75\x8b\x76\xc3\x2c\x07\xd1\x67\xc3\x99\x5d\x45\xb5\x61\x6b\x3c\x69\x14\xd5\x6f\xaf\xfe\x9f\x83\x3e\xca\xd6\x6a\x27\xb5\x7d\x48\xa4\xa8\xb8\x78\x2b\xde\x13\x8b\x34\x99\xec\x82\xab\xb8\x62\x77\x8c\xfd\xb5\xdc\xaa\xa1\x4e\x78\x54\x8d\x37\x1e\xcd\xf9\x43\x7f\x63\x7f\xaa\x5b\x31\x6b\xee\x39\xf8\xd7\xa5\xa7\x21\x39\xf9\xe1\xf6\x39\x76\x52\xd5\xde\x93\x46\x6d\x58\x60\x93\x6c\xd6\x92\x87\x59\x73\x49\xe9\xed\xc1\x8a\xac\xc1\x46\xeb\x54\x37\x1c\xca\xcf\x81\xa7\xef\xdf\xa3\x01\xa3\x6e\xfa\x93\xa0\xb8\x3c\x07\x67\x67\xe2\xc2\xf9\xe4\x64\x84\xd4\x82\x16\xb5\xbb\x09\x3a\x8c\x45\x24\x54\x8b\x2e\x69\xb4\xde\xf0\x4e\xe6\x0b\xa2\xcd\x0e\x14\x44\x4b\x2e\x9c\xa0\x2f\x1f\xb5\x1b\x2d\xd9\x63\xe8\x1d\x7a\xfd\xba\x94\x44\xd5\x6f\x40\x91\x45\xbd\xc0\x25\x9c\xc8\x84\xe4\x7f\x43\x7a\x49\xef\xfd\xe3\x23\x3b\xa4\x01\x8a\x7f\xf5\x56\x5f\x3d\x16\x66\x16\xe4\xed\xbc\x4d\xb2\xb8\xcd\x1a\x57\xe5\x18\xa4\x9b\xdc\x0e\xba\x65\x3f\x6c\x14\x92\x25\xd6\x28\x94\x9d\x8c\xb6\x52\xff\x06\x00\x00\xff\xff\xed\xe3\x76\x14\x82\x2b\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 11138, mode: os.FileMode(438), modTime: time.Unix(1472227714, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xe2\xe5\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\xc8\x2f\x88\x4f\xaa\x8c\xcf\xc8\xcf\x4c\x51\xf0\xf7\x53\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\xcf\x2f\x48\x05\xea\xc8\xcc\xcf\x8b\x2f\x48\x2c\x2a\xc9\x4c\xce\x2c\x48\xcc\x2b\x29\x56\x08\x0d\xf6\xf4\x73\x57\x48\x2a\x29\x4a\x4d\x55\xd0\xc0\x54\x9b\x99\xa2\x69\x8d\x6e\x7e\x09\xc4\xfc\x12\x54\xf3\x4b\x8a\x12\xf3\x8a\x13\x93\x89\xb4\x01\x59\x35\xc4\x0e\x5e\x2e\x64\x7f\xb9\xe4\x97\xe7\x81\xc4\x5c\x82\xfc\x03\x30\xfd\x65\x8d\x2a\x81\x70\x10\x50\x02\x10\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x41\x6f\xa3\x30\x10\x85\xcf\x41\xe2\x3f\xcc\x31\xd1\x26\xd2\xee\xaa\xea\x25\x27\x5a\xa8\x14\x95\x92\x08\x11\xa9\x39\x59\x53\xdb\x4a\xac\x82\x8d\xec\xa1\x29\xfd\xf5\x25\xa9\x15\xa1\x26\x6d\xf0\x8d\xe1\xbd\x37\x03\xfe\x66\x36\x83\x3f\x95\xda\x5a\x24\x09\xeb\x3a\x0c\xc2\xe0\x3e\x4f\xa2\x22\x81\x22\xba\x4b\x13\x40\xce\x4d\xa3\x89\x39\x42\x52\x8e\x14\x77\x30\x0e\x03\xe8\x0e\x0a\x61\xa5\x73\xd0\x3f\x7c\x87\x16\x39\x49\x0b\x6f\x68\x5b\xa5\xb7\xe3\xdb\x9b\x09\x64\xcb\x02\xb2\x75\x9a\x4e\xbd\xd1\x39\x49\x8c\x1b\x21\x7f\x33\xfe\xfb\x7f\x66\x3c\x4e\x22\x6d\x8d\x96\x5a\x46\x6d\x7d\xf0\xbb\x0a\xcb\x52\x69\x3a\x69\x21\x4e\x1e\xa2\x75\x5a\xc0\x5f\xef\x12\xa8\xca\x96\x29\xcd\x4d\x25\x61\x34\x7a\x51\xdb\x01\x72\xd3\xd0\x40\xfd\x5e\xca\xd7\xf3\xfc\xd1\x35\xbd\x6f\x70\x3d\xbf\x32\x9a\x76\xa7\x06\xc3\xf5\xa7\x2f\xb8\x66\x40\xad\x1b\x2c\x07\xe7\x7b\xf9\xe0\xf9\x9b\x5a\x74\x68\x09\x86\xd4\xfd\x9c\x43\x81\x54\x25\x3b\x9a\xaa\x1a\xf6\x8a\x76\xc7\x47\xf8\x30\x5a\x7e\xbf\xed\x55\xbe\x78\x8a\xf2\x0d\x3c\x26\x9b\xb1\x67\x6d\xda\x63\x67\x7a\x8e\xc3\x24\x0c\x26\xf3\x1e\xc1\x8b\x2c\x4e\x9e\x2f\x10\xcc\x7c\x1c\x53\xe2\x1d\x96\xd9\x45\xc6\xbd\xe4\x2b\xaf\xbf\x23\xb1\xd9\xeb\x43\x2d\xce\x97\xab\x41\x1d\xe6\x5e\xfb\xd3\x3e\x75\xef\x3f\x03\x00\x00\xff\xff\x80\x2b\xbf\x1e\x84\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 900, mode: os.FileMode(438), modTime: time.Unix(1471345861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\x41\x4b\xc3\x30\x14\x07\xf0\x73\x03\xf9\x0e\xef\xd8\xe2\x06\x2a\xe2\xc5\x53\xb5\x11\xc4\xba\x8d\xd2\x1e\x76\x2a\xcf\x34\x74\x0f\xd6\x64\x24\x6f\xd3\x7d\x7b\x5b\x2c\x92\x83\xba\x1c\xc3\xff\x97\xbc\xf7\x5f\x2e\xe1\x6a\xa0\xde\x23\x1b\x68\x0e\x52\x48\xf1\x54\xa9\xbc\x56\x50\xe7\x8f\xa5\x02\xd4\xda\x1d\x2d\xb7\x7b\x1a\x88\x03\xa4\x52\x24\xd8\x75\xde\x84\x00\xf1\xd1\x3b\xf4\xa8\xd9\x78\x38\xa1\x3f\x93\xed\xd3\xfb\xbb\x0c\x56\xeb\x1a\x56\x4d\x59\x2e\xa4\x98\x42\x18\x82\xe1\x56\xbb\xce\xfc\x07\x6f\x6e\x23\x38\x26\xbe\xed\x80\x9f\xad\x3b\x98\x71\x4c\x72\x16\x92\xe4\x9d\x7a\xb2\xfc\x13\x84\x42\x3d\xe7\x4d\x59\xc3\xf5\xfc\x57\x87\xb4\x3f\xb7\x7c\xf4\xd6\x9d\xc6\xc7\x2f\x83\xc1\x59\xde\x45\x64\x06\xc9\x9f\x60\x53\xbd\xbc\xe5\xd5\x16\x5e\xd5\x36\x9d\x2b\x59\x44\x2b\x66\x52\x64\x0f\x53\x9d\x71\xc1\x85\xfb\xb0\xd3\x5d\x51\xad\x37\xbf\x16\x3c\x8a\xaf\x00\x00\x00\xff\xff\x46\xb7\x65\xca\x91\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 401, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x3d\x6f\xc3\x20\x10\x86\x77\x4b\xfe\x0f\xb7\x37\x1e\x3a\x67\xa2\x85\x4e\x04\x2a\x0b\x66\x44\x53\x2b\x3d\x29\x40\xe4\xe2\x7e\xfc\xfb\xc6\x6d\xa3\x60\xdc\x8f\xe0\xf5\x85\xf7\x81\xbb\xa7\x69\xe0\xca\xe1\xae\xb7\xb1\x03\x7d\xa8\xab\xba\x22\x5c\xb1\x16\x14\xb9\xe1\x0c\xec\x76\x1b\x06\x1f\xcd\x1e\x1d\xc6\x67\x68\x99\x20\x1b\x06\xb7\x92\xeb\x8d\x00\x67\xdf\x4c\x38\x74\xc7\x2a\x06\x0f\x4a\x4e\x03\x13\x86\xb8\x2e\xa0\x3d\x5a\xdc\xbf\x9b\x38\xf4\x3e\xbc\x74\xfd\x88\xfb\x4a\x3e\xa1\x65\x28\x17\x7c\x7c\xca\x60\xa7\xec\x12\x5c\x5d\x01\x10\x4a\x7f\x9c\xd3\xa0\x87\x07\xdc\xa1\x8f\x20\xa4\x02\xa1\x39\x07\xca\xee\x88\xe6\x0a\x9a\xeb\x55\x56\x3d\x8f\x50\x54\x4b\x3f\xfb\x67\x71\x3d\x0a\x4b\x15\xd2\xf0\xea\x97\x4b\x1c\x37\x33\x13\x59\x2e\xf1\x7b\xc7\x67\x87\x27\x11\x4b\x24\x26\xb0\xdc\xeb\xbf\x12\x69\x2b\xef\x7f\xb3\xb8\xca\x2f\xa4\xae\x66\x87\x53\x23\xc7\x87\x3f\x02\x00\x00\xff\xff\xef\x83\x3f\x08\x38\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 824, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x4f\x84\x30\x14\x84\xcf\x36\xe9\x7f\x78\x47\x88\xec\x41\x63\xbc\xec\x09\xa5\x07\x22\x96\x95\x40\xe2\x9e\xc8\x5b\x68\xf0\x25\xbb\xed\xa6\xed\x6a\xf8\xf7\x2e\x56\x5d\x42\xf4\x1d\x3b\xf3\x35\x33\xb3\x5a\xc1\xf5\x81\x06\x8b\x5e\x41\x73\xe4\x8c\xb3\xc7\x4a\xa4\xb5\x80\x3a\x7d\x28\x04\xa0\x73\xca\x43\xc4\x19\x9c\x8f\x7a\xb8\xdc\x8e\x06\xa7\x2c\xe1\x3e\xe1\xec\xca\x8f\x47\xf5\xab\x90\xf6\x20\xcb\x1a\x64\x53\x14\x49\x20\x3b\xd3\x5f\xf4\xee\x0d\x2d\x76\x5e\x59\x78\x47\x3b\x92\x1e\xa2\x9b\xdb\x78\x49\x90\x73\xa7\xb3\xe3\x3f\xe2\xfe\xee\x0f\xa2\x45\x6d\xf4\x78\x30\x27\x07\x3b\x63\xf6\x0a\xf5\xd2\xb3\xa9\xf2\xe7\xb4\xda\xc2\x93\xd8\x46\xd4\xc7\x9c\xc5\xeb\x59\xe5\x46\xe6\x2f\x8d\x80\x5c\x66\xe2\x35\x34\x77\xed\x94\xbc\x0d\x61\xda\xaf\x96\xa5\xfc\x19\x65\x92\x92\xef\xa0\x09\x4c\x62\xf8\x6d\x3e\x69\x66\x3e\xf4\xf4\x96\x55\xe5\x66\x3e\xe9\xfa\x33\x00\x00\xff\xff\x20\x01\xac\x41\x78\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 376, mode: os.FileMode(438), modTime: time.Unix(1469016730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x51\x4f\xfa\x30\x14\xc5\x9f\x59\xb2\xef\x70\xdf\xd8\xf2\x87\xe4\xff\x60\x7c\xc0\x84\x64\xba\x6a\x16\xe7\xc0\xb9\x25\xf2\xb4\x74\xe5\x02\x55\xb6\x92\xb6\xa8\x7c\x7b\x3b\xc0\x39\x01\x05\xf6\xb4\xed\xfc\x7a\xcf\x3d\x27\x69\xb7\x0b\xff\x0a\x3e\x95\x54\x23\xa4\x0b\xdb\xb2\xad\x9b\x98\x78\x09\x81\xc4\xbb\x0e\x09\x30\x51\x14\x5c\x29\x2e\x4a\x70\x6c\xab\xc5\xc7\x50\x3f\x39\x9f\x2a\x94\x9c\xce\x3b\xb6\x55\x7d\xbf\xe2\x2a\x9b\x51\x35\xab\xde\xd9\x8c\x4a\xca\x34\x4a\xe7\xf2\xc2\x85\x68\x90\x40\x94\x86\x61\x03\x7c\xa3\xf3\x25\x42\xeb\x45\x89\x32\xdf\xd5\x27\x73\xaa\xb3\x09\x1a\xd9\x58\xf0\x52\xd7\x3a\xf8\xe4\xd6\x4b\xc3\x04\xfe\x6f\xc9\x05\x4a\x86\xe5\x06\x3e\xc6\x0e\xe3\xe0\xc1\x8b\x47\x70\x4f\x46\x0e\x1f\xbb\xb6\xe5\x5e\x35\xd2\xa6\x51\xf0\x98\x12\x08\x22\x9f\x3c\x37\x42\x67\xf9\x36\xd3\x20\x6a\x56\x91\x3e\x05\xd1\x1d\xe4\x5a\x1a\x5f\xe7\x2b\x77\x35\x6f\x3b\xed\xd0\x18\xca\x98\x58\x9a\x05\xff\x98\xe4\x38\xdf\xd5\x74\xfb\xfd\xf6\x44\x8a\xa2\xed\xf6\x7a\x1a\x3f\xb4\xdb\x81\x1d\x19\xda\x5a\xd4\xea\x69\xe6\x99\x5e\x2d\xf0\xdc\x0d\xd6\x87\x2a\x23\x53\x2f\x4e\x51\x1e\xde\x64\x8f\x3a\xb6\x91\x52\x78\x56\x19\xeb\x03\xb5\xcb\x6f\x95\x6c\x28\x26\xc6\x27\x50\xc6\x75\x89\xf2\x47\x85\xb6\xd5\xbc\x0f\xbe\x78\x2f\xab\x7f\x7e\x3c\x18\xee\xdd\x07\x43\x7f\x06\x00\x00\xff\xff\xd1\x16\x68\xd2\x3c\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 828, mode: os.FileMode(438), modTime: time.Unix(1470410685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

