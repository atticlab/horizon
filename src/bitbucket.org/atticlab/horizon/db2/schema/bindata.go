// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/4_account_statistics_updated_at_timezone.sql
// migrations/5_account_statistics_account_type.sql
// migrations/6_account_traits.sql
// migrations/7_account_limits.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x6d\x6f\xe3\x36\x12\xfe\x9e\x5f\x41\xf4\x8b\x13\x9c\xb3\x88\x1d\x27\x9b\x4d\xd0\x02\x6e\xa2\x74\x8d\x7a\x95\x36\x76\x6e\xbb\x38\x1c\x08\x5a\x62\x6c\x75\x65\x51\x95\xe4\xbc\xf4\x70\xff\xfd\x46\xef\x6f\xa4\x48\x39\x52\x6e\xbf\x2c\x2c\x0d\x9f\x99\x67\x38\x1c\x0e\x47\xcc\xf1\xf1\xc1\xf1\x31\xfa\x8d\xf9\xc1\xda\xa3\x8b\xdf\xe7\xc8\x24\x01\x59\x11\x9f\x22\x73\xb7\x75\xe1\xdd\xc1\xc1\x42\x5b\x22\x3f\x20\x01\xdd\x52\x27\xc0\x81\xb5\xa5\x6c\x17\xa0\x1f\xd1\xc9\x55\xf4\xca\x66\xc6\xf7\xfa\x53\xc3\xb6\x42\x69\xea\x18\xcc\xb4\x9c\x35\xbc\x18\x3c\x2c\x6f\x2f\x06\x57\x29\x9c\x63\x12\xcf\xc4\x06\x73\x1e\x99\xb7\x05\x09\xec\x07\x1e\xfc\xe7\x83\x24\x73\x12\x8c\x0d\x05\xe8\xc7\x9d\x63\x04\x16\x73\xf0\x0a\x90\x68\xf8\xfe\x91\xd8\x3e\x2d\xa9\x01\x00\xbc\xa5\xbe\x4f\xd6\x91\xc0\x33\xf1\x1c\xc0\xba\x4a\x6c\xa7\xc4\x33\x36\xd8\x25\xc1\x06\xde\xb9\xbb\x95\x6d\x19\x43\xe4\xae\xb1\x01\x54\x6d\x96\x8a\x99\xf4\x91\xec\x6c\x20\x48\x56\x36\xf5\x5d\x62\xd0\xd0\xe8\x41\xe5\xed\xb3\x15\x6c\x30\xb3\xcc\x82\x1d\x07\xb1\x0f\x75\xb2\xa5\x97\x88\x18\x06\xdb\x81\x45\xb6\xb5\xb5\x02\xff\x0a\x2d\x5f\x5d\x78\xba\x9c\xfe\x3c\xd7\xae\xd0\x02\x18\x6d\xc9\x65\x62\xc3\x15\xba\x7b\x76\xa8\x77\x89\x8e\x41\x2c\x53\x7a\x89\x22\xa7\x5f\xdf\x6b\xd3\xa5\x16\x0f\xac\x80\xa2\xc3\x03\x04\xff\x88\x69\x7a\x40\x19\xbc\x44\x3c\x62\x04\xd4\x43\x4f\xc4\x7b\x05\xda\x87\xe7\x93\x23\xa4\xdf\x2d\x91\xfe\x30\x9f\x0f\x63\x59\xdf\xa7\x01\x38\xdb\xa4\x1c\xf1\xd1\xb8\x2a\xbe\x25\x2f\x98\xb9\xd4\x23\xa1\xdf\xd1\xca\x5a\x5b\x4e\x80\x6e\xb4\xdb\xe9\xc3\x7c\x89\x4e\x2a\xc2\x26\xb1\xec\x57\x1c\xec\x3c\x87\x3d\x01\xaa\x44\x7a\xcb\x9c\x60\xa3\x24\x7f\x70\x04\xae\xe5\xfa\x36\x0c\x46\xcb\x0f\x2c\xa3\x6b\xff\xe6\xc0\xfd\xfb\x38\x76\x9b\x05\xeb\x63\x4b\xd5\x5c\x0c\xeb\x4b\x45\xf8\x99\xd2\xef\xca\xc8\x89\xb0\x22\x74\x3a\x79\x6a\xd8\xa9\xb4\x22\x38\x71\x9c\x1d\xb1\x15\xb1\x13\x61\x45\xe8\x9d\x0b\x59\x8d\x9a\x98\x04\x28\x4c\x54\x30\xcd\x5b\x17\x85\x2b\x39\xfa\x89\xfe\x66\x0e\xad\x8c\x88\xe2\x81\x7a\x2e\xf1\x02\x88\x55\x88\x31\xe4\x6f\x89\x6d\xb7\x8d\xd4\xc0\x23\xdd\x67\x81\x18\x34\x89\x50\xcb\x4c\xc9\x97\x09\xac\xa2\xb4\x1c\x39\x33\x4c\xae\x2e\x79\x0d\xb3\xb7\x8f\x56\x8c\xd9\x94\x38\x19\x8b\x28\x87\x71\xc7\xc6\xbe\x6d\x31\x98\xe3\x86\x9d\x69\x41\xd6\x82\x14\xdb\x91\x07\x52\xbc\x9c\x3c\x30\xa7\x6b\x58\x68\x95\xf0\x30\x02\xe6\xf1\x57\x6d\x2c\xe0\xef\x56\x7f\x52\x03\xc2\x81\xbe\x04\xd9\x90\x30\xd9\xe5\x0f\xb6\x34\x20\x85\x9f\x86\x47\xf9\x31\x14\x6e\x7b\x79\x18\xa5\xae\x09\x9f\x84\x0f\x0e\x07\xe0\xc6\xc1\xe5\x65\x04\x84\x1c\xf6\x7c\x78\x74\xa4\xe2\x31\x6c\x99\xd8\xa7\x7f\xa5\x8e\x5b\x68\xbf\x3f\x68\xfa\x75\x83\xef\x8a\xde\x4a\xa5\x6b\x70\x11\x93\xc5\x72\x7a\xbf\x44\x5f\x67\xcb\xcf\x68\x14\x3d\x98\xe9\x30\xee\x8b\xa6\x2f\xd1\xcf\xdf\x92\x47\xfa\x1d\xfa\x32\xd3\xff\x39\x9d\x3f\x68\xd9\xef\xe9\x1f\xf9\xef\xeb\xe9\xf5\x67\x0d\x8d\xda\x9a\x8f\xee\xbe\xea\xda\x0d\xa8\x91\xf0\x98\xce\x97\xda\xbd\x98\x46\x06\x93\xbf\xf9\x60\x99\x55\x63\xd6\xcc\x73\xa1\x32\x58\xc7\xdb\x58\x57\xab\xb0\x82\x9a\x47\x62\x38\xc3\xd5\x30\x74\x5d\xa8\x4f\x1a\xf3\x4e\x3d\x04\x36\xb0\x03\x31\xef\x15\x27\xcb\xbd\x2b\xbb\xab\xb0\x92\xfc\xd1\xb8\xf3\x89\x8d\xa6\x8f\x8f\xb0\xac\xba\xb6\x39\x41\x4d\x4c\xae\x30\xc1\x22\x0a\xa9\x5c\x56\xc9\x08\x25\x7f\x60\x9e\x49\xbd\x1f\x04\xc9\x24\x4a\xff\xfc\x57\x26\xe4\x08\xcb\xf6\xd1\x9f\x3e\x73\x56\x62\xaf\xd8\xd4\x84\xb1\x5d\x7b\x25\x41\x4d\xbc\x02\xcb\x62\x07\xd5\xb6\xc8\xd2\x58\x18\x6f\x88\xbf\x51\xaa\x66\x5c\x8f\x3e\x59\x6c\xe7\x63\xe9\xc0\xc4\x49\x1e\x71\xfc\x38\x87\xe2\x68\x5a\x32\x3b\x44\x9b\x72\x3e\x2d\x6a\xf2\x86\xcd\x7c\x79\xfe\xad\x8c\x51\x4a\xda\x92\x22\x81\x23\x9b\x05\x52\xf2\x73\xeb\x32\x0f\xdc\x82\xa1\xa0\xf5\xc3\x5d\xa4\xca\x65\x54\x0d\x29\x06\x27\x0f\xe0\x6d\x41\x02\xe1\x46\xe4\x23\xa5\xd8\x85\xdd\x56\xb0\xb9\xc3\xf9\x0c\x83\x88\x60\xae\xa3\xd7\xb0\x7a\xa9\xf7\x24\x12\x09\x2b\xfc\xe0\x05\x87\x15\xab\x6f\xfd\x5d\x97\x12\xc7\x72\x3e\x6d\x61\x71\x64\x19\x96\x4b\xba\x4f\x52\x7c\x25\xb2\x5d\x5f\x7d\xc1\xcb\x53\x48\x5b\x07\x74\xb3\x5f\x2b\xe9\xe8\x7b\x13\xdf\x8b\xe8\x9e\x3b\xbb\x92\xae\x7c\xbb\x6f\x16\xe7\xd4\x00\xb5\x01\xbd\x45\xaa\x6c\x43\x2d\x26\x48\xe1\xa6\x1b\xd6\x0b\x46\x4c\x2c\xda\x92\xde\xb8\x23\x25\xb5\x2e\xdb\x79\x06\x4d\x63\x5d\x90\xfd\xd3\x4c\x35\x80\x5a\xb5\x26\xa1\xb0\x2a\x8a\xf4\x7a\x4c\x0c\x22\x35\xaa\xa9\x41\x65\x16\xde\x92\x1c\x44\xf6\x75\x9b\x1e\x24\x5a\xde\x2b\x41\xb4\x24\xfb\xc6\x14\x21\xd1\x56\x4f\x12\xa2\x01\x0d\x69\xa2\x30\xa4\xc7\xc8\x4d\xa3\xb5\x68\xa0\x72\x61\x96\xd4\x63\x92\x72\x4f\x35\x93\x34\x27\x05\xae\x6c\xae\x5a\x5c\xb9\x10\xe1\x42\x14\x55\x7d\xff\x97\xba\x0d\x2a\x20\xea\x3c\x51\x1b\x8c\xe2\x1d\xdf\xe0\x35\x54\x51\x3b\x3b\x10\xbc\xcc\x3a\x04\xf5\x57\xa1\x17\x44\xaf\x7d\x6b\xed\x90\x60\x07\xd0\x1c\xb7\x7f\x3a\x3f\xfa\xd7\xbf\xf3\x6c\xfc\x9f\xff\xf2\xf2\x31\x48\x54\xca\x39\xba\x65\x71\x9b\xaa\x9e\xbb\x33\x2c\x07\xdc\xd0\x98\xdd\x73\xac\x3a\x4c\xc2\x0c\xdc\x89\x57\x30\x71\xa6\x1f\xce\xdc\x05\x04\xf0\x9a\x73\x84\x85\x05\x96\x2c\x9e\x44\xb9\xd2\x8a\x8f\xd7\xcb\x9d\x3e\x2f\x1c\xeb\x51\xfc\xea\xfa\x6e\xfe\xf0\x45\x0f\xa7\x2f\xec\xc5\xa7\x8c\x1c\xf0\xed\x13\xb1\x0f\x07\xd5\xfe\x00\xb0\xf4\xe8\xda\xb0\x89\xef\x77\x6f\x9b\xa4\x46\x55\x32\x58\xa9\xec\x79\x17\x16\xc2\x0d\xb5\x15\x0f\x49\x6e\xe6\x33\xb9\x21\xb0\x3e\x1e\x99\x27\xff\x72\x82\x6e\xa6\xcb\xa9\x84\xa1\x04\x55\xf0\xcd\xa0\x03\x64\x4e\x8f\xf7\x2d\xa8\xdc\x96\x69\x1b\x40\xc5\x4e\x1c\xcc\xa7\x04\x70\xa1\xcd\xb5\xeb\x65\xe1\x43\xd9\x07\x38\x2e\xf2\xd7\xdb\x10\x8d\x86\x71\x37\x58\x3c\xbf\x4d\xed\x38\x15\x7e\x33\x7d\xa1\x41\x45\x33\xd3\x97\x77\xb5\x26\x5c\x54\xb2\x2c\xd0\xe1\x60\x84\x2d\xc7\x0a\x2c\x38\x5c\xfb\x11\xd6\x07\xff\x2f\x1b\xac\x1b\x8c\x4f\x46\xe7\xc7\x27\x67\xc7\xe3\x0b\x34\x9a\x5c\x9e\x7c\xbc\x9c\x9c\x7e\x98\x5c\x9c\x9f\x9e\x4d\xfe\x71\x72\x3a\x00\xa3\x95\xd0\xc7\x80\x6e\xd2\x97\x72\x88\xaf\x20\xfc\x99\x65\x36\x6a\xfa\x34\x19\x7f\x3c\x6b\xa3\xe9\x14\x93\xf5\x1a\xd6\x0c\xec\x6c\x98\xbe\xb8\xd4\xf1\xa9\x8f\xc1\x97\x59\xfb\xae\x59\xdd\xc5\xe9\xc9\xa7\x36\xea\x26\xb8\xbe\x4e\x70\xbe\xb1\xe2\xb4\x9b\xdd\xa4\xf5\xec\xe4\x7c\x32\x1e\xb7\xd1\x7a\xc6\xd3\x9a\x2d\x2b\x88\x8e\x46\x75\xa3\xd1\xe4\x62\xd4\x46\xdd\x39\x2e\x2f\xd9\x46\xf4\xf1\x78\x7c\xd1\x6a\xc6\x3e\xe2\x72\x02\x6b\x46\x9f\x5c\x7c\x3c\x4f\xd0\x05\xcb\xa5\xb1\x0d\xfc\x86\x04\xd3\xd4\xa9\xed\x00\x96\xd7\xea\xec\x00\x56\xa1\xeb\xd4\x3e\x47\xee\xd7\xe8\x78\x4b\xe2\x54\xdb\xf7\x55\xb2\xa9\xa4\xb1\xd1\x81\xcb\x95\x4e\xf4\xfb\x3b\xbd\xed\xe1\xb1\x0b\xb7\xcb\xca\x94\x36\x8e\x17\x1e\x15\xf7\xd8\xab\x4b\x89\x03\xbb\xdf\xe9\x6b\x8a\x78\x7d\xa7\x2f\x96\xf7\x53\x48\x3d\xad\x4e\xa0\xf5\x82\xba\xa4\x22\xaa\xe5\xa7\x37\x37\x05\x78\x9e\x11\xe8\xb7\xfb\xd9\x97\xe9\xfd\x37\xf4\xab\xf6\x0d\x1d\x26\x5f\x84\x86\x85\x8b\x0e\x0a\x37\x34\x7a\x65\x93\xab\x69\x62\x54\x31\x46\xca\x6a\x58\xff\xfa\x2f\xf9\xc0\xdf\x2b\xc9\x58\x45\x13\xc1\x82\x11\x65\x72\x96\xd9\xf0\x81\xb9\x17\x9b\x53\x74\xae\xb9\x25\xd5\x52\x4b\x2b\x3b\x6d\x2f\xf6\x56\x74\xf0\xac\xe6\x99\x21\xb5\x5d\x92\xe7\xfb\xa0\xd2\xac\x92\xc7\x4c\xc1\x48\x65\xa2\xc2\xcc\xda\x27\x55\x91\xd2\x26\xb2\x8d\x86\xca\x57\x0f\xa7\x5e\x8d\x13\x08\x6c\x21\x2f\x29\xcf\x99\x7e\xa3\xfd\xb1\x4f\xc7\x30\x1a\x28\x51\x02\x2e\xe0\xdd\x57\x7b\x58\xcc\xf4\x5f\xd0\x2a\xf0\x28\xcd\x92\x5a\xcd\xfc\x55\x56\x4e\x76\x64\x6a\x0e\x18\x9a\xc5\x6d\x75\x96\x0d\x8b\x85\x87\xb5\x5e\x22\xcf\xd4\xb0\x25\xda\x9d\x9d\x51\x83\x55\xc9\xc8\x6a\x5b\x96\x67\x5b\x5c\xe6\x76\x67\x5d\x8c\xa7\x66\x5f\xa5\x03\x3c\xac\x37\x7b\xb9\xcb\x14\xd3\xf0\xa8\x1a\xbd\x7f\xb3\xdd\x0f\xfa\x0c\xca\xb2\xc4\xfc\x0a\x78\x91\x44\x7a\x71\xa3\x64\x3f\xef\x33\xed\x30\xbd\x83\x21\x32\x3d\x6f\x78\x75\x6a\xb4\x65\x2a\x9b\x9b\x7f\x0e\x1a\x72\xbf\x34\x4b\x28\x30\x17\xbb\xfd\xb0\x48\x90\x8b\x44\x04\xbd\xc9\xbd\x78\xf1\xe9\x04\x2f\x7d\xd1\x49\x90\x05\x6b\x61\x4f\x42\xe5\xef\x7e\x75\x4a\xe0\xc3\x30\x47\xb0\x0e\x18\x25\x54\x72\xc4\x7d\x27\xa6\x79\x12\xb2\x9b\x39\xa0\xa5\xf3\x79\x28\x83\x17\x09\xa4\x97\x8e\x4a\x16\xf3\xed\x2b\xfa\xbc\x1f\x23\x6b\x1a\xd4\x12\x28\xcf\xdc\x20\x9e\xae\xa0\xbb\x00\xc8\x11\xf7\x0f\x65\x49\xd8\xc6\xdd\xc8\x6a\xa7\x08\x83\x70\x52\x01\x74\xeb\x71\xa9\xba\x22\xd1\xec\x9e\xa1\x52\x65\x22\x86\xee\x3a\x6c\x9a\x34\xc9\xed\x97\x4e\x42\xb2\x85\x84\x78\xe1\xc1\xb1\xa3\x60\x6a\xd4\x21\xdd\xc1\xb8\x27\xd8\x32\x64\xb2\xac\x43\xc8\xec\x9e\x5d\x2f\xb6\xf3\x14\x49\xf3\x4b\x26\xa9\xce\xa2\xdf\xb0\x29\x29\xda\x27\x3d\x8a\xe1\x2a\x57\x09\xfb\x9e\x84\xda\xd5\x45\x29\x99\xca\x00\x75\x6a\x85\x9b\xa4\xef\x34\x37\xc5\xbb\xab\x32\x5e\x05\x59\x75\x4a\xbc\x5b\xb2\xef\xc4\x8d\x7b\x41\x57\x46\x92\x37\x48\x9d\x6d\x7a\xe2\x78\x27\x86\xd9\x3d\x13\x19\x2b\xe1\x21\xb2\x0c\x9d\xb7\xca\xfb\x4f\x10\x55\x5d\xdc\x1a\xb0\x6d\x9a\x28\x83\x96\x6b\x83\x5e\xf2\x44\x93\x42\x15\x46\xad\xca\x97\x8a\xb2\xbe\x36\xcf\xba\x1a\x25\x26\xf2\x2d\xb4\x58\x6f\xf6\x1f\x60\x75\x6d\x7b\xd7\xbe\x20\x6c\xd2\xac\xa8\x48\x8f\xf1\x78\xc5\xd8\xf7\x8e\x66\xa0\x41\x83\xb4\x78\x39\x3c\x4c\xaf\xb4\x1e\xff\xf4\x13\x1a\xf8\xcc\x86\x42\x20\xea\xd5\x87\x73\x92\xfc\x65\xd5\xd1\xd1\x10\x89\x05\xc3\xa6\xbe\x92\xa0\xe5\xfb\x3b\xea\x89\x45\x57\x6c\xb7\xde\x04\x4a\xea\x4b\xa2\xcd\x06\x94\x44\x2b\x26\x1c\xa1\xaf\x9f\xb5\x7b\x2d\x0e\x40\xf4\x23\x3a\x3d\x95\x7d\x8a\xb0\x4c\xfc\x58\xe8\xb9\xde\xfe\xaa\xd4\x76\xed\xe8\x13\x44\xa2\x1c\xdd\xde\xdd\x6b\xb3\x5f\xf4\xac\x8f\x8a\xee\xb5\x5b\xa0\xa1\x5f\x6b\x8b\x5a\x81\x5d\x0e\x49\xd1\x5f\xa2\x23\x83\x6d\x5d\x9b\x06\x34\xb2\xf4\x7f\x01\x00\x00\xff\xff\x7e\x30\xf6\xbf\xb6\x3e\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16054, mode: os.FileMode(420), modTime: time.Unix(1464433663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x4b\xc3\x30\x1c\x47\xcf\xcb\xa7\xf8\x1f\x37\xdc\x40\x45\xbc\xec\x54\x6d\x84\x61\xed\x46\xe9\xc0\x9d\x42\x4c\x42\x1b\x5c\x93\xd2\xfc\x6b\x9d\x9f\xde\x6c\x2b\xa5\xe8\xb4\xcd\x31\xbc\xdf\x23\xb4\x6f\xb1\x80\xab\x42\x67\x15\x47\x05\xdb\x92\x90\xc7\x84\x06\x29\x85\x34\x78\x88\x28\x70\x21\x6c\x6d\x90\x39\xe4\xa8\x1d\x6a\xe1\x60\x4a\xc0\x1f\x2e\x65\xa5\x9c\x83\xfe\x11\x39\xaf\xb8\x40\x55\xc1\x07\xaf\x0e\xda\x64\xd3\xfb\xbb\x19\xc4\xeb\x14\xe2\x6d\x14\xcd\xcf\x3b\xe7\x14\x32\x61\xa5\xfa\x6f\x77\x73\xdb\xdb\x79\xe2\x34\x95\x5c\xef\x0f\x4c\x1b\x61\x0b\x05\x93\xc9\x9b\xce\xb4\xc1\x0e\x83\x90\x3e\x05\xdb\x28\x85\xeb\x79\x8f\xb6\x35\x8e\xc3\x1b\xa5\xde\x7f\xdb\x27\x03\x78\xab\x1f\xb4\x17\xd6\x60\xde\xe9\x47\xe3\xdd\xeb\x07\x78\x6e\x4c\xcd\xf7\x63\xed\x2d\x3d\xf6\xed\x75\x29\x7d\x1a\x92\x71\xf4\x9f\xe5\x78\x81\xba\x50\xbe\x87\xa2\x84\x46\x63\xee\x35\xa7\x1b\xf8\xb2\x46\xfd\xf8\xd9\x9b\x64\xf5\x12\x24\x3b\x78\xa6\xbb\x69\x1b\xcc\xbc\x57\xc0\x8c\xcc\x96\x5d\x6f\xab\x38\xa4\xaf\x17\x7a\x63\xed\x90\x69\xf9\x09\xeb\xf8\x62\x91\x2d\x72\xb4\xf5\x6b\x0e\x6d\x63\x08\x09\x93\xf5\x66\x94\x7d\x79\x46\xff\x0a\x7f\x49\xbe\x03\x00\x00\xff\xff\x90\xed\xa7\x46\x2a\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 810, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_account_statistics_updated_at_timezoneSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x2e\x49\x2c\xc9\x2c\x2e\xc9\x4c\x2e\x56\x80\x48\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x94\x16\xa4\x00\xf5\xa5\xc4\x27\x96\x28\x84\x44\x06\xb8\x2a\x94\x64\xe6\xa6\x02\x15\xe7\x16\x28\x94\x67\x96\x64\x80\xb9\x0a\x55\xf9\x79\xa9\xd6\x5c\x5c\xc8\xf6\xb8\xe4\x97\xe7\x51\xd5\xa6\xfc\xd2\x12\x64\xcb\x00\x01\x00\x00\xff\xff\x99\xce\x1e\x1a\xd4\x00\x00\x00")

func migrations4_account_statistics_updated_at_timezoneSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_account_statistics_updated_at_timezoneSql,
		"migrations/4_account_statistics_updated_at_timezone.sql",
	)
}

func migrations4_account_statistics_updated_at_timezoneSql() (*asset, error) {
	bytes, err := migrations4_account_statistics_updated_at_timezoneSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_account_statistics_updated_at_timezone.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_account_statistics_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\x3f\x4b\x04\x31\x10\x47\xfb\x7c\x8a\x29\x15\xef\xc0\xfe\xaa\x68\x22\x1c\xe6\xb2\x47\x4c\x8a\xad\x42\xc8\x06\x09\xee\x9f\x90\x19\x91\xfd\xf6\xae\x8b\x85\xb0\xc2\x36\x62\x3d\xc3\xe3\xfd\xde\xf1\x08\x77\x43\x7e\xad\x81\x12\xb8\xc2\x18\x57\x56\x1a\xb0\xfc\x41\x49\x08\x31\x4e\xef\x23\x79\xa4\x40\x19\x29\x47\x04\x2e\x04\x3c\x36\xca\x5d\x34\xc0\x7a\x4c\xb5\x84\x4a\xb3\xa7\xb9\x24\xc0\x21\xf4\x7d\x1e\x09\x74\x63\x41\x3b\xa5\x40\xc8\x27\xee\x94\x85\xfb\xd3\x1e\x59\x98\xe6\xba\xa0\xf5\x8b\x35\xfc\xac\xed\x2f\x2f\xbe\xbc\xa5\x79\x97\xf3\x65\x78\x35\xe7\x0b\x37\x2d\x3c\xcb\xf6\x26\x74\x5d\x4d\x88\x07\x08\x88\x89\x7c\x9c\xba\x74\xd8\xaa\xdf\x9e\x18\x63\x3f\x5b\x88\xe9\x63\xfc\x2f\xe5\x6f\xce\x5a\x75\x63\xf6\x17\x83\x97\x75\x9f\x01\x00\x00\xff\xff\xb2\xea\x86\xd6\xe8\x01\x00\x00")

func migrations5_account_statistics_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_account_statistics_account_typeSql,
		"migrations/5_account_statistics_account_type.sql",
	)
}

func migrations5_account_statistics_account_typeSql() (*asset, error) {
	bytes, err := migrations5_account_statistics_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_account_statistics_account_type.sql", size: 488, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_account_traitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xb1\x6e\xc2\x30\x10\x86\x77\x3f\xc5\x6d\x24\x6a\xd9\xaa\x2e\x4c\x29\x18\x09\x35\x05\x64\xc2\xc0\x14\x5d\x1c\x37\x5c\x49\x6c\xe4\x5c\x4a\xe9\xd3\xd7\x4a\x69\x49\xd9\xea\xc9\x3e\xdf\xa7\xd3\x77\xff\x78\x0c\x77\x0d\x55\x1e\xd9\xc0\xf6\x28\xc4\x54\xc9\x24\x93\x90\x25\x4f\xa9\x04\xd4\xda\x75\x96\x73\xf6\x48\xdc\x42\x24\x20\x1c\x2a\xa1\xa0\x8a\x2c\xc3\x5a\x2d\x5e\x12\xb5\x83\x67\xb9\x03\x25\xe7\x52\xc9\xe5\x54\x6e\x60\x4f\x2d\x3b\x7f\xce\x2f\x74\x1b\x51\x19\xdf\xf7\x68\x51\x3b\x7d\xc8\xc9\x6a\xd7\x90\xad\xf2\x23\x9e\x1b\x13\x1a\xa0\x70\xae\x36\x68\x61\xb9\xca\x60\xb9\x4d\x53\x98\xc9\x79\xb2\x4d\x33\x98\x27\xe9\x46\x0e\x59\xd7\xf1\xff\x60\x11\x4f\x6e\xa5\xba\x92\x38\xaf\x5d\x75\xf5\xd9\x48\xb5\x48\xd2\xa1\xcf\xf7\x4c\xd4\x41\x04\xf4\x1e\x7d\xb8\x19\x0f\xef\xe8\xcf\x61\x76\xf4\xf8\x70\x11\x6a\xbb\xe2\xcd\x68\x06\x36\x1f\xfc\x8b\x90\xb3\x83\x42\x63\x18\x07\x4f\xed\x4d\x58\x75\x99\x63\x80\xa8\x31\x2d\x63\x73\x84\x13\xf1\x3e\x98\xf5\x15\xf8\x74\xd6\x5c\x65\x4a\xf3\x8a\x5d\xcd\x10\x59\x77\x8a\x62\xc0\x61\xd3\x28\x2c\x63\x14\xf7\x86\xc3\x18\x67\xee\x64\x85\x98\xa9\xd5\xfa\x26\xc6\xa2\x46\x7d\xa8\x43\x3a\x93\x3f\xbf\x3f\xfb\x98\x88\xaf\x00\x00\x00\xff\xff\xf9\x5f\xed\xcf\x0d\x02\x00\x00")

func migrations6_account_traitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_account_traitsSql,
		"migrations/6_account_traits.sql",
	)
}

func migrations6_account_traitsSql() (*asset, error) {
	bytes, err := migrations6_account_traitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_account_traits.sql", size: 525, mode: os.FileMode(420), modTime: time.Unix(1464351958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3d\x4f\xc3\x30\x10\x40\xe7\xdc\xaf\xb8\x31\x11\xad\x04\x08\xb1\x74\x0a\xc4\x48\x88\xd0\x56\x51\x32\x74\x8a\x0e\xc7\x4a\x4f\xaa\xed\xca\xbe\x16\xfa\xef\x09\x50\x21\x0f\x7c\x78\x7e\xcf\x77\xf7\xe6\x73\xbc\xb0\x3c\x06\x12\x83\xdd\x1e\xe0\xbe\x51\x65\xab\xb0\x2d\xef\x6a\x85\xa4\xb5\x3f\x38\xe9\x77\x6c\x59\x22\xe6\x90\xd1\x30\x04\x13\x23\xa6\x4f\x6f\x29\x90\x16\x13\xf0\x48\xe1\xc4\x6e\xcc\x6f\x6f\x0a\x5c\xae\x5a\x5c\x76\x75\x3d\x83\x0f\x86\x62\x34\xd2\x6b\x3f\x98\xbf\xbc\xab\xeb\xc4\x9b\x88\x4f\xd5\xd2\x5b\xef\xf7\x66\xda\x90\xbd\xc3\x2c\x7b\xe1\x91\x9d\x7c\x73\x58\xa9\x87\xb2\xab\x5b\xbc\xfc\x9a\x34\x10\xef\x4e\xbd\x1c\x82\xf3\xc7\xe9\xeb\x7f\x79\xeb\x9d\x6c\x13\xe3\xcc\x67\xbf\xf1\xeb\xe6\xf1\xb9\x6c\x36\xf8\xa4\x36\xf9\xb9\xc6\x2c\x39\xaf\x80\x62\x01\x90\x56\xad\xfc\xab\x03\xa8\x9a\xd5\xfa\xc7\xaa\x0b\x78\x0f\x00\x00\xff\xff\x79\x84\x25\x20\x83\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 387, mode: os.FileMode(420), modTime: time.Unix(1464275499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/4_account_statistics_updated_at_timezone.sql": migrations4_account_statistics_updated_at_timezoneSql,
	"migrations/5_account_statistics_account_type.sql": migrations5_account_statistics_account_typeSql,
	"migrations/6_account_traits.sql": migrations6_account_traitsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"4_account_statistics_updated_at_timezone.sql": &bintree{migrations4_account_statistics_updated_at_timezoneSql, map[string]*bintree{}},
		"5_account_statistics_account_type.sql": &bintree{migrations5_account_statistics_account_typeSql, map[string]*bintree{}},
		"6_account_traits.sql": &bintree{migrations6_account_traitsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

