// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_2_options.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5c\x5b\x6f\xe3\x38\xb2\x7e\xcf\xaf\x20\xe6\xc5\x0e\x8e\x93\x13\x77\xba\x73\x71\x90\x01\x3c\x89\xe7\xb4\x71\xd2\x76\x77\xec\xec\x74\x63\x30\x20\x68\x89\x96\xb9\x91\x44\x8d\x48\x27\xf1\x2c\xf6\xbf\x2f\x44\x5d\xac\x0b\x45\x52\x92\x33\xfb\x68\xab\xf8\xf1\xab\x62\xb1\x58\x2c\x52\x3a\x39\x39\x3a\x39\x01\x5f\x29\xe3\x4e\x88\x17\xdf\x1e\x80\x8d\x38\x5a\x21\x86\x81\xbd\xf5\x82\xa3\x93\x93\xa3\xe8\xf9\xfd\xd6\x0b\xb0\x0d\xd6\x21\xf5\xf6\x02\x2f\x38\x64\x84\xfa\xe0\xfa\xf4\xd3\xe9\x59\x4e\x6a\xb5\x03\x81\x03\xa3\xe6\x25\x91\xa3\xc5\x64\x09\x18\x47\x1c\x7b\xd8\xe7\x90\x13\x0f\xd3\x2d\x07\xb7\xe0\xec\x46\x3c\x72\xa9\xf5\x5c\xfd\xd7\x72\x49\x24\x8d\x7d\x8b\xda\xc4\x77\xc0\x2d\xe8\x3d\x2d\x7f\xbd\xea\xdd\xa4\x70\xbe\x8d\x42\x1b\x5a\xd4\x5f\xd3\xd0\x23\xbe\x03\x19\x0f\x89\xef\x30\x70\x0b\xa8\x9f\x60\x6c\xb0\xf5\x0c\xd7\x5b\xdf\xe2\x84\xfa\x70\x45\x6d\x82\xa3\xe7\x6b\xe4\x32\x5c\xe8\xc6\x23\x3e\xf4\x30\x63\xc8\x11\x02\xaf\x28\xf4\x89\xef\xc4\x22\x21\x7d\x85\x0c\x5b\xdb\x90\xf0\x5d\x04\xbe\x5e\xdf\x24\x3a\x61\x14\x5a\x1b\x18\x20\xbe\x01\xb7\x20\xd8\xae\x5c\x62\x0d\x22\x23\x58\x88\x23\x97\x3a\x37\x47\x47\xf7\x8f\xf3\xaf\x60\x3a\xbb\x9f\x7c\x07\xd3\x5f\xc1\xe4\xfb\x74\xb1\x5c\x24\x92\xa7\x3c\x44\x36\x86\x78\xbd\xc6\x16\x67\x70\xb5\x83\x34\xb4\x71\x08\x57\x94\x3e\xdf\x28\x1b\x12\xdf\xc6\x6f\x70\x43\x18\xa7\xe1\x0e\xf2\x10\xf9\x0c\x09\x0d\x19\xa4\x3e\x24\x76\x93\xd6\x34\xc0\x21\xca\xda\xf2\x5d\x80\x3b\xb4\xde\x33\xe9\xc4\xa2\x59\x5b\x17\xdb\x0e\x0e\x45\x43\x86\xff\xdc\x62\xdf\x6a\xa4\x42\xae\x79\x10\xe2\x17\x42\xb7\x2c\xf9\x0f\x6e\x10\xdb\xb4\x84\xea\x8e\x40\xbc\x80\x86\x1c\x87\x30\x99\x4c\x6d\x61\xda\xda\xd2\x72\x29\xc3\x36\x44\xbc\x49\xfb\xd4\x99\x5b\xb8\x12\xb2\x2c\xba\xf5\x39\x83\xaf\x84\x6f\x22\x57\x22\x9c\xb5\x6a\xdf\x58\xe9\x7c\x4b\x64\xdb\x21\x66\x9a\x8e\x37\x3c\x88\xa6\xeb\x86\xeb\xfa\xd9\xb0\xc2\x9c\x58\xed\xb4\xcc\x36\x99\xf3\x99\x08\xd3\x98\x07\xd5\x0a\x12\xc6\x21\x7f\x83\x81\x1e\x32\x92\xa4\x81\xa9\x24\x36\x15\x4b\xa3\x9b\x5a\xd8\xa2\x9e\x47\x18\x4b\x6c\xa5\x9f\x3c\x45\x79\xc4\x18\xd6\x78\x6b\xa9\x41\x3c\xf0\x06\xae\x2a\x6d\xa7\x6e\xb2\x4a\x67\x93\x56\x4c\xaf\xa7\x69\x9f\xc2\x02\x0c\x5a\xd4\xc6\x90\x30\xb6\xc5\xa1\x81\x6e\xa9\x15\xa2\x15\x9a\x30\x4e\x2c\x96\xce\x02\x48\xec\xb7\x9b\xa3\xf1\xc3\x72\xf2\x08\x96\xe3\x5f\x1e\x26\xb9\xc6\xf3\xd9\xc3\x8f\xfc\x18\x97\x56\x22\x18\xa0\x90\x13\x8b\x04\xc8\xe7\x0c\x88\xee\xef\xe6\xb3\xc5\xf2\x71\x3c\x9d\x2d\x73\x30\xba\xa6\x30\x78\xc6\xbb\x26\x1c\xb2\x95\xa4\x29\x03\x79\x43\xe3\xfe\x1d\x1a\x06\xd0\x23\x4e\xb2\x8c\x29\x3a\x2c\x49\x1a\xf7\xb0\xf7\x41\x05\x78\xce\x51\x4d\x71\x85\xd3\x28\x20\xc5\x73\x73\xb4\x8a\x37\xa9\xa0\xab\xae\xd7\xb4\x1f\x97\x78\x44\x39\xbe\x45\x41\x25\xbe\xa9\x3b\xc7\xad\xef\xe6\x0f\x4f\x5f\x66\x80\xd8\x71\xe7\xf7\x93\x5f\xc7\x4f\x0f\x4b\x43\xec\x1a\x37\xed\x80\x9c\x73\x8f\x0e\x28\xb1\x33\xa8\x01\xc4\x2f\x73\xdb\xa5\x8b\xe9\x62\xf2\xed\x69\x32\xbb\x6b\x61\x70\x48\xec\x28\xb5\x6b\xdc\x73\x01\xc4\xac\xf5\x3e\x11\x35\x66\x5d\x13\x38\x9a\x70\x96\x43\x98\xb5\x4d\x52\x36\x33\xe1\x24\x3f\x33\x13\x4e\xf3\x22\xb5\x74\x29\x9c\x69\xcd\x96\x8b\x50\x26\x26\xda\x8b\x6b\x91\xe3\x40\x65\x02\x9a\xcf\x14\xea\x44\x2a\xa1\xc9\x4c\x3e\x0e\x33\x89\xec\xe4\xfb\x72\x32\x5b\x4c\xe7\xb3\xfc\x7a\x13\x19\x17\x2b\x04\x02\x37\x70\xd8\x9f\x6e\xaa\xee\xdd\xe7\xc9\x97\x71\xa5\xbf\x9b\xa3\x78\x07\x3f\x43\x1e\x1e\xa5\xff\x81\xe5\x2e\xc0\xa3\xa4\xc9\x0d\x58\x58\x1b\xec\xa1\x11\x38\xb9\x01\xf3\x57\x1f\x87\x23\x70\x22\x36\xf6\x77\x8f\x93\xf1\x72\x92\x22\xa7\x78\x47\x45\xc4\x84\x44\x02\x99\xf1\xd4\xa2\x16\x34\x9a\xcd\x97\x25\xad\xc0\x6f\xd3\xe5\xe7\xac\xeb\xfc\x4e\xb9\xd0\xfd\x1e\xa5\x44\xe4\x6e\xfe\xe5\xcb\x64\xb6\x54\xd0\x88\x05\xc0\x7c\x56\x05\x01\xd3\x05\xe8\x7d\x7d\xf8\xdf\xc0\x59\x7c\x7b\x00\x41\x48\x2d\x6c\x6f\x43\xe4\x02\x17\xf9\xce\x16\x39\xb8\x57\xe6\x91\x0c\xd6\xc1\xac\x10\xe3\x15\x8d\x20\xb5\xff\x1e\xa0\x48\xa1\x9d\xfe\x49\xb7\x91\xfa\x36\xe2\x08\x44\x49\x21\x58\xd3\x10\x44\xff\x13\xdf\x01\x51\xda\x08\xe8\x1a\xf4\x9f\xf1\x6e\x00\x5e\x90\xbb\xc5\xc7\x20\x40\x24\x64\xc2\x24\x86\xc5\x8e\x48\xcc\xc6\x6b\xb4\x75\x39\xe4\x68\xe5\x62\x16\x20\x0b\x83\x5b\xd0\xeb\x95\x9e\x8a\x3d\x1e\x25\x76\xae\x18\x53\x50\xbf\x34\x9b\x12\xe5\xc5\xd4\xdb\xab\x9e\x7a\xbd\x6c\x00\xe2\x59\x5a\x4a\x12\xfa\x47\x00\x00\x90\x24\xb7\xc0\xda\xa0\x10\x59\x1c\x87\xe0\x05\x85\x3b\xe2\x3b\xfd\x8b\x8f\xc7\x62\xb0\x66\x4f\x0f\x0f\x83\x58\x56\x84\x94\x28\x9f\x96\x88\x0f\x3f\x94\xc5\x3d\xf4\x96\x8b\xe5\x74\xcb\xc1\x8a\x38\xc4\xe7\xe9\xda\x09\xce\x4a\x0d\x6c\x44\xdc\x1d\x14\xcd\xf4\xc2\x1e\xf5\xf9\xa6\x81\x78\x81\x0c\xf1\xcb\xf2\xbd\x93\x61\x6f\x34\x22\x3e\xc7\x0e\x0e\x6b\x79\x35\x6b\x97\xa7\x68\xda\xf2\xe8\xb8\xec\xfc\x92\xd8\xdb\xd5\x03\x72\xe9\xe8\xbb\x7b\x81\xe8\x11\x87\xd1\x52\xbe\x13\xfb\x2f\xc0\x3c\xe4\xba\x7a\x3f\x20\xbe\x45\x3d\x6c\xe6\x33\x74\xcb\x4d\x84\x5f\x31\x7e\x36\x46\x4e\x84\x0d\xa1\xd3\xb1\x36\xc3\x4e\xa5\x0d\xc1\x91\xef\x6f\x91\x6b\x88\x9d\x08\x1b\x42\x6f\x03\x1b\x71\x51\xd9\x02\x9c\x78\x98\x71\xe4\x05\x20\x0a\x48\xe2\x27\xf8\x8b\xfa\x58\xe5\x9b\x22\x75\x68\xed\x8e\x22\xbd\x8e\x3d\x90\xd8\x29\xd3\x22\x3f\xe1\x31\xf2\xe9\x65\xec\x82\xf1\xe6\xdf\xc8\xb9\x09\x83\xc8\xa7\xfe\xce\xa3\x5b\x06\x56\x94\xba\x18\xf9\x3a\xfd\xd3\x24\x2b\x4d\x38\x92\x94\xcc\xcc\x12\x59\x02\x97\x87\x12\x54\x16\xcb\xf1\xe3\x32\x5e\x1c\x87\xe2\x8f\xe9\xec\xee\x71\x22\x96\xb3\x5f\x7e\x24\x7f\xcd\xe6\xe0\xcb\x74\xf6\x8f\xf1\xc3\xd3\x24\xfb\x3d\xfe\xbe\xff\x7d\x37\xbe\xfb\x3c\x01\xc3\x26\xb4\xc1\xfc\xb7\xd9\xe4\x1e\xfc\xf2\x43\xc3\x3f\xde\x15\x49\xe9\x67\x10\xf1\xbf\xa7\xc4\x2e\x13\xc8\xe5\xb1\x6d\x9d\x27\xb7\xc3\x53\x7b\xd0\x33\x8e\x8b\x4a\xfb\xf1\x97\x8c\x7b\x24\x24\x16\x7a\xf0\x4f\x46\xfd\x55\xe9\xe9\xda\x45\x1c\xae\xb1\x76\x32\x05\x38\xb4\xb0\xaf\x11\xad\x7a\x51\x75\x13\xd0\xcd\x95\x2a\x78\xef\xed\x4f\x5a\x05\x5a\x3a\x55\x05\x77\xef\x59\xfb\x47\x12\xf7\x2a\xef\xc2\xda\xfa\x58\xb9\x8c\x95\x39\x1a\xc7\x6f\x65\x37\x43\x41\xe0\x12\x75\x20\xad\x8e\x7c\x65\x73\xd9\x96\x69\x19\x48\x33\x27\x94\xeb\x7d\x22\x92\x2b\x07\xd7\x04\xe0\x95\x38\xab\x14\xab\x12\xf1\x1d\x18\xa0\x9d\x87\xa3\xbe\xd3\xb8\x99\xfa\xbe\xc8\x69\xa5\x6d\xe3\x45\xaa\x71\x63\x91\xc1\x46\xb6\x16\x15\xde\x78\xca\xd6\x1b\x37\xdd\xe6\x77\xb5\x6d\x82\x93\x98\xb6\x64\x71\x58\x67\xea\x6a\x55\xa3\x4e\xf2\x27\x71\x26\xf0\x53\x8d\xb1\x15\xe3\x60\x63\x8e\x88\xab\xb5\x43\x5a\x1b\xe9\x6a\x87\x04\x27\xb1\x43\x7a\xca\x58\xc3\x2d\x77\xf4\x67\xb4\x00\xcb\x4e\x1d\x55\x6e\x9a\x2f\x70\x89\x81\xc8\x78\xd4\x05\xe9\xfd\x40\x98\xc9\x67\x47\x7f\xa5\x79\x1d\x6d\x3a\xaa\x39\x52\xd2\x26\xc4\xf2\xac\xaa\xd0\x48\x93\x81\x49\x64\x33\xd7\x49\x7e\x96\x4e\x45\x2b\xba\x0c\xcb\x4e\x44\x39\x72\xa1\x45\x89\xcf\xe4\x3e\xb8\xc6\x18\x06\x94\xba\xf2\xa7\x2b\xc4\xb0\x58\xdc\x6a\xe2\x41\xf4\x38\xc4\x0c\x87\x2f\x75\x22\xd1\x56\x88\xbf\xc1\x28\x57\x60\xe4\xaf\xaa\x54\xbd\xf7\xd6\x54\x05\xbb\x3a\x73\x4d\xe9\x39\x0b\x9f\x72\x35\xcc\x27\xb5\x3e\x4c\x34\x55\xf9\x30\x39\x82\x51\x1f\xef\x9d\x37\xb4\x52\xb4\x65\x2e\x61\xd4\xd7\x3e\xbf\x50\x8b\x4b\x72\x0e\x49\xcd\xfc\x60\xbe\xa9\x5b\xce\x8b\x57\x4d\x6a\x96\xfc\x28\x3f\xb1\x92\x5a\x4c\xb4\xd0\x74\x5c\x67\xe2\xbf\x18\xdd\x86\x16\x4e\xbd\xbb\x26\xc2\x67\x15\x8f\xde\x68\x54\x91\x30\x98\x07\xb5\x87\x18\x5d\x0d\x5c\x7b\xa6\x65\x38\xfd\x4d\xec\xde\x25\x00\xe8\x8e\x80\x0e\x13\x02\x34\xbd\xfc\x5d\x41\xa0\xa1\xb2\x1d\xc3\x80\xa6\xb7\x6a\x20\xa8\x6b\xa0\x08\x05\x85\x63\xbf\x03\xfa\x6a\xea\x9f\x79\x4a\xc6\x09\x56\x92\x57\x69\xd2\x36\xd3\x68\xa1\x9e\xf8\x52\xd9\x7d\xd7\xf5\x19\x08\xaa\x9d\x7a\x75\xd9\xdb\x7f\x25\xff\xe2\x6f\x10\xfb\x2f\xd8\xa5\x01\x96\x6d\x09\xf9\x5b\x94\x0d\x6d\x5d\x5e\xf3\xd0\xc3\x1c\xd5\x3c\x8a\xac\x50\xf7\x98\x11\xc7\x47\x7c\x1b\x62\xd9\xfe\xed\xfa\xe2\xf8\xf7\x3f\xf6\x11\xf7\x5f\xff\x96\xc5\xdc\xdf\xff\x28\xa7\x65\xd8\xa3\xf1\x4e\xaf\x1a\x9f\x33\x2c\x9f\xfa\x58\x19\xc1\xf7\x58\x55\x98\x44\x33\xe2\x61\xb8\xa2\x5b\xdf\x66\xd1\xc8\x5d\x85\xc8\x77\x24\xdb\x62\x62\xa7\xd3\x25\x3d\x66\x37\x99\xe3\xf1\x7c\x11\xd7\x22\xe4\x07\xf7\x8b\xc9\x32\xd3\xc6\xc7\x6f\xfc\x05\xb9\xfd\x5e\xbe\x70\xd5\x1b\x8d\x42\xec\x58\x2e\x62\xec\xf0\x9c\x14\x57\x12\xa4\xc4\x2a\xc5\x8f\x77\x65\xd7\xf0\x2a\x86\x94\xb1\x51\x8a\xf5\xb7\x68\x61\x7c\x59\x45\xa9\x87\x66\x8d\x90\x6b\x72\x8f\x38\x12\xa7\x89\xda\xb3\x3b\x70\x3f\x5e\x8e\x35\x1a\x6a\x50\x6b\xce\x84\xba\x20\x57\x2a\xfa\x4d\xc0\x0c\xca\xcb\x8b\x89\x6e\x54\x17\x93\x87\xc9\xdd\x32\x77\x98\x7a\xca\xb0\x64\xae\x0e\xc0\x70\x10\x57\x87\xea\xad\x5f\x53\x67\x6e\xae\x92\xbe\xc2\xd9\x45\xaf\xea\x54\x37\x51\x4e\x55\xe5\x34\xd1\x70\x3a\x5b\x4c\x1e\x97\x60\x3a\x5b\xce\x2b\x95\x4e\x91\xb5\x2d\x40\xbf\x37\x84\xc4\x27\x9c\x20\x17\x32\x81\x75\xca\xfe\x74\x7b\x03\xd0\xfb\x70\x36\xbc\x38\x39\xbb\x3a\x39\x3f\x03\xc3\xe1\xe8\xd3\xd5\xe8\xc3\xc7\xd3\xe1\xd9\xf5\xf0\xf2\xfa\x7f\xce\xce\x7b\xc7\x37\x66\xe8\x1f\x60\x7c\xf9\xb8\x30\xbb\x56\x3b\xc8\x29\xb1\x55\x3d\x7d\xf8\x78\x7d\x35\x1c\x36\xe9\xe9\x1c\x22\xc7\x09\xb1\x83\x38\x86\xf8\x2d\xc0\x3e\xc3\x0c\xae\x69\x98\x55\x4c\x55\xdd\x7d\xbc\xb8\xfa\x74\x79\xd1\xa4\xbb\x4b\x58\x9c\xf8\x2a\xf4\x4f\xe7\xc3\xb3\xcb\xab\x26\xe8\x57\x25\x74\xc8\x5f\x29\x7c\x45\x3b\x55\x2f\x17\x57\xe7\xc3\xe1\xc7\x26\xbd\x5c\xc3\x61\x52\x61\x55\xe1\x5e\x5e\x5e\x5c\x5d\x5c\x36\xc3\xcd\x15\xef\x15\xc8\xd7\x17\x1f\xcf\x2f\x3e\x25\xc8\x35\x73\x40\x59\x40\xef\x10\x06\x55\xb5\xe3\x03\xc0\xca\x4a\xb1\x07\x80\x35\xa8\x91\x35\x0f\x7d\xed\x8a\x34\x5d\xc2\xa1\x59\x1e\x61\x12\x22\x35\x45\x99\x03\x98\xdc\xa8\x36\xd1\xde\xe8\x4d\x37\xc5\x87\x30\xbb\x2e\xed\x69\x62\xf8\xda\x2d\x70\x8b\xac\x42\x72\x75\x39\xbb\x07\x96\x5e\x75\x6e\xbc\x51\x28\x80\x8a\x3d\xca\xf8\xfe\x3e\x7f\x77\x5a\xd2\x2d\xf8\xfa\x38\xfd\x32\x7e\xfc\x01\xfe\x7f\xf2\x03\xf4\x93\xb3\xb4\x41\xee\x62\x8c\xc1\x1d\x9e\x03\xf3\xdf\x03\xab\x74\x28\x75\xaf\xd5\x63\x50\xbd\xbd\x53\x73\x05\xe2\x40\xda\x44\x58\x52\x05\xb2\x4e\x8a\x9c\x89\xad\x3a\x4c\x3f\x0c\xa9\x3d\xa0\x8c\x59\xa9\x3b\x2d\x3d\xe9\xfb\x0e\x9d\x39\x96\x50\x65\x44\x65\x1d\x6b\xd9\x9a\xbc\x0e\xd2\x99\xbc\xba\x13\x99\x2e\x06\xb4\x8c\x55\x53\xbf\x6b\x73\x30\xe5\xea\xba\x51\xa9\xa7\xa4\xa6\x55\x50\xf3\x26\x53\xa2\x99\x78\x0d\xca\xac\x1e\x19\xbf\x31\xa5\x86\x05\xf3\x99\xec\x96\xe1\xd3\x62\x3a\xfb\x3f\xb0\xe2\x21\xc6\x59\xa0\x91\x47\x12\xc9\xfb\x5a\xcd\x99\x3e\xcd\xa6\xdf\x9e\x32\xc2\x72\x58\xc1\x54\x94\x89\x0a\xe4\xe2\xb0\x17\xcb\x0d\x80\x34\xe2\xe5\xde\x3f\x6b\x6b\xc4\x3d\x44\x44\x43\x5a\xe2\x2d\x9a\x2c\x16\x1e\x54\x6a\xa8\x32\x72\xe2\x0d\xba\x0e\xcc\x44\x29\xd9\x88\x56\xb9\x00\x2d\x63\x93\xbc\xf6\xd7\x81\x4f\x8c\x60\xc6\xa8\x54\xdd\x1e\x54\x0b\xd9\xaa\x05\xe3\x00\x23\x2b\x45\x8b\xb8\xe7\xca\x7f\x05\xc6\xfd\xfe\xfe\xee\xd9\xc9\xcf\x3f\x83\xde\x3a\xa4\x5e\x6f\x34\xe2\xf8\x8d\x1f\x1f\x0f\x40\xe5\x39\xa7\xd9\x53\x33\x5d\xda\xce\x22\x85\x42\xd9\x0c\xaa\xd7\x4a\xa6\x96\x68\x96\xb1\xcf\x2e\x3f\x0b\x2d\xab\x6a\xd6\x49\xeb\xb4\xce\x57\xb0\xba\xaa\x2b\x02\x44\x93\xd1\x8b\x33\x95\x02\x73\xc9\x18\xee\x53\x2c\xbd\x54\x1c\x8b\x4c\xc7\xbc\xe5\xe4\x2f\x44\xcc\x2a\xa2\xca\x04\xe9\xfd\x4a\xe9\x0a\x9b\x7f\xd9\xb9\x23\xab\x12\x5c\x3e\x1e\xa4\x37\xb3\x0a\xbc\x64\x77\x34\x06\xe9\x25\xab\x3a\xb2\xfb\x0a\x74\x47\x9a\xc4\x36\x26\xb8\x3f\x19\x1e\x48\x2f\x96\x68\x48\xa7\xef\xa7\x1f\x82\x77\x82\x95\xa7\x5e\x73\x20\xd0\x4a\x13\xb9\x02\xe9\xab\xf8\x87\x50\x20\xc1\xaa\x59\x2c\x5a\xaa\x50\x3c\xe6\xaf\x2a\x91\xfb\xf0\x40\xdb\xb0\x93\xc3\x68\x6b\x7c\xb5\xa1\x4b\x5f\x52\xe8\x6a\xeb\x22\x5c\x9e\x72\x7a\x3b\xb0\xc0\x51\xce\xa8\xfa\x35\x88\xee\xb4\x2a\x98\x66\x79\x83\x8c\x60\xee\xbb\x16\xad\x87\x75\x8f\xd1\xde\x25\x35\xee\xa7\xff\x7c\x47\x47\xab\x6a\x3b\xc8\xab\x96\x5d\x40\x36\x4a\xf9\x95\x1f\x2d\x79\x37\xda\xc5\xc1\x90\x33\x36\x37\x74\xfe\x0b\x2d\x6d\xfd\x44\x0f\x6d\xc4\x18\xfc\xf6\x79\xf2\x38\x01\xfd\x7e\xdd\xcd\xec\x5b\xc0\xc3\x2d\x3e\x06\xf3\x47\xd0\xaf\xbd\x81\x9d\x08\x69\xf4\x2f\x7f\xdc\xe6\x30\xaa\x97\x50\xb5\x6b\xa8\x74\x83\x66\xf0\x15\x9f\xc3\xb0\x95\x41\x6b\x63\x61\x26\x69\xce\xfb\xd0\x93\xa1\x00\xdd\x26\x78\x9b\x7f\xa7\xe9\xe0\x86\xae\xdc\x79\xd6\xd2\x2f\x35\x30\x57\x26\xff\xd9\xaa\xf7\xb2\x7f\xfe\x9a\xbb\x4e\x93\x9c\xac\xb9\x12\xd2\xcf\x78\xbd\x97\x36\xd2\xdb\xfb\x3a\xb5\x64\x8d\xcc\xf5\xcb\xbe\x72\xf6\x5e\x3a\x65\xd7\xd5\x74\x7a\xd4\xd6\x64\x34\x5f\x77\x3b\x28\xf1\x32\xba\x34\x9b\x6c\x3a\xc1\x95\x1f\xb6\x3b\xcc\x0c\x57\x75\x61\xa2\x43\xa3\x24\x49\xf2\x99\xbf\x77\xd1\xa2\xb4\x82\xd5\x72\xd7\x2f\x62\x92\xcf\x1a\x1e\xd4\x6d\xaa\xf8\xad\xf3\x66\xd5\x87\x1c\xdb\x5a\x59\x81\xa9\x4d\x11\xfa\xfd\xf4\xde\xba\x28\xaa\x30\xea\x26\x2f\x8e\x55\xab\x34\x75\x82\x95\x42\x4d\x9d\x60\xa9\x56\x53\x11\x5d\xd1\xad\xb3\xe1\x46\xdd\x17\x44\xd5\x04\x0a\xa2\xe5\x72\x51\x9a\x13\x0a\x67\xbc\x05\xe7\xe7\xb9\x01\xab\xfb\xe2\x29\xb0\xa8\x17\xb8\x98\x63\x31\x12\xff\x09\x00\x00\xff\xff\x19\x99\x73\x7a\x1e\x55\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 21790, mode: os.FileMode(420), modTime: time.Unix(1472739164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8f\xdb\xb8\x11\xfe\xbe\xbf\x62\x70\x5f\xbc\x8b\xae\xdb\x0b\xae\x38\x5c\xbd\xd8\x03\x9c\x5d\xa5\x31\xea\x95\x13\x5b\x6e\x12\x1c\x0e\x04\x2d\x8d\x65\x36\x12\xa9\x90\xd4\xc6\xbe\xa2\xff\xbd\xd0\xab\xf5\x2e\x79\x63\xe7\x3e\x5a\x1a\xce\xcc\x33\x33\x7c\x66\x44\x7a\x3c\x86\xbf\xf8\xcc\x95\x54\x23\xac\x83\xab\xf1\xf8\x6a\x3c\x86\x77\x42\x69\x57\xe2\xea\xfd\x1c\x1c\xaa\xe9\x86\x2a\x04\x27\xf4\xe3\xd7\x57\x2b\xc3\x02\xa5\xa9\x46\x1f\xb9\x26\x9a\xf9\x28\x42\x0d\xf7\xf0\xe3\x5d\xfc\xca\x13\xf6\xe7\xfa\x53\xdb\x63\x91\x34\x72\x5b\x38\x8c\xbb\x70\x0f\xa3\xb5\xf5\xe6\x97\xd1\x5d\xa6\x8e\x3b\x54\x3a\xc4\x16\x7c\x2b\xa4\xcf\xb8\x4b\x94\x96\x8c\xbb\x0a\xee\x41\xf0\x54\xc7\x0e\xed\xcf\x64\x1b\x72\x5b\x33\xc1\xc9\x46\x38\x0c\xa3\xf7\x5b\xea\x29\x2c\x99\xf1\x19\x27\x3e\x2a\x45\xdd\x58\xe0\x2b\x95\x9c\x71\xf7\xee\x2a\x85\x67\x52\x1f\x27\x10\x78\x81\xab\xbe\x78\x77\x60\x1d\x02\x9c\x80\xf1\xd1\x32\xcc\xd5\x6c\x61\xde\xc1\xca\xde\xa1\x4f\x27\x30\xbe\x83\xc5\x57\x8e\x72\x02\xe3\x18\xf9\xc3\xd2\x98\x5a\xc6\x51\x12\x66\x6f\xc0\x5c\x58\x60\x7c\x9c\xad\xac\x55\xa6\x10\x3e\xcc\xac\xb7\xb0\x7a\x78\x6b\x3c\x4d\x21\x70\x89\x4d\x35\xf5\x44\x64\xbd\x64\xfe\xa8\xa5\xe2\xc8\xc3\xe2\xe9\xc9\x30\xad\x0e\x37\x12\x01\x58\x98\x75\x25\x30\x5b\xc1\xe8\xdd\xfc\x6f\x81\x1b\x25\x2f\x90\xc2\x46\x27\x94\xd4\x03\x8f\x72\x37\xa4\x2e\x8e\xaa\x7e\xec\x94\x16\x12\xcf\x17\x85\x44\x5f\x39\x08\xe1\xc6\x63\x76\x7b\x00\xca\x2e\xbc\x0c\x7f\x6a\x36\x82\x1f\x95\x2c\xe8\x43\x80\xb0\x15\x12\xa2\xe7\x51\xc5\x29\xd4\x0a\xc4\x16\xae\x3f\xe3\xe1\x16\x9e\xa9\x17\xe2\x0d\x04\x94\x49\x15\x87\x24\x2e\x43\xa4\xd2\xde\x91\x80\xea\x1d\xdc\xa7\x5e\xdf\x96\x53\x18\x89\x39\xb8\xa5\xa1\xa7\x89\xa6\x1b\x0f\x55\x40\x6d\x8c\xca\x79\x54\x79\xfb\x95\xe9\x1d\x11\xcc\x29\x54\x68\x39\xee\x2c\xf2\xec\x40\xa8\x6d\x8b\x90\x6b\x95\xc1\xb7\xa6\xaf\xe7\xc6\x11\x7c\x1a\xbb\x3c\x02\x77\x60\xe5\x66\x27\xc5\x7c\xc4\xeb\x6a\x5a\xe1\xfa\x0a\x00\x80\x39\xb0\x61\x2e\xe3\x3a\xce\x94\xb9\x9e\xcf\x6f\xe3\xe7\xd4\x71\x24\x2a\x05\xf6\x8e\x4a\x6a\x6b\x94\xf0\x4c\xe5\x81\x71\xf7\xfa\xe7\xbf\xdf\xa4\x22\x89\x26\x12\x07\x94\x71\x8d\x2e\xca\x8a\x96\x4d\xbc\xe7\x19\xb7\x45\xbc\x73\x03\x7a\x88\xa8\x41\xc1\x46\x08\x0f\x29\xcf\xa5\xe1\xd1\x78\x33\x5d\xcf\x2d\x78\x33\x9d\xaf\x8c\xe2\x5a\x11\xea\x97\x2c\xf6\x98\xcf\x34\x3a\x84\xaa\x38\xbb\xff\x51\x82\x6f\xae\x6e\x6a\x15\x9e\xc6\x04\xb7\x5b\xb4\xcf\x1d\xe8\x54\x69\x1a\xe7\x4a\xf8\x49\x5b\xdc\x33\x39\x11\xa0\xa4\x31\x9b\xb5\x49\xfe\x20\xa4\x83\xf2\x87\x96\xc8\x77\x24\xc5\x41\x4d\x99\xd7\x1b\x14\x0f\x1d\x17\xe5\x99\x83\x92\x2a\x4d\x83\xa2\xf0\x4b\x88\xdc\x6e\x73\x34\x11\x26\x3b\xaa\x76\xcd\x75\x58\x91\x0f\x24\x3e\x33\x11\x2a\xd2\xbb\x30\x8d\x91\xa4\x5c\xd1\xa4\x67\xc4\x59\xc9\xfd\xc8\x2a\xea\xc7\x8a\x85\x63\x56\x86\xc9\xdb\x9e\x50\x51\x15\x6a\x88\xfa\x9e\xd2\xd4\x0f\x20\xda\xfe\x51\x07\x8c\x9e\xc0\x1f\x82\x63\x75\x8d\x44\xaa\x7b\x17\x25\xb2\x61\xe0\x0c\x96\xcd\xeb\x28\xfd\xe9\x07\x42\x6a\x94\xe4\x19\xa5\x62\x82\xd7\xb0\xbc\xaa\x56\x94\xd0\xd4\x23\xb6\x60\x5c\x35\x17\xe4\x16\x91\x04\x42\x78\xcd\x6f\xa3\x51\x81\x6c\xb1\x95\x29\xa2\xd7\x12\x15\xca\xe7\x36\x11\x9f\xee\x89\xde\x13\x85\x9a\x28\xf6\x47\x5d\xaa\xbd\x94\x8f\x69\x0b\xa8\xd4\xcc\x66\x01\x3d\x3b\xaf\x36\xdb\x38\xb2\x6c\x33\xa6\xe1\xdb\xbd\x9f\x40\x4e\xc5\x4f\x98\x43\x14\x7e\xc9\xc2\xb0\x32\xde\xaf\x0d\xf3\xa1\x23\x12\x45\xf0\x99\xf4\x30\x1b\x31\x82\x95\x35\x5d\x5a\x49\xfb\x7f\x15\x3f\x98\x99\x0f\x4b\x23\x6e\xd8\xaf\x3f\xa5\x8f\xcc\x05\x3c\xcd\xcc\x7f\x4f\xe7\x6b\x23\xff\x3d\xfd\x78\xfc\xfd\x30\x7d\x78\x6b\xc0\xab\xb3\x00\x85\xc5\x07\xd3\x78\x84\xd7\x9f\x7a\x10\x4f\xe7\x96\xb1\x3c\x11\x70\xae\xbb\x47\xfc\xaf\xcc\xe9\xc5\x72\xa9\x42\xed\x1b\x01\x8a\xf4\xd8\x3a\x26\x04\x81\xc7\xec\x04\x57\xdc\x8f\xbe\xb1\x1d\x25\x8f\x94\x08\xa5\x8d\x59\xa9\xb7\x70\x7f\xc6\x53\xa3\xd1\x64\x52\x93\x18\xb0\x29\x8a\xf0\x2e\x47\x0b\x6d\x56\xe2\xd8\xb7\xd0\x42\xd3\xda\xe6\x04\x7c\x0b\x29\xb4\x79\x76\x5e\x5a\xe8\xb1\xf2\xbd\x88\xe1\x44\xb0\xdf\x48\x0d\x3d\xd6\xea\xe4\xd0\xb6\xa0\x83\x1e\x0a\x4b\x2e\x57\xb2\x19\x45\x14\xfd\x1b\x3c\x8e\xa5\x53\x58\xcf\x90\x37\x94\x41\xba\xc9\xa0\x51\xf6\x68\xba\x7d\x5e\xa1\xad\xad\xb9\x6d\xd6\xfb\x53\xa6\x35\xbd\x27\xc8\x9f\xd1\x13\x01\x82\xc6\x7d\x8d\xaa\xf7\xd1\xec\x14\x7a\xba\xe5\xa5\x8f\xd1\x87\x6f\xe3\xab\x28\x0a\x6d\xaf\x15\x73\x39\xd5\xa1\xc4\xa6\xef\xc0\x7f\xfc\x7c\xf3\xdb\xef\x47\x16\xfe\xef\xff\x9a\x78\xf8\xb7\xdf\xab\x43\x1c\xfa\x22\xf9\x62\xac\x73\x76\xae\x8b\x0b\x8e\x9d\xac\x7e\xd4\x55\x57\x93\x22\x63\x3e\x92\x8d\x08\xb9\xa3\xa2\xcc\xfd\x22\x29\x77\x31\x26\xc3\xe2\x66\x62\x4e\xb6\x75\x52\xdb\x83\xf6\x7b\xb2\x5d\x16\xe6\xbc\xaf\xbb\x43\x22\xff\xb0\x98\xaf\x9f\xcc\x28\xa5\x2b\xc3\xca\x51\x72\xdc\xeb\x67\xea\x5d\x8f\x06\x0d\x14\xa3\xc9\x44\xa2\x6b\x7b\x54\xa9\x1a\xa3\x9f\x0d\x45\x6b\xb3\x3a\x09\x47\x0f\xfb\x75\x21\xe9\x09\x45\xf0\x19\x0f\xc7\xc3\x20\x73\x65\x2d\xa7\x33\xb3\x03\x6d\x9d\xf0\x4e\x4c\x60\x5c\x4a\xd3\xc7\xc7\x82\xb5\x21\x3e\xc2\xbb\xe5\xec\x69\xba\xfc\x04\xff\x32\x3e\xc1\x35\x73\x4e\xef\xc1\x17\x44\xda\x66\xb3\x0b\x6b\xa7\x9f\xbd\x68\x37\xf9\x80\x92\x41\x9a\x99\x8f\xc6\xc7\x17\x34\xaa\x78\x5d\x41\x1f\x2c\xcc\xe6\xb6\xb5\x5e\xcd\xcc\x7f\xc2\x46\x4b\x44\xb8\x4e\x85\x6f\x6b\x7d\xa1\xc9\xd3\xa8\xbd\x9d\xcd\xcd\xb8\x57\x0e\xf2\xb1\xda\x61\x9b\x5c\x4b\x1a\xea\xd9\x9c\x4b\xd4\x0d\x73\xaf\xd2\xcb\x6f\xeb\x6d\xbb\xb1\xc6\x09\x92\xcd\x21\x79\xff\xad\x6e\xaf\xcd\xd9\xfb\x75\xe6\x7d\x45\x77\x11\x43\x76\xec\x56\x72\xbf\xe9\x33\xfb\x36\x3b\x41\x6b\xf3\xfc\x48\xab\xe7\xf4\x99\x39\x83\xbd\x3d\x4e\xf5\xb7\x8d\x07\x05\x3d\x08\x44\x40\x82\x8b\x80\x48\x15\x17\x71\xb4\xf4\xbf\x17\xc1\xaa\xa3\xc9\x4f\xf4\x36\x87\xb3\x03\x2a\xeb\x2e\x62\xca\xce\x2a\x4b\x20\x9a\xdd\x2b\xee\xde\x8b\xf8\x58\x33\x30\x6c\xdb\x36\x78\xcb\xb8\x83\x7b\x52\xbd\x0d\x20\x82\x93\xf4\xc8\xff\xac\xae\xf7\x5a\x2b\xe2\xc8\xaf\x26\xca\xec\x9d\x08\x9e\x00\xe4\xcc\xe1\xef\x32\xd4\xef\x7e\x92\x82\x12\xf7\xb6\x28\x8c\xef\x85\xb4\xa4\x4c\x0f\x88\x0a\x73\x6e\xe0\xc3\x5b\x63\x69\xb4\xde\xb1\xdc\x83\x96\x21\xc2\x62\xd9\x7e\x93\x92\x88\x74\x07\x36\x65\xa8\x08\x6e\x34\xb6\x9f\xa7\xfb\x74\x9a\xe8\xe5\xc7\x48\xa8\xa7\x1c\xd2\xbd\x1b\xa9\xcc\xcf\xe0\x2f\xe1\x7a\x93\x9d\x5e\x0e\xc9\x25\x87\x83\xb8\x68\x49\x97\xec\xbc\x84\x01\xdb\xd5\x55\x2e\x19\x2e\x9c\x82\xda\x9d\x46\x2f\x96\xca\x82\xe1\xc8\x0a\x57\x4c\xdf\x27\x33\xc5\x3b\xad\x3e\x58\x05\xd9\xe1\x88\x9a\x6e\xcf\xbe\x0f\xb4\xc6\x7b\xbb\x3e\x8c\x4d\x8b\x86\x83\xcd\x06\xd9\xef\x03\x30\x3f\x87\xea\x03\xd5\xfa\x61\x52\x56\x7d\x3c\xc2\xbf\x38\x37\x54\x4d\x35\x0e\x7d\xa7\x32\x44\x59\x69\xf9\x98\xfb\x12\x14\xd1\x65\x6f\x08\xa0\xf2\x8a\xd3\xc0\x5d\xa8\x67\xd6\xad\x0c\x02\xd2\xd4\x39\xe3\x99\x5e\xef\x2f\xf4\xb1\x90\x2a\x6e\x99\x57\x5f\xf8\xb9\x50\x4f\x48\x7b\x3e\x8a\xd3\xf1\xc5\xb7\x4b\xdd\xd8\x8b\x07\x75\x2d\xa9\x83\xf9\x6c\x94\x7d\xea\x92\x8d\x10\x9f\xcf\x53\x50\x1d\x06\x7a\x47\xb0\xeb\xeb\xec\xda\x6e\xfc\xeb\xaf\x30\x52\xc2\x4b\xff\x6b\x13\x97\xe2\x68\x32\xd1\xb8\xd7\x37\x37\xb7\xd0\x2e\x68\x0b\x67\x98\x20\x53\x2a\x44\xd9\x2e\xba\x11\xa1\xbb\xd3\x83\xcc\x97\x44\xbb\x1d\x28\x89\x56\x5c\xc8\x46\xef\x78\x3f\xc1\x3d\xfc\xf4\x53\x21\x7b\x6d\x7f\x91\x04\x5b\xf8\x81\x87\x1a\xe3\x4c\x14\xff\x5d\xf9\x28\xbe\xf2\x2b\x47\x8a\x00\xe2\x3f\x8e\x35\x97\x8b\x4d\x95\x4d\x1d\xbc\xeb\x11\x2c\x6f\xa8\xae\x45\x05\x8e\x18\x24\x36\x5c\x73\xd6\xda\xba\x64\xb2\xaa\xea\x92\xc9\xbf\x7c\x72\xa1\xff\x07\x00\x00\xff\xff\x47\xfc\xd6\x1f\x94\x2a\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10900, mode: os.FileMode(420), modTime: time.Unix(1472739164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x41\x4b\xc3\x30\x14\xc7\xcf\xcd\xa7\x78\xc7\x0d\x37\x50\x11\x2f\x3b\x55\x5b\x61\x58\xbb\x51\x3a\x70\xa7\xf0\x4c\xc2\x16\x6c\x93\x92\xbc\x3a\xeb\xa7\x97\x6d\xa5\x8c\x6d\xda\xe6\x96\xf0\xfb\xff\x78\x90\xff\x9b\x4e\xe1\xa6\xd4\x1b\x87\xa4\x60\x55\x31\xf6\x9c\xc5\x61\x1e\x43\x1e\x3e\x25\x31\xa0\x10\xb6\x36\xc4\x3d\x21\x69\x4f\x5a\x78\x18\x31\x00\x00\x94\xd2\x29\xef\xe1\xf4\x88\x2d\x3a\x14\xa4\x1c\x7c\xa1\x6b\xb4\xd9\x8c\x1e\x1f\xc6\x90\x2e\x72\x48\x57\x49\x32\x39\xe6\xbc\x57\xc4\x85\x95\xea\xbf\xdc\xdd\xfd\x79\xee\x30\x86\x72\x15\x3a\x6a\x38\x35\xd5\x3e\xee\x4b\x2c\x0a\x6d\xa8\x43\x21\x8a\x5f\xc2\x55\x92\xc3\xed\x31\x24\x51\x17\x0d\xd7\x46\xd8\x52\x41\x10\x7c\xe8\x4d\x3f\x6d\x6b\x1a\x86\xef\x94\xfa\xbc\xb4\x07\x3d\x78\xab\xef\xb5\x97\xd6\xd0\xb6\xd3\x0f\xc6\xbb\xe9\x7b\x78\x34\xa6\xc6\x62\xa8\xbd\xa5\x87\xce\x5e\x57\x12\x49\x49\x8e\x04\x41\xb0\x7f\x20\x5d\x2a\x4f\x58\x56\xb0\xd3\xb4\x3d\x5c\xe1\xc7\x1a\x75\xf6\xc7\xcb\x6c\xfe\x16\x66\x6b\x78\x8d\xd7\xa3\xb6\x5f\x93\x93\xc2\x4c\x2e\x4b\x30\x66\xe3\x59\xd7\xd8\x79\x1a\xc5\xef\x57\x1a\xcb\x5b\x17\xd7\xf2\x1b\x16\xe9\xd5\x4e\xb7\xc8\xde\x76\xba\x0f\x91\xdd\x19\xc6\xa2\x6c\xb1\x1c\x64\x9f\x1d\xd1\xbf\x56\x67\xc6\x7e\x03\x00\x00\xff\xff\x26\xb0\x63\x72\x6c\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 876, mode: os.FileMode(420), modTime: time.Unix(1472211234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x4b\xc3\x40\x10\x47\xcf\x99\x4f\xf1\x3b\x26\xd8\x82\x8a\x78\xe9\x29\x9a\x15\xc4\xd8\x96\x90\x1c\x7a\x0a\xe3\x66\x49\x17\x9a\xdd\xb2\x3b\xad\xf6\xdb\x8b\x5a\x64\x0f\xfe\x99\xf3\x7b\x0c\xbf\x37\x9f\xe3\x62\xb2\x63\x60\x31\xe8\xf6\x44\xf7\x8d\x2a\x5b\x85\xb6\xbc\xab\x15\x58\x6b\x7f\x70\xd2\xef\xec\x64\x25\x22\xa7\x8c\x87\x21\x98\x18\x91\x9e\xde\x72\x60\x2d\x26\xe0\xc8\xe1\x64\xdd\x98\xdf\xde\x14\x58\xae\x5a\x2c\xbb\xba\x9e\xd1\x07\xc3\x31\x1a\xe9\xb5\x1f\xcc\x5f\xde\xd5\x75\xe2\x01\xf8\x54\x27\x7e\xeb\xfd\xde\x04\x16\xeb\x1d\xb2\xec\xc5\x8e\xd6\xc9\x37\x87\x4a\x3d\x94\x5d\xdd\xe2\xf2\xeb\xd3\xc0\x76\x77\xea\xe5\x10\x9c\x3f\x9a\xf0\x3f\x3f\x79\x27\xdb\xc4\x38\xf3\xd9\x6f\xfc\xba\x79\x7c\x2e\x9b\x0d\x9e\xd4\x26\x3f\xd7\x98\x25\xf3\x0a\x2a\x16\x44\x69\xd5\xca\xbf\x3a\xa2\xaa\x59\xad\x7f\xac\xba\xa0\xf7\x00\x00\x00\xff\xff\x79\x84\x25\x20\x83\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 387, mode: os.FileMode(420), modTime: time.Unix(1464705819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xbd\x6e\xc3\x20\x14\x85\x77\x9e\xe2\xee\x8d\x87\xce\x9e\x68\xa1\x13\x31\x95\x05\x33\xa2\xa9\x95\x5e\x29\x40\x44\xaf\xfb\xf3\xf6\x55\xda\x46\xc1\xf4\x27\xb1\xd7\x83\xce\xa7\xcb\xf9\x9a\x06\xae\x02\x6e\xb3\xa7\x01\xec\x9e\x31\xae\x8c\xec\xc1\xf0\x1b\x25\xc1\x6f\x36\x69\x8c\xe4\x76\x18\x90\x9e\xa1\x97\x1d\x5f\x4b\xb8\xd5\xca\xae\x3b\x08\xfe\xcd\xa5\xfd\x90\x3d\x61\x8a\x60\xf4\x34\x70\x69\xa4\xf6\x72\xd8\xa3\xc7\xdd\xbb\xa3\x31\xc7\xf4\x32\xe4\x03\xed\x2b\xf9\x64\xce\x22\x85\x14\xe9\xa9\x62\x1d\xb3\x0b\x68\x0c\x80\x0b\xf1\xeb\x1f\x1d\x46\x78\xc0\x2d\x46\x82\x4e\x1b\xe8\xac\x52\x20\xe4\x1d\xb7\xca\x40\x73\xbd\x9a\x36\x4f\xe7\xcf\x69\x95\x87\xfe\xdb\x6b\x19\x2b\xc5\x89\xf4\x1a\x97\xaa\x3b\x2c\xf2\x43\xdf\x6c\x75\xdf\xd3\x9e\xcc\x1d\xf7\x5f\xa0\xae\x60\xd5\x36\xcf\xa8\x13\xbd\xbe\xff\xcb\xdd\xaa\x7a\x2f\x0d\xd5\x6f\x53\x0f\x2d\xfb\x08\x00\x00\xff\xff\xa7\x41\x23\x51\x25\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 805, mode: os.FileMode(420), modTime: time.Unix(1464875699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xc3\x30\x14\x84\x67\xfc\x2b\x6e\x4c\x44\x3a\x80\x10\x4b\xa7\x40\x3c\x44\x04\xa7\x44\x89\x44\xa7\xe8\x35\xb1\xc2\x93\x5a\xbb\xb2\x5d\x50\xfe\x3d\x4a\x0b\x6d\x15\x84\xd7\xcf\xdf\xd3\xdd\x2d\x16\xb8\xdd\xf1\xe0\x28\x68\x34\x7b\x21\x9e\x2b\x99\xd6\x12\x75\xfa\x54\x48\x90\xf7\x3a\x20\x12\x00\xc0\x3d\x2e\x6f\xc3\x83\xd7\x8e\x69\x9b\x88\x9b\x30\xee\xf5\x19\xb0\x09\x50\x65\x0d\xd5\x14\x45\x72\xf4\x3a\xdb\x5f\x70\xf7\x41\x8e\xba\xa0\x1d\x3e\xc9\x8d\x6c\x86\xe8\xee\x3e\x9e\x09\xec\xfd\x41\xbb\x7f\x85\xc7\x87\xbf\x42\x4b\xc6\x9a\x71\x67\x0f\x1e\x1b\x6b\xb7\x9a\xcc\xec\xcb\xaa\xca\x5f\xd3\x6a\x8d\x17\xb9\x8e\xb8\x8f\x45\xbc\x3c\x37\x6d\x54\xfe\xd6\x48\xe4\x2a\x93\xef\xa7\xc2\xbe\x9d\x32\xb7\xa7\x1c\xed\xb1\x5e\xa9\x7e\xb7\x98\x50\xf2\x93\x31\xc1\x04\xa7\x5b\xd7\x2b\x66\xf6\xcb\x08\x91\x55\xe5\xea\x7a\xc5\xe5\x77\x00\x00\x00\xff\xff\x34\x6b\x2a\x7c\x69\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 361, mode: os.FileMode(420), modTime: time.Unix(1469797719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_2_optionsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\xb1\x0e\x82\x30\x18\x45\xe1\xfd\x3e\xc5\x1d\x21\xca\xa2\x23\x53\x95\x0e\xc6\x0a\xa4\x29\x03\xe3\x1f\x6d\x94\x81\x96\xd4\x46\x7d\x7c\xc3\xa6\xe3\x19\x4e\xbe\xaa\xe2\x66\x9e\xee\x49\xb2\xe7\xb0\x00\x47\xab\x95\xd3\x74\xea\x60\x34\xe3\x92\xa7\x18\x9e\x28\x40\x06\x99\x3d\x5f\x92\xae\x0f\x49\xc5\x7e\x57\xb2\xed\x1c\xdb\xc1\x98\x2d\xc8\x9b\x64\x61\xf6\x9f\xbc\x46\x6f\x4f\x17\x65\x47\x9e\xf5\x58\xac\x57\x89\xb2\x06\xf0\x2b\x35\xf1\x1d\x80\xc6\x76\xfd\xbf\x54\x7f\x03\x00\x00\xff\xff\x26\x18\xd1\xf9\x8f\x00\x00\x00")

func migrations9_2_optionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_2_optionsSql,
		"migrations/9_2_options.sql",
	)
}

func migrations9_2_optionsSql() (*asset, error) {
	bytes, err := migrations9_2_optionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_2_options.sql", size: 143, mode: os.FileMode(420), modTime: time.Unix(1487307502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x5f\x4f\xc2\x30\x14\xc5\x9f\xe9\xa7\xb8\x6f\x6c\x11\x12\x1f\x8c\x0f\x90\x90\x4c\x57\xcd\xe2\x1c\x38\xb7\x44\x9e\x96\xae\x5c\x46\x95\xb5\xa4\x2d\x2a\xdf\xde\xc0\x64\x2c\x80\x02\x7b\x5a\x73\x7e\xf7\xcf\x39\xb9\xdd\x2e\x5c\x95\xa2\xd0\xcc\x22\xa4\x0b\x42\xee\x63\xea\x25\x14\x12\xef\x2e\xa4\xc0\x55\x59\x0a\x63\x84\x92\xe0\x90\x96\x98\x40\xfd\xe5\xa2\x30\xa8\x05\x9b\x77\xc8\xfa\xf9\x81\xab\x6c\xc6\xcc\x6c\xfd\xcf\x67\x4c\x33\x6e\x51\x3b\xb7\x37\x2e\x44\xc3\x04\xa2\x34\x0c\x77\xdc\x27\x9b\x2f\x11\x5a\xef\x46\xc9\x7c\x4f\x9e\xce\x99\xcd\xa6\x88\xd0\xca\x45\x21\xa4\xad\x65\xf0\xe9\x83\x97\x86\x09\x5c\x57\xe0\x02\x35\x47\x59\xb1\x27\xd0\x51\x1c\x3c\x7b\xf1\x18\x9e\xe8\xd8\x11\x13\x97\xb8\xfd\xda\x64\x1a\x05\x2f\x29\x85\x20\xf2\xe9\x5b\xc3\x6b\x96\xff\x9a\x19\x46\xcd\x04\xd2\xd7\x20\x7a\x84\xdc\x6a\x44\x70\xb6\x86\xdd\xfe\xb6\xd9\xb1\x2e\x8c\x73\xb5\x94\xf6\xbf\x46\x8e\xb3\xcb\xa4\x3b\x18\xb4\xa7\x5a\x95\x6d\xb7\xd7\xb3\xf8\x6d\xdd\x0e\xec\xc9\xd0\xb6\xaa\x56\xcf\x9a\x9d\xd9\xd5\x02\x2f\x5d\x60\x53\xb4\x9e\x23\xa4\xc5\x02\xf5\xf1\x45\x0e\xa8\x13\x0b\x19\x83\x17\x45\xb1\x29\xa8\x87\xfc\x15\x48\x45\x71\x35\x39\x83\x12\xc6\x2c\x51\x37\x03\x24\xcd\xfb\xf7\xd5\x97\x24\xc4\x8f\x87\xa3\x83\xfb\xef\x93\x9f\x00\x00\x00\xff\xff\xad\xa9\xe9\xc7\x29\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 809, mode: os.FileMode(420), modTime: time.Unix(1470062144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_2_options.sql": migrations9_2_optionsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_2_options.sql": &bintree{migrations9_2_optionsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

