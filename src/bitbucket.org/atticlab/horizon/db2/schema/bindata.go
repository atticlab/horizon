// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/4_account_statistics_updated_at_timezone.sql
// migrations/5_account_statistics_account_type.sql
// migrations/6_account_traits.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x7b\x6f\xe3\x36\x12\xff\x3f\x9f\x82\xe8\x3f\x76\x70\xce\xc2\xce\xfb\x81\x16\x70\x13\xa5\x6b\xd4\xab\xb4\xb1\x73\xdb\xc5\xe1\x40\xd0\x12\xe3\xa8\x2b\x8b\xaa\x24\xe7\xd1\xc3\x7d\xf7\x1b\xbd\x5f\xa4\x48\x39\x52\xae\x28\xb0\xb0\x34\x9c\xf9\xfd\x86\xc3\xe1\x70\xc4\x1c\x1c\xec\x1d\x1c\xa0\xdf\x98\x1f\xac\x3d\xba\xf8\x7d\x8e\x4c\x12\x90\x15\xf1\x29\x32\xb7\x1b\x17\xde\xed\xed\x2d\xb4\x25\xf2\x03\x12\xd0\x0d\x75\x02\x1c\x58\x1b\xca\xb6\x01\xfa\x11\x8d\xaf\xa2\x57\x36\x33\xbe\xd7\x9f\x1a\xb6\x15\x4a\x53\xc7\x60\xa6\xe5\xac\xe1\xc5\xe0\x61\x79\x7b\x3e\xb8\x4a\xd5\x39\x26\xf1\x4c\x6c\x30\xe7\x91\x79\x1b\x90\xc0\x7e\xe0\xc1\x3f\x3e\x48\x32\x27\xd1\xf1\x44\x41\xf5\xe3\xd6\x31\x02\x8b\x39\x78\x05\x9a\x68\xf8\xfe\x91\xd8\x3e\x2d\x99\x01\x05\x78\x43\x7d\x9f\xac\x23\x81\x17\xe2\x39\xa0\xeb\x2a\xc1\x4e\x89\x67\x3c\x61\x97\x04\x4f\xf0\xce\xdd\xae\x6c\xcb\x18\x21\x77\x8d\x0d\xa0\x6a\xb3\x54\xcc\xa4\x8f\x64\x6b\x03\x41\xb2\xb2\xa9\xef\x12\x83\x86\xa0\x07\x95\xb7\x2f\x56\xf0\x84\x99\x65\x16\x70\xec\xc5\x3e\xd4\xc9\x86\x5e\x22\x62\x18\x6c\x0b\x88\x6c\x6b\x63\x05\xfe\x15\x5a\xbe\xb9\xf0\x74\x39\xfd\x79\xae\x5d\xa1\x05\x30\xda\x90\xcb\x04\xc3\x15\xba\x7b\x71\xa8\x77\x89\x0e\x40\x2c\x33\x7a\x89\x22\xa7\x5f\xdf\x6b\xd3\xa5\x16\x0f\xac\x28\x45\xc3\x3d\x04\xff\x11\xd3\xf4\x80\x32\x78\x89\x78\xc4\x08\xa8\x87\x9e\x89\xf7\x06\xb4\x87\xa7\xc7\xfb\x48\xbf\x5b\x22\xfd\x61\x3e\x1f\xc5\xb2\xbe\x4f\x03\x70\xb6\x49\x39\xe2\x93\xc3\xaa\xf8\x86\xbc\x62\xe6\x52\x8f\x44\x7e\x0f\xe7\x75\x65\xad\x2d\x27\x40\x37\xda\xed\xf4\x61\xbe\x44\xe3\xca\x00\x93\x58\xf6\x1b\x8e\x86\xc9\x85\x37\xcc\x09\x9e\x5a\x88\x97\xc0\x58\x4e\x55\x7e\x78\x30\xa9\xe2\xcf\xe1\x28\x89\x17\x01\x49\x06\xec\xed\xc3\x7c\x73\x27\x3c\x5c\x21\x96\x1f\x58\x46\xd7\x93\x9e\x2b\xee\x7f\xe2\x63\xc7\x59\xb0\x68\x37\x54\x6d\xce\x61\x02\x55\x84\x5f\x28\xfd\xae\xac\x39\x11\x56\x54\x9d\xce\x9e\x9a\xee\x54\x5a\x51\x39\x71\x9c\x2d\xb1\x15\x75\x27\xc2\x8a\xaa\xb7\x2e\xa4\x5a\x6a\x62\x12\xa0\x30\x7b\xc2\x34\x6f\x5c\x14\xa6\x97\xe8\x27\xfa\x9b\x39\xb4\x32\x22\x8a\x07\xea\xb9\xc4\x0b\xde\x70\x00\x31\x86\xfc\x0d\xb1\x6d\xbe\x11\x71\xa4\x06\x1e\xe9\x3e\x35\xc5\x4a\x93\x08\xb5\xcc\x94\x7c\x99\xc0\x2a\xda\x2b\x22\x67\x86\x19\xdf\x25\x6f\xe1\x96\xe2\xa3\x15\x63\x36\x25\x4e\xc6\x22\x4a\xac\xdc\xb1\xb1\x6f\x5b\x0c\xe6\xb8\x61\x6b\x5a\x90\x4a\x21\xef\x77\xe4\x81\x54\x5f\x4e\x1e\x98\xd3\x35\x2c\xb4\x4a\x78\x18\x01\xf3\xf8\xab\x36\x16\xf0\xb7\xab\x3f\xa9\x01\xe1\x40\x5f\x83\x6c\x08\x24\xbd\xc2\x83\x0d\x0d\x48\xe1\xa7\xe1\x51\x7e\x0c\x85\x79\x35\x0f\xa3\xd4\x35\xe1\x93\xf0\xc1\x70\x00\x6e\x1c\x5c\x5e\x46\x8a\x90\xc3\x5e\x86\xfb\x8d\x29\x2e\x65\x88\x2d\x13\xfb\xf4\xaf\xd4\x71\x0b\xed\xf7\x07\x4d\xbf\x6e\xf0\x5d\xd1\x5b\xa9\x74\x4d\x5d\xc4\x64\xb1\x9c\xde\x2f\xd1\xd7\xd9\xf2\x33\x9a\x44\x0f\x66\x3a\x8c\xfb\xa2\xe9\x4b\xf4\xf3\xb7\xe4\x91\x7e\x87\xbe\xcc\xf4\x7f\x4e\xe7\x0f\x5a\xf6\x7b\xfa\x47\xfe\xfb\x7a\x7a\xfd\x59\x43\x93\xb6\xf0\xd1\xdd\x57\x5d\xbb\x01\x33\x12\x1e\xd3\xf9\x52\xbb\x17\xd3\xc8\xd4\xe4\x6f\x3e\x59\x66\x15\xcc\x9a\x79\x2e\x94\x2b\xeb\x78\x3b\xeb\x6a\x15\x56\xb4\xe6\x91\x18\xce\x70\x35\x0c\x5d\x17\x8a\xa6\xc6\xbc\x53\x0f\x81\x27\xd8\x81\x98\xf7\x86\x93\xe5\xde\x15\xee\xaa\x5a\x49\xfe\x68\xdc\xf9\xc4\xa0\xe9\xe3\x23\x2c\xab\xae\x31\x27\x5a\x13\xc8\x15\x26\x58\x44\x21\x95\x2b\x54\x34\x02\xc9\x1f\x98\x67\x52\xef\x07\x41\x32\x89\xd2\x3f\xff\x95\x09\x39\xc2\xb2\x7d\xf4\xa7\xcf\x9c\x95\xd8\x2b\x36\x35\x61\x6c\xd7\x5e\x49\xb4\x26\x5e\x81\x65\xb1\x85\x23\x80\x08\x69\x2c\x8c\x9f\x88\xff\xa4\x54\xcd\xb8\x1e\x7d\xb6\xd8\xd6\xc7\xd2\x81\x89\x93\x3c\xe2\xf8\x71\x0e\xc5\xd1\xb4\x64\x38\x44\x9b\x72\x3e\x2d\x6a\xf2\x86\xcd\x7c\x79\xfe\xad\x8c\x51\x4a\xda\x92\x22\x81\x23\x9b\x05\x52\xf2\x73\xe3\x32\x0f\xdc\x82\x9f\x61\x3e\xc2\x5d\xa4\xca\x65\x52\x0d\x29\x06\xc7\x21\xe0\x6d\x41\x02\xe1\x46\xe4\x23\xa5\xd8\x85\xdd\x56\xb0\xb9\xc3\xa1\x11\x83\x88\x60\xae\xa3\xd7\xb0\x7a\xa9\xf7\x2c\x12\x09\xeb\xef\xe0\x15\x87\x15\xab\x6f\xfd\x5d\x97\x12\xc7\x72\x3e\x6d\x61\x71\x64\x19\x96\x4b\xba\x4f\x52\x7c\x23\xb2\x5d\x5f\x7d\xc1\xcb\x53\x48\x5b\x07\x74\xb3\x5f\x2b\xd9\xe8\x7b\x13\xdf\x89\xe8\x8e\x3b\xbb\x92\xad\x7c\xbb\x6f\x16\xe7\xd4\x00\xb5\x01\xbd\x45\xaa\x6c\x43\x2d\x26\x48\xe1\xa6\x1b\xd6\x0b\x46\xd2\x0a\x08\xb7\xa4\x77\xee\x48\x49\xad\xcb\xb6\x9e\x41\xd3\x58\x17\x64\xff\x34\x53\x0d\xa0\x56\xad\x49\x28\xac\x8a\x22\xbd\x1e\x13\x83\xc8\x8c\x6a\x6a\x50\x99\x85\xf7\x24\x07\x11\xbe\x6e\xd3\x83\xc4\xca\x47\x25\x88\x96\x64\xdf\x99\x22\x24\xd6\xea\x49\x42\x34\xa0\x21\x4d\x14\x86\xf4\x18\xb9\x69\xb4\x16\x01\x2a\x17\x66\x49\x3d\x26\x29\xf7\x54\x33\x49\x73\x52\xe0\xca\xe6\xa6\xc5\x95\x0b\x11\x2e\x44\x51\xd5\xf7\x7f\xa9\xdb\xa0\x02\xa2\xce\x33\xb5\x01\x14\xef\xf8\x06\xaf\xa1\x8a\xda\xda\x81\xe0\x65\xd6\x21\xa8\xbf\x0a\xbd\x20\x7a\xed\x5b\x6b\x87\x04\x5b\x50\xcd\x71\xfb\xc5\xe9\xfe\xbf\xfe\x9d\x67\xe3\xff\xfc\x97\x97\x8f\x41\xa2\x52\xce\xd1\x0d\x8b\xdb\x54\xf5\xdc\x9d\xe9\x72\xc0\x0d\x8d\xd9\x3d\xd7\x55\x57\x93\x30\x03\x77\xe2\x15\x4c\x9c\xe9\x87\x33\x77\x0e\x01\xbc\xe6\x1c\x61\x61\x81\x25\x8b\x27\x31\xae\xb4\xe2\xe3\xf5\x72\xa7\xcf\x0b\xc7\x7a\x14\xbf\xba\xbe\x9b\x3f\x7c\xd1\xc3\xe9\x0b\x3f\x10\xa4\x8c\x1c\xf0\xed\x33\xb1\x87\x83\x6a\x7f\x00\x58\x7a\x74\x6d\xd8\xc4\xf7\xbb\xc7\x26\xa9\x51\x95\x00\x2b\x95\x3d\x1f\xc2\x42\xb8\xa1\xb6\xe2\x21\xc9\xcd\x7c\x26\x37\x04\xd6\xc7\x23\xf3\xe4\x9f\x73\xd0\xcd\x74\x39\x95\x30\x94\x68\x15\x7c\x33\xe8\x40\x33\xa7\xc7\xfb\x1e\xad\xdc\x96\x69\x1b\x85\x8a\x9d\x38\x98\x4f\x89\xc2\x85\x36\xd7\xae\x97\x85\xaf\x77\x9f\xe0\xb8\xc8\x5f\x6f\x23\x34\x19\xc5\xdd\x60\xf1\xfc\x36\xb5\xe3\x54\xf8\xcd\xf4\x85\x06\x15\xcd\x4c\x5f\xde\xd5\x9a\x70\x51\xc9\xb2\x40\xc3\xc1\x04\x5b\x8e\x15\x58\x70\xb8\xf6\x23\x5d\x9f\xfc\xbf\x6c\x40\x37\x38\x1c\x4f\x4e\x0f\xc6\xe1\xff\x68\x72\x78\x79\x72\x76\x79\x3c\xfe\x74\x36\x3e\x1d\x9f\x1f\xfe\x63\x7c\x34\x00\xd0\x4a\xda\x0f\x41\xbb\x49\x5f\xcb\x21\xbe\x82\xf0\x67\x96\xd9\x68\x69\x72\x7e\x31\x3e\x6a\x63\xe9\x08\x93\xf5\x1a\xd6\x0c\xec\x6c\x98\xbe\xba\xd4\xf1\xa9\x8f\xc1\x97\x59\xfb\xae\xd1\xdc\xe1\xd1\xe9\xd1\x59\x1b\x73\xc7\xb8\xbe\x4e\x70\xbe\xb1\xe2\xb4\x9b\xdd\x68\xf5\xe8\x64\x3c\x39\x6f\x63\xf5\x84\x67\x35\x5b\x56\x10\x1d\x8d\xe6\x8e\xc7\x17\xe3\x8b\x36\xe6\x4e\x71\x79\xc9\x36\x6a\x3f\x39\x99\x9c\xb5\x22\x73\x86\xcb\x09\xac\x59\xfb\xc5\xf1\x51\xab\x78\x38\xaf\x68\xc7\xc1\x0b\xc3\x2f\xe4\xad\xd1\xca\xe9\xe1\xe4\x2c\xf5\x90\x60\x51\x36\x36\x9b\xdf\x91\xc6\x9a\xfa\xc1\x1d\xa8\xe5\x35\x54\x3b\x50\xab\xd0\xdb\x6a\x9f\x89\x77\x6b\xa7\xbc\x27\x3d\xab\x55\x17\x2a\x39\x5b\xd2\x3e\xe9\xc0\xe5\x4a\x7d\x83\xdd\x9d\xde\xf6\x88\xda\x85\xdb\x65\xc5\x50\x1b\xc7\x0b\x0f\xa4\x3b\x54\x04\xe5\x04\xe2\x7e\xa7\x6f\xa9\xc6\xeb\x3b\x7d\xb1\xbc\x9f\x42\x0a\x6a\x75\xce\xad\x97\xed\x25\x13\xd1\x89\x61\x7a\x73\x53\x50\xcf\x03\x81\x7e\xbb\x9f\x7d\x99\xde\x7f\x43\xbf\x6a\xdf\xd0\x30\xf9\xee\x34\x2a\x5c\xa7\x50\xb8\x07\xd2\x2b\x9b\xdc\x4c\x13\xa3\x0a\x18\x29\xab\x51\xfd\x8e\x81\xe4\x1a\x41\xaf\x24\x63\x13\x4d\x04\x0b\x20\xca\xe4\x2c\xb3\xe1\x33\x76\x2f\x98\x53\xed\x5c\xb8\x25\xd3\x52\xa4\x95\x1d\xb7\x17\xbc\x15\x1b\x3c\xd4\x3c\x18\x52\xec\x92\x3c\xdf\x07\x95\x66\x93\x3c\x66\x0a\x20\x95\x89\x0a\x33\x6b\x9f\x54\x45\x46\x9b\xc8\x36\x02\x95\xaf\x1e\x4e\x55\x1c\x27\x10\xd8\x42\x5e\x53\x9e\x33\xfd\x46\xfb\x63\x97\xbe\x64\x34\x50\x62\x04\x5c\xc0\xbb\x15\xf7\xb0\x98\xe9\xbf\xa0\x55\xe0\x51\x9a\x25\xb5\x1a\xfc\x55\x56\x4e\x76\x04\x35\x57\x18\xc2\xe2\x36\x54\xcb\xc0\x62\xe1\x51\xad\x63\xc9\x83\x1a\x36\x5e\xbb\xc3\x19\xb5\x71\x95\x40\x56\x9b\xbf\x3c\x6c\x71\x99\xdb\x1d\xba\x58\x9f\x1a\xbe\x4a\x9f\x79\x54\x6f\x29\x73\x97\x29\xa6\xe1\x81\x38\x7a\xff\x6e\xdc\x0f\xfa\x0c\xca\xb2\x04\x7e\x45\x79\x91\x44\x7a\x3d\xa4\x84\x9f\xf7\x31\x78\x94\xde\xf4\x10\x41\xcf\xdb\x6a\x9d\x82\xb6\x4c\x65\xb8\xf9\x47\xa7\x11\xf7\x7b\xb6\x84\x02\x73\xb1\xdb\x0f\x8b\x44\x73\x91\x88\xa0\x03\xba\x13\x2f\x3e\x9d\xe0\xb5\x2f\x3a\x89\x66\xc1\x5a\xd8\x91\x50\xf9\xeb\x62\x9d\x12\xf8\x30\xcc\x11\xac\x03\x46\x09\x95\x5c\xe3\xae\x13\xd3\x3c\x09\xd9\xfd\x1f\xb0\xd2\xf9\x3c\x94\x95\x17\x09\xa4\x57\x9b\x4a\x88\xf9\xf8\x8a\x3e\xef\x07\x64\xcd\x82\x5a\x02\xe5\xc1\x0d\xe2\xe9\x0a\xba\x0b\x80\x5c\xe3\xee\xa1\x2c\x09\xdb\xb8\xe7\x59\xed\x14\x61\x10\x4e\x2a\x80\x6e\x3d\x2e\x35\x57\x24\x9a\xdd\x66\x54\xaa\x4c\xc4\xaa\xbb\x0e\x9b\x26\x4b\x72\xfc\xd2\x49\x48\xb6\x90\x50\x5f\x78\x70\xec\x28\x98\x1a\x6d\x48\x77\x30\xee\x09\xb6\xac\x32\x59\xd6\xa1\xca\xec\x36\x5f\x2f\xd8\x79\x86\xa4\xf9\x25\x93\x54\x67\xd1\x6f\xd8\x94\x0c\xed\x92\x1e\xc5\xea\x2a\x17\x16\xfb\x9e\x84\xda\x05\x49\x29\x99\xca\x00\x75\x6a\x85\xfb\xaa\x1f\x34\x37\xc5\x1b\xb2\x32\x5e\x05\x59\x75\x4a\xbc\xbb\xb8\x1f\xc4\x8d\x7b\x0d\x58\x46\x92\x37\x48\x9d\x6d\x7a\xe2\xf8\x20\x86\xd9\x6d\x16\x19\x2b\xe1\x21\xb2\xac\x3a\x6f\x95\xf7\x9f\x20\xaa\xb6\xb8\x35\x60\xdb\x34\x51\x56\x5a\xae\x0d\x7a\xc9\x13\x4d\x06\x55\x18\xb5\x2a\x5f\x2a\xc6\xfa\xda\x3c\xeb\x66\x94\x98\xc8\xb7\xd0\x62\xbd\xd9\x7f\x80\xd5\xad\xed\x5c\xfb\x82\xb0\x49\xb3\xa2\x22\x3d\xc6\xe3\x15\x63\xdf\x3b\x9a\x81\x06\x0b\xd2\xe2\x65\x38\x4c\x2f\xce\x1e\xfc\xf4\x13\x1a\xf8\xcc\x86\x42\x20\xea\xd5\x87\x73\x92\xfc\xfd\xd6\xfe\xfe\x08\x89\x05\xc3\xa6\xbe\x92\xa0\xe5\xfb\x5b\xea\x89\x45\x57\x6c\xbb\x7e\x0a\x94\xcc\x97\x44\x9b\x01\x94\x44\x2b\x10\xf6\xd1\xd7\xcf\xda\xbd\x16\x07\x20\xfa\x11\x1d\x1d\xc9\x3e\x45\x58\x26\x7e\x2c\xf4\x5c\x6f\x7f\x55\x6a\xbb\x76\xf4\x09\x22\x31\x8e\x6e\xef\xee\xb5\xd9\x2f\x7a\xd6\x47\x45\xf7\xda\x2d\xd0\xd0\xaf\xb5\x45\xad\xc0\x2e\x87\xa4\xe8\x8f\xf0\x91\xc1\x36\xae\x4d\x03\x1a\x21\xfd\x5f\x00\x00\x00\xff\xff\xe9\x72\x3b\xbc\xb1\x3f\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16305, mode: os.FileMode(420), modTime: time.Unix(1465207061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x4b\xc3\x30\x1c\x47\xcf\xcb\xa7\xf8\x1f\x37\xdc\x40\x45\xbc\xec\x54\x6d\x84\x61\xed\x46\xe9\xc0\x9d\x42\x4c\x42\x1b\x5c\x93\xd2\xfc\x6b\x9d\x9f\xde\x6c\x2b\xa5\xe8\xb4\xcd\x31\xbc\xdf\x23\xb4\x6f\xb1\x80\xab\x42\x67\x15\x47\x05\xdb\x92\x90\xc7\x84\x06\x29\x85\x34\x78\x88\x28\x70\x21\x6c\x6d\x90\x39\xe4\xa8\x1d\x6a\xe1\x60\x4a\xc0\x1f\x2e\x65\xa5\x9c\x83\xfe\x11\x39\xaf\xb8\x40\x55\xc1\x07\xaf\x0e\xda\x64\xd3\xfb\xbb\x19\xc4\xeb\x14\xe2\x6d\x14\xcd\xcf\x3b\xe7\x14\x32\x61\xa5\xfa\x6f\x77\x73\xdb\xdb\x79\xe2\x34\x95\x5c\xef\x0f\x4c\x1b\x61\x0b\x05\x93\xc9\x9b\xce\xb4\xc1\x0e\x83\x90\x3e\x05\xdb\x28\x85\xeb\x79\x8f\xb6\x35\x8e\xc3\x1b\xa5\xde\x7f\xdb\x27\x03\x78\xab\x1f\xb4\x17\xd6\x60\xde\xe9\x47\xe3\xdd\xeb\x07\x78\x6e\x4c\xcd\xf7\x63\xed\x2d\x3d\xf6\xed\x75\x29\x7d\x1a\x92\x71\xf4\x9f\xe5\x78\x81\xba\x50\xbe\x87\xa2\x84\x46\x63\xee\x35\xa7\x1b\xf8\xb2\x46\xfd\xf8\xd9\x9b\x64\xf5\x12\x24\x3b\x78\xa6\xbb\x69\x1b\xcc\xbc\x57\xc0\x8c\xcc\x96\x5d\x6f\xab\x38\xa4\xaf\x17\x7a\x63\xed\x90\x69\xf9\x09\xeb\xf8\x62\x91\x2d\x72\xb4\xf5\x6b\x0e\x6d\x63\x08\x09\x93\xf5\x66\x94\x7d\x79\x46\xff\x0a\x7f\x49\xbe\x03\x00\x00\xff\xff\x90\xed\xa7\x46\x2a\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 810, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_account_statistics_updated_at_timezoneSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x2e\x49\x2c\xc9\x2c\x2e\xc9\x4c\x2e\x56\x80\x48\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x94\x16\xa4\x00\xf5\xa5\xc4\x27\x96\x28\x84\x44\x06\xb8\x2a\x94\x64\xe6\xa6\x02\x15\xe7\x16\x28\x94\x67\x96\x64\x80\xb9\x0a\x55\xf9\x79\xa9\xd6\x5c\x5c\xc8\xf6\xb8\xe4\x97\xe7\x51\xd5\xa6\xfc\xd2\x12\x64\xcb\x00\x01\x00\x00\xff\xff\x99\xce\x1e\x1a\xd4\x00\x00\x00")

func migrations4_account_statistics_updated_at_timezoneSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_account_statistics_updated_at_timezoneSql,
		"migrations/4_account_statistics_updated_at_timezone.sql",
	)
}

func migrations4_account_statistics_updated_at_timezoneSql() (*asset, error) {
	bytes, err := migrations4_account_statistics_updated_at_timezoneSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_account_statistics_updated_at_timezone.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_account_statistics_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\x3f\x4b\x04\x31\x10\x47\xfb\x7c\x8a\x29\x15\xef\xc0\xfe\xaa\x68\x22\x1c\xe6\xb2\x47\x4c\x8a\xad\x42\xc8\x06\x09\xee\x9f\x90\x19\x91\xfd\xf6\xae\x8b\x85\xb0\xc2\x36\x62\x3d\xc3\xe3\xfd\xde\xf1\x08\x77\x43\x7e\xad\x81\x12\xb8\xc2\x18\x57\x56\x1a\xb0\xfc\x41\x49\x08\x31\x4e\xef\x23\x79\xa4\x40\x19\x29\x47\x04\x2e\x04\x3c\x36\xca\x5d\x34\xc0\x7a\x4c\xb5\x84\x4a\xb3\xa7\xb9\x24\xc0\x21\xf4\x7d\x1e\x09\x74\x63\x41\x3b\xa5\x40\xc8\x27\xee\x94\x85\xfb\xd3\x1e\x59\x98\xe6\xba\xa0\xf5\x8b\x35\xfc\xac\xed\x2f\x2f\xbe\xbc\xa5\x79\x97\xf3\x65\x78\x35\xe7\x0b\x37\x2d\x3c\xcb\xf6\x26\x74\x5d\x4d\x88\x07\x08\x88\x89\x7c\x9c\xba\x74\xd8\xaa\xdf\x9e\x18\x63\x3f\x5b\x88\xe9\x63\xfc\x2f\xe5\x6f\xce\x5a\x75\x63\xf6\x17\x83\x97\x75\x9f\x01\x00\x00\xff\xff\xb2\xea\x86\xd6\xe8\x01\x00\x00")

func migrations5_account_statistics_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_account_statistics_account_typeSql,
		"migrations/5_account_statistics_account_type.sql",
	)
}

func migrations5_account_statistics_account_typeSql() (*asset, error) {
	bytes, err := migrations5_account_statistics_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_account_statistics_account_type.sql", size: 488, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_account_traitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x31\x6f\xf2\x30\x10\x86\x77\xff\x8a\xdb\x48\xf4\x7d\x6c\x55\x17\xa6\x14\x8c\x84\x9a\x02\x32\x61\x60\x8a\x2e\x8e\x1b\xae\x4d\x6c\xe4\x5c\x4a\xe9\xaf\xaf\x45\x69\x71\xab\x2e\xf5\x64\x9f\xef\xd1\xe9\x79\x6f\x3c\x86\x7f\x1d\x35\x1e\xd9\xc0\xf6\x20\xc4\x54\xc9\xac\x90\x50\x64\x77\xb9\x04\xd4\xda\x0d\x96\x4b\xf6\x48\xdc\x43\x22\x20\x1c\xaa\xa1\xa2\x86\x2c\xc3\x5a\x2d\x1e\x32\xb5\x83\x7b\xb9\x03\x25\xe7\x52\xc9\xe5\x54\x6e\x60\x4f\x3d\x3b\x7f\x2a\x2f\x74\x9f\x50\x9d\xfe\x3f\xa3\x55\xeb\xf4\x73\x49\x56\xbb\x8e\x6c\x53\x1e\xf0\xd4\x99\xd0\x00\x95\x73\xad\x41\x0b\xcb\x55\x01\xcb\x6d\x9e\xc3\x4c\xce\xb3\x6d\x5e\xc0\x3c\xcb\x37\x32\x66\xdd\xc0\x7f\x83\x45\x3a\xf9\x29\x35\xd4\xc4\x65\xeb\x9a\xab\xcf\x46\xaa\x45\x96\xc7\x3e\x1f\x33\x51\x07\x11\xd0\x7b\xf4\xe1\x66\x3c\xbc\xa0\x3f\x85\xd9\xc9\xed\xcd\x45\xa8\x1f\xaa\x27\xa3\x19\xd8\xbc\xf2\x17\x42\xce\x46\x85\xce\x30\x46\x4f\xed\x4d\x88\xba\x2e\x31\x40\xd4\x99\x9e\xb1\x3b\xc0\x91\x78\x1f\xcc\xce\x15\x78\x73\xd6\x5c\x65\x6a\xf3\x88\x43\xcb\x90\x58\x77\x4c\x52\xc0\xb8\x69\x14\xc2\x18\xa5\x67\xc3\x78\x8d\x33\x77\xb4\x42\xcc\xd4\x6a\xfd\xeb\x1a\x27\xdf\xbe\x3e\xc3\x98\x88\xf7\x00\x00\x00\xff\xff\x1a\x73\x85\xa0\x0a\x02\x00\x00")

func migrations6_account_traitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_account_traitsSql,
		"migrations/6_account_traits.sql",
	)
}

func migrations6_account_traitsSql() (*asset, error) {
	bytes, err := migrations6_account_traitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_account_traits.sql", size: 522, mode: os.FileMode(420), modTime: time.Unix(1468848466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3d\x4f\xc3\x30\x10\x40\xe7\xdc\xaf\xb8\x31\x11\xad\x04\x08\xb1\x74\x0a\xc4\x48\x88\xd0\x56\x51\x32\x74\x8a\x0e\xc7\x4a\x4f\xaa\xed\xca\xbe\x16\xfa\xef\x09\x50\x21\x0f\x7c\x78\x7e\xcf\x77\xf7\xe6\x73\xbc\xb0\x3c\x06\x12\x83\xdd\x1e\xe0\xbe\x51\x65\xab\xb0\x2d\xef\x6a\x85\xa4\xb5\x3f\x38\xe9\x77\x6c\x59\x22\xe6\x90\xd1\x30\x04\x13\x23\xa6\x4f\x6f\x29\x90\x16\x13\xf0\x48\xe1\xc4\x6e\xcc\x6f\x6f\x0a\x5c\xae\x5a\x5c\x76\x75\x3d\x83\x0f\x86\x62\x34\xd2\x6b\x3f\x98\xbf\xbc\xab\xeb\xc4\x9b\x88\x4f\xd5\xd2\x5b\xef\xf7\x66\xda\x90\xbd\xc3\x2c\x7b\xe1\x91\x9d\x7c\x73\x58\xa9\x87\xb2\xab\x5b\xbc\xfc\x9a\x34\x10\xef\x4e\xbd\x1c\x82\xf3\xc7\xe9\xeb\x7f\x79\xeb\x9d\x6c\x13\xe3\xcc\x67\xbf\xf1\xeb\xe6\xf1\xb9\x6c\x36\xf8\xa4\x36\xf9\xb9\xc6\x2c\x39\xaf\x80\x62\x01\x90\x56\xad\xfc\xab\x03\xa8\x9a\xd5\xfa\xc7\xaa\x0b\x78\x0f\x00\x00\xff\xff\x79\x84\x25\x20\x83\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 387, mode: os.FileMode(420), modTime: time.Unix(1464705819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x4e\xc4\x20\x14\x85\xf7\x3c\xc5\xdd\x3b\x5d\xb8\xee\x0a\x05\x57\x0c\x98\x06\xd6\x04\xc7\x66\xbc\xc9\x00\x93\x4a\xfd\x79\x7b\xad\xda\x94\xe2\x5f\xdb\xed\x21\xe7\xcb\xe5\x7c\x55\x05\x17\x1e\x8f\x9d\x4b\x2d\x98\x33\x21\x54\x68\xde\x80\xa6\x57\x82\x83\x3b\x1c\x62\x1f\x92\x3d\xa1\xc7\xf4\x08\x0d\x97\x74\xcf\xe1\x5a\x09\xb3\x97\xe0\xdd\x8b\x8d\xe7\xf6\xbd\x88\x31\x80\x56\xf3\xc0\xc6\x3e\xd5\xcb\x61\xf7\x0e\x4f\xaf\x36\xf5\x5d\x88\x4f\x6d\x37\xd0\x3e\x93\x0f\xe6\x2a\x92\x8f\x21\x3d\x14\xac\x31\x5b\x40\x23\x00\x94\xb1\x1f\xff\x68\x31\xc0\x1d\x1e\x31\x24\x90\x4a\x83\x34\x42\x00\xe3\x37\xd4\x08\x0d\xd5\xe5\x6e\xde\x9c\xce\x5f\xd3\xca\x0f\xfd\xb3\x57\x13\x92\x8b\x63\xf1\x39\x6c\x55\x37\x2c\xf2\x4d\xdf\x6a\x75\x5f\xd3\x4e\xe6\xc6\xfd\x37\xa8\xcb\x58\xa5\xcd\x7f\xd4\xb1\x46\xdd\xfe\xe6\x6e\x57\xbc\xe7\x86\xca\xb7\xb9\x87\x9a\xbc\x05\x00\x00\xff\xff\xa7\x41\x23\x51\x25\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 805, mode: os.FileMode(420), modTime: time.Unix(1464875699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x31\x4f\xc3\x30\x10\x85\x67\xfc\x2b\x6e\x4c\x44\x3a\x80\x10\x4b\xa7\x40\x3c\x44\x04\xa7\x58\xb1\x44\x27\xeb\x9a\x58\xe1\xa4\xd6\xae\x6c\x17\x94\x7f\x4f\xdd\x42\x5b\x15\x71\xeb\x7b\xdf\xe9\xbd\x37\x9b\xc1\xed\x86\x46\x8f\xd1\x80\xda\x32\xf6\x2c\x79\xd9\x71\xe8\xca\xa7\x86\x03\x86\x60\x22\x64\x0c\xf6\x47\x03\x9c\x6f\x45\x63\x30\x9e\x70\x5d\xb0\x9b\x38\x6d\xcd\x49\x20\x1b\x41\xb4\x1d\x08\xd5\x34\xc5\x81\xeb\xdd\x70\x96\xfb\x0f\xf4\xd8\x47\xe3\xe1\x13\xfd\x44\x76\xcc\xee\xee\xf3\x2b\x80\x42\xd8\xed\x0d\xff\x01\x8f\x0f\x7f\x01\x8d\xd6\xd9\x69\xe3\x76\x01\x56\xce\xad\x0d\xda\x2b\xcb\x42\xd6\xaf\xa5\x5c\xc2\x0b\x5f\x66\x34\xe4\x2c\x9f\x9f\x9a\x2a\x51\xbf\x29\x0e\xb5\xa8\xf8\xfb\xb1\x70\xd0\x29\xb3\x3e\xe6\xd0\x87\x7a\xad\xf8\xdd\x22\x49\xc5\x4f\xc6\x02\x92\x98\x7e\x5d\xae\x58\xb9\x2f\xcb\x58\x25\xdb\xc5\xe5\x8a\xf3\xef\x00\x00\x00\xff\xff\x34\x6b\x2a\x7c\x69\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 361, mode: os.FileMode(420), modTime: time.Unix(1469797719, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\x4d\x4f\xc2\x30\x18\x3e\xd3\x5f\xf1\xde\xe8\x22\x24\x1e\x8c\x07\x48\x48\xa6\xab\x86\x38\x07\x99\x5b\x22\xa7\xa5\x2b\x2f\x50\x65\x2b\x69\x8b\xca\xbf\xb7\x80\x8e\x05\x94\x8f\x9d\xd6\x3c\x4f\x9f\xaf\xb4\xdd\x86\xab\x42\x4e\x35\xb7\x08\xe9\x82\x90\xfb\x98\xf9\x09\x83\xc4\xbf\x0b\x19\x08\x55\x14\xd2\x18\xa9\x4a\xa0\xa4\x21\xc7\x50\x7d\xb9\x9c\x1a\xd4\x92\xcf\x5b\x64\x7d\x7c\xc7\x55\x36\xe3\x66\xb6\xfe\x17\x33\xae\xb9\xb0\xa8\xe9\xed\x8d\x07\xd1\x20\x81\x28\x0d\xc3\x1d\xef\x83\xcf\x97\x08\x8d\x37\xa3\xca\x7c\x0f\x9e\xcc\xb9\xcd\x26\xe8\x50\xa7\x2f\x4b\x5b\xc1\x10\xb0\x07\x3f\x0d\x13\xb8\xde\x12\x17\xa8\x05\x96\x5b\xee\x09\xea\x30\xee\x3f\xfb\xf1\x08\x9e\xd8\x88\xca\xb1\x47\xbc\x6e\x55\xb2\x1f\x05\xec\xb5\x56\x32\xcb\x7f\x5a\x0c\xa2\x7a\xf5\xf4\xa5\x1f\x3d\x42\x6e\xb5\x33\xa3\xbf\x4d\x9d\xcc\x11\x15\x2e\x84\x5a\xba\x50\x47\x84\x28\xdd\x8d\xd1\xee\xf5\x9a\x13\xad\x8a\xa6\xd7\xe9\x58\xfc\xb2\x5e\x0b\xf6\x60\x68\x5a\x55\xa1\x67\x79\x67\x76\xb5\xc0\x4b\x03\x6c\x2e\xad\x7d\xdc\xa2\x38\x45\xfd\x77\x90\x03\xd6\x89\x40\xc6\xe0\x45\x53\x6c\x2e\x54\x26\xff\x0d\xb2\x65\x09\x35\x3e\x83\xe5\x5c\x97\xa8\xeb\x03\x92\xfa\xc3\x0f\xd4\x67\x49\x48\x10\x0f\x86\x07\x0f\xbf\x4b\xbe\x03\x00\x00\xff\xff\x31\x90\xf6\x56\x22\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 802, mode: os.FileMode(420), modTime: time.Unix(1468848466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/4_account_statistics_updated_at_timezone.sql": migrations4_account_statistics_updated_at_timezoneSql,
	"migrations/5_account_statistics_account_type.sql": migrations5_account_statistics_account_typeSql,
	"migrations/6_account_traits.sql": migrations6_account_traitsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"4_account_statistics_updated_at_timezone.sql": &bintree{migrations4_account_statistics_updated_at_timezoneSql, map[string]*bintree{}},
		"5_account_statistics_account_type.sql": &bintree{migrations5_account_statistics_account_typeSql, map[string]*bintree{}},
		"6_account_traits.sql": &bintree{migrations6_account_traitsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

