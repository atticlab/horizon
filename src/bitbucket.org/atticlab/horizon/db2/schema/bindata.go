// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_2_options.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x6d\x6f\xdb\x38\x12\xfe\x5e\xa0\xff\x81\xd8\x2f\x76\x71\x4e\x2e\x6e\xda\xbc\x38\xc8\x02\xde\x44\x7b\x35\x2e\xb5\xdb\xd8\xb9\x6d\xb1\x58\x10\xb4\x44\xcb\xbc\x48\xa2\x56\xa4\x93\x78\x0f\xf7\xdf\x0f\x7a\x7f\x23\x45\xca\x52\x7a\x1f\x6d\x0d\x1f\x3e\x33\x1c\x0e\x47\x43\x8a\x47\x47\x6f\xdf\x1c\x1d\x81\x2f\x94\x71\x3b\xc0\xcb\xaf\x77\xc0\x42\x1c\xad\x11\xc3\xc0\xda\xb9\x7e\xf8\xf0\xed\x9b\x48\xe4\x76\xe7\xfa\xd8\x02\x9b\x80\xba\xb9\xcc\x13\x0e\x18\xa1\x1e\xb8\x3c\xfe\x78\x7c\x52\x14\x5b\xef\x81\x6f\xc3\x10\xa2\x2a\xf3\xf6\xcd\xd2\x58\x01\xc6\x11\xc7\x2e\xf6\x38\xe4\xc4\xc5\x74\xc7\xc1\x35\x38\xb9\x8a\x9f\x39\xd4\x7c\x14\xfc\x6d\x3a\x24\x94\xc7\x9e\x49\x2d\xe2\xd9\xe0\x1a\x0c\x1e\x56\xbf\x5e\x0c\xae\x32\x44\xcf\x42\x81\x05\x4d\xea\x6d\x68\xe0\x12\xcf\x86\x8c\x07\xc4\xb3\x19\xb8\x06\xd4\x4b\x51\xb6\xd8\x7c\x84\x9b\x9d\x67\x72\x42\x3d\xb8\xa6\x16\xc1\xa1\xc0\x06\x39\x0c\x97\x7b\x72\x89\x07\x5d\xcc\x18\xb2\x23\x89\x67\x14\x78\xc4\xb3\x13\x99\x80\x3e\x43\x86\xcd\x5d\x40\xf8\x3e\xc4\xdf\x6c\xae\x32\xdd\x30\x0a\xcc\x2d\xf4\x11\xdf\x82\x6b\xe0\xef\xd6\x0e\x31\x47\xa1\x39\x4c\xc4\x91\x43\xed\x48\xf0\xf6\x7e\xf1\x05\xcc\xe6\xb7\xc6\x37\x30\xfb\x15\x18\xdf\x66\xcb\xd5\x32\x91\x3d\xe6\x01\xb2\x30\xc4\x9b\x0d\x36\x39\x83\xeb\x3d\xa4\x81\x85\x03\xb8\xa6\xf4\xf1\xaa\xb9\x25\xf1\x2c\xfc\x02\xb7\x84\x71\x1a\xec\x21\x0f\x90\xc7\x50\xa4\x28\x83\xd4\x83\xc4\x6a\xd5\x9c\xfa\x38\x40\x59\x63\xbe\xf7\x71\x97\xe6\x39\x97\x6e\x3c\x5a\x36\x76\xb0\x65\xe3\x20\x6a\xc9\xf0\x9f\x3b\xec\x99\xed\xb4\x28\xb4\xf7\x03\xfc\x44\xe8\x8e\x25\xff\xc1\x2d\x62\xdb\x43\xb1\x7a\x80\x20\xae\x4f\x03\x8e\x03\x98\x4c\xb0\x83\x71\x0e\x36\xa8\xe9\x50\x86\x2d\x88\x78\x2b\x80\xd4\xaf\x0f\xf1\x29\x64\x9a\x74\xe7\x71\x06\x9f\x09\xdf\x86\x3e\x45\x38\x3b\x0c\xa0\xbd\xe2\xc5\xa6\xc8\xb2\x02\xcc\x54\x5d\x6f\xb9\x1f\xce\xde\x2d\x57\xf6\xb4\x65\xa5\x09\xb2\xde\xab\xc9\x6d\x33\x3f\xd4\x92\xa6\x31\x15\xaa\x96\x24\x8c\x43\xfe\x02\x7d\x0d\xd0\x50\x94\xfa\xda\xa2\x58\x5b\x2e\x8d\x79\x0a\x69\x93\xba\x2e\x61\x2c\x31\x99\xc6\x64\x2a\x37\x40\x8c\x61\x95\xef\x56\x5a\xc4\x3e\xa0\xe3\xb8\xc2\x86\x8a\x36\xeb\x74\x7a\xa9\xe5\x34\x94\xd5\xee\x36\xb2\x03\x83\x26\xb5\x30\x24\x8c\xed\x70\xa0\xa3\x60\x6a\x8b\x70\x29\x27\x8c\x13\x93\xa5\xd3\x02\x12\xeb\xe5\xea\xed\x9b\xe9\xdd\xca\xb8\x07\xab\xe9\x2f\x77\x46\xa1\xf5\x62\x7e\xf7\xbd\x38\xda\x95\x85\x0a\xfa\x28\xe0\xc4\x24\x3e\xf2\x38\x03\x51\xff\x37\x8b\xf9\x72\x75\x3f\x9d\xcd\x57\x05\x18\x55\x53\xe8\x3f\xe2\x7d\x2b\x12\xd9\x32\xd3\x96\x82\xb8\xa1\x3e\x01\x9b\x06\x3e\x74\x89\x9d\x2c\x72\x0d\x3d\x56\x24\xf5\xbb\xc8\x9d\xb1\x01\xbd\xe0\xb1\xda\xc0\x91\xeb\x34\x60\x46\xcf\x5b\xc0\xd5\x7c\xaa\x09\xbb\xee\x80\xad\x3b\x72\x88\x4b\x1a\x07\xb9\x2c\xd8\xdc\x81\xae\x57\xc7\xad\x6f\x16\x77\x0f\x9f\xe7\x80\x58\x71\xef\xb7\xc6\xaf\xd3\x87\xbb\x95\x2e\xb8\xc4\x5b\xbb\x40\x17\x9c\xa4\x0b\x4c\xec\x12\x0a\x84\xe8\xa7\xbe\xfd\xb2\x95\x76\x69\x7c\x7d\x30\xe6\x37\x07\x58\x1d\x12\x2b\xcc\x00\xdb\xf7\x5d\x42\xd1\x6c\x9e\xa7\xac\xfa\xc4\x25\x61\xa4\x15\x6d\x31\x86\x66\xe3\x24\xb3\xd3\x94\x4e\xd2\x38\x4d\xe9\x34\x79\x52\x88\x57\x02\x9c\xda\x78\x85\x98\xa5\x65\xa8\x5c\x5e\x8d\x1d\xc7\x2e\x2d\xd8\x52\x26\x21\x93\xa9\x85\x2b\xcd\x06\x71\xe8\x49\x85\x8d\x6f\x2b\x63\xbe\x9c\x2d\xe6\xc5\x95\x28\x34\x32\x6e\x92\xf0\x1d\xdf\x66\x7f\x3a\x99\xd2\x37\x9f\x8c\xcf\xd3\x5a\x97\x57\xf1\xfb\xfe\xd1\x11\x98\x23\x17\x4f\xd2\x7f\xc1\x6a\xef\xe3\x49\xd2\xe8\x0a\x2c\xcd\x2d\x76\xd1\x04\x1c\x5d\x81\xc5\xb3\x87\x83\x09\x38\x4a\xeb\x04\x37\xf7\xc6\x74\x65\xa4\xf0\x19\x68\x5c\x42\x28\x02\x27\x74\x12\xe4\x8c\xb1\x0e\x78\x49\xbd\xf9\x62\x55\x51\x11\xfc\x36\x5b\x7d\xca\x18\x94\x5f\xba\x2b\x2c\x72\xa4\x0a\x9f\x9b\xc5\xe7\xcf\xc6\x7c\xd5\xcc\x26\x96\x01\x8b\x79\x1d\x07\xcc\x96\x60\xf0\xe5\xee\xef\xbe\xbd\xfc\x7a\x07\xfc\x80\x9a\xd8\xda\x05\xc8\x01\x0e\xf2\xec\x1d\xb2\xf1\x40\x44\x27\x19\xc5\x3e\x6d\x12\x43\x96\x4d\x22\x1d\x94\x1c\xa4\xcc\xe4\x60\x6b\x24\xbd\x87\xc6\xb0\x10\x47\x20\x4c\x2a\xc1\x86\x06\x20\xfc\x9f\x78\x36\x08\xd3\x4e\x40\x37\x60\xf8\x88\xf7\x23\xf0\x84\x9c\x1d\x7e\x07\x7c\x44\x02\x96\x1a\x48\xbb\x9e\x12\x0a\x5a\x78\x83\x76\x0e\x87\x1c\xad\x1d\xcc\x7c\x64\x62\x70\x0d\x06\x83\xda\xf3\xe8\xe5\x91\x12\xab\x58\xf7\xa9\xd8\xa2\x32\xf7\x12\x4b\x44\x13\x35\xb7\x43\x3a\x3d\x24\x83\x12\x4f\xeb\x4a\xa6\x31\x7c\xfb\x06\x00\x00\x92\x4c\x19\x98\x5b\x14\x20\x93\xe3\x00\x3c\xa1\x60\x4f\x3c\x7b\x78\xf6\xe1\x5d\x34\x82\xf3\x87\xbb\xbb\x51\x22\x1c\x05\xa2\x30\x3d\x17\xc8\x8f\xdf\xd7\xe4\x5d\xf4\x52\x58\x09\xe8\x8e\x83\x35\xb1\x89\xc7\xd3\xf5\x17\x9c\x54\x5b\x58\x88\x38\x7b\x18\xb5\xd3\x90\x76\xa9\xc7\xb7\x6d\xe4\x4b\x7c\x88\x57\x6d\x30\x38\x1a\x0f\x26\x13\xe2\x71\x6c\xe3\x40\x4e\xad\x65\xc3\x22\x4b\xdd\xa6\x6f\xdf\xbc\x13\xcd\x0c\x41\xe8\xee\xc1\x23\x0a\x49\xee\x8f\xf0\x8a\xa8\x53\x1c\x84\x89\xc1\x3e\x7a\xbf\x03\xcc\x45\x8e\xa3\xe1\x17\xc4\x33\xa9\x8b\x35\x9d\x88\xee\xb8\x96\xf4\x33\xc6\x8f\xfa\xd8\x89\xb4\x2e\x78\x3a\xf6\x9a\xe8\xa9\xb8\x2e\x3c\xf2\xbc\x1d\x72\x74\xd1\x13\x69\x5d\xf0\x9d\x6f\x21\x1e\x95\xd5\x00\x27\x2e\x66\x1c\xb9\x3e\x08\x43\x56\xf4\x13\xfc\x45\x3d\xac\xf4\xd7\x28\x1d\xe9\xe2\xa2\x51\x0e\x9f\x78\x25\xb1\x52\xce\x15\xa6\x91\x13\x49\x66\x9f\xbe\x5f\xc6\x15\x07\x3d\x9f\x27\x0c\x22\x8f\x7a\x7b\x97\xee\x18\x58\x53\xea\x60\xe4\x69\x19\x23\x4d\xe3\xd2\x54\x26\x49\xfa\xb4\xcd\x92\x65\x89\x45\xb4\x98\xd3\x72\x35\xbd\x5f\xc5\x4b\xec\x38\xfe\x67\x36\xbf\xb9\x37\xa2\xe5\xf0\x97\xef\xe9\x7f\xf3\x05\xf8\x3c\x9b\xff\x6b\x7a\xf7\x60\xe4\x7f\x4c\xbf\x15\xfe\xb8\x99\xde\x7c\x32\xc0\xb8\xad\x0a\x60\xf1\xdb\xdc\xb8\x05\xbf\x7c\x57\xeb\x12\xbf\x93\x09\x55\xc9\x50\xe2\x7f\x8f\xa3\x42\x5d\x8d\x47\x21\x7b\xee\xe0\x5c\x85\xf7\x4c\x95\x87\x3d\xe2\xb8\xd2\x95\x7b\x87\xc8\x2b\x42\xa9\x28\x79\x00\xff\x66\xd4\x5b\x57\x1f\x6f\x1c\xc4\xe1\x06\xab\x67\x9e\x8f\x03\x13\x7b\x0a\x59\x89\x97\xd5\x5f\x44\x3a\xbb\x5a\x0d\xf2\x87\xf9\x9b\x52\x99\xc3\x9d\xae\x06\x9d\x7b\x5e\xfe\x48\xe2\x7e\xd5\xb7\xc3\x0e\x3e\x58\xad\xb9\xe5\x8e\xc8\xf1\x4b\xcd\x0d\x91\xef\x3b\xa4\x39\x24\x4b\xdc\xa2\xf6\xfe\xdb\x81\x73\x15\x4b\x39\x7b\x1a\xd3\x89\x54\xa6\x50\xd1\x96\xc5\xf2\x75\xb4\x23\x1b\xad\x76\xc4\xb3\xa1\x8f\xf6\x2e\x0e\xfb\x4f\x03\x70\x3a\x49\xa2\x5c\x5a\xdc\x38\x5e\xfc\xda\xb7\x8e\xb2\xe6\xd0\xf2\x51\x89\x3a\x9e\xdf\x0a\x53\xa7\x85\x89\x1e\x2c\x9d\x40\xa5\x86\xae\x0c\x00\x94\x1a\xbe\x5e\x8e\x91\x8a\xfe\x14\xed\x73\xfc\x24\x33\x7d\xd3\xb0\x58\x98\x23\xe2\xe8\x19\x25\xad\xed\xf4\x60\x94\x04\x2a\x35\x4a\xba\xab\x2a\x63\x59\xd8\xe9\xd4\x5b\xe3\x45\xdb\xac\x8d\x2e\x5c\xac\xd5\x45\x03\x93\x51\x91\x46\xfa\x7c\x60\x34\x1b\x64\x5b\x9d\x95\x00\x10\xbe\xfe\xd4\xd3\xb2\xb4\x51\x80\xc5\x99\x5c\xa9\x95\x2a\xed\x13\x09\x67\xee\x94\xfe\xae\xec\x05\xd7\x14\x1a\xd7\x1c\x8b\x72\xe4\x40\x93\x12\x8f\x49\x3c\x73\x83\x31\xf4\x29\x75\x24\x8f\xd7\x88\xe1\x68\xa5\x94\x05\x8d\xf0\x79\x80\x19\x0e\x9e\xa4\x32\xe1\xab\x19\x7f\x81\x61\x1a\xc2\xc8\x5f\x75\x31\x85\x53\x4b\xaa\x9d\x3d\xf8\xb8\xa4\xba\x9e\x07\x5c\x89\x42\x2d\x26\xbe\x3a\x98\x1c\xa4\x7d\x6f\xd9\x87\x56\x37\x3f\x2c\x23\x39\x48\xe9\xc3\xb3\x14\xad\xee\xf2\xcc\xa5\x59\x5c\x92\xcd\x08\xf6\x0a\xfa\xf4\x5c\x75\x7a\x50\x3e\x92\x23\xcb\x21\xc2\xd4\xc7\x4c\x2a\x49\xe1\x52\xd5\x79\xa5\x4a\xfe\x63\x74\x17\x98\x38\x75\x7f\xc9\xd2\x90\x55\x6b\x06\x93\x49\x4d\x42\x77\xa2\x48\xf7\x72\x7a\x30\xb7\x74\x8f\x4f\x3b\x54\x68\x8d\x42\xe7\x60\xa1\xda\x15\xeb\x2d\x5c\x28\x3a\xfa\xe1\x01\xa3\xa5\xe2\xdd\x43\x86\xa2\xc3\x7a\xd0\x90\x35\x50\x84\x8d\xd2\xee\x68\xbf\x9e\x9c\x79\x6f\x91\x9a\x7e\x02\x97\xe4\x6d\xaa\xc4\x50\x3b\xb2\x34\x87\x08\xb1\x70\xde\x7b\x43\x72\x83\xe4\xb3\x53\x96\x20\xfe\xdf\x32\x3c\xfe\x02\xb1\xf7\x84\x1d\xea\x63\xe1\x2b\x2a\x7f\x09\x93\xad\x9d\xc3\x65\x4f\x5d\xcc\x91\xec\x59\x68\x0d\xe9\x73\x46\x6c\x0f\xf1\x5d\x80\x45\x2f\x92\x97\x67\xef\x7e\xff\x23\x0f\xd3\xff\xf9\xaf\x28\x50\xff\xfe\x47\x2d\xf1\xc3\x2e\x8d\x5f\x39\xeb\x51\x3d\x03\xf3\xa8\x87\x1b\xe3\x7e\x01\xac\x8e\x93\x6a\x47\x5c\x0c\xd7\x74\xe7\x59\x2c\x1c\xc4\x8b\x00\x79\xb6\xec\x65\x9d\x58\xe9\x44\x4a\x0f\x2a\x68\x06\x81\x78\x26\x45\xe7\x4b\xc4\xa7\x1f\x96\xc6\x2a\xd3\xcb\xc3\x2f\xfc\x09\x39\xc3\x41\xb1\xfe\x36\x98\x4c\x02\x6c\x9b\x0e\x62\xec\xd5\xa8\x35\x9c\xef\x10\xf2\xab\x95\x6a\x7e\x04\xc9\x96\xe7\x5b\x84\xc4\xb5\xb2\xb7\x1f\xa9\x8c\xf6\x49\xa0\x46\x75\x14\x2b\x8b\x5c\xa1\x5b\xc4\x51\xb4\xef\xaa\xdc\xdb\x04\xb7\xd3\xd5\x54\xad\xa8\x1a\x5b\xb2\x53\xd6\x1d\xbf\xb6\xb3\xd1\x1e\x52\xa3\xa6\xbe\x34\x34\x86\x7b\x69\xdc\x19\x37\xab\xc2\x46\xf4\x31\xc3\x82\x99\x3d\x02\xe3\x51\x5c\xdc\x6a\x1e\x16\x49\x71\xfd\x50\xfd\xd4\x35\xdc\x8e\x4a\xd6\xc3\x83\xae\xa6\x4d\x75\x5c\x4d\x75\x67\xf3\xa5\x71\xbf\x02\xb3\xf9\x6a\x51\xab\xe5\x46\x09\xe2\x12\x0c\x07\x63\x48\x3c\xc2\x09\x72\x20\x8b\xe0\x8e\xd9\x9f\xce\x60\x04\x06\xef\x4f\xc6\x67\x47\x27\x17\x47\xa7\x27\x60\x3c\x9e\x7c\xbc\x98\xbc\xff\x70\x3c\x3e\xb9\x1c\x9f\x5f\xfe\xed\xe4\x74\x10\x72\xd7\x82\x7f\x0f\xe3\x03\xe2\xa5\xb9\xb8\xde\x43\x4e\x89\xd5\xd4\xd5\xfb\x0f\x97\x17\xe3\x71\xab\xae\x4e\x21\xb2\xed\x00\xdb\x88\x63\x88\x5f\x7c\xec\x31\xcc\xe0\x86\x06\x59\x2d\xb8\xa9\xbf\x0f\x67\x17\x1f\xcf\xcf\x5a\xf5\x77\x0e\xcb\x41\xa2\x09\xfe\xe3\xe9\xf8\xe4\xfc\xa2\x15\xfc\x45\x05\x1e\xf2\x67\x0a\x9f\xd1\xbe\xa9\x9b\xb3\x8b\xd3\xf1\xf8\x43\xab\x6e\x2e\xe1\x38\x29\x1c\x37\x01\x9f\x9f\x9f\x5d\x9c\x9d\xb7\x04\x2e\xec\x55\x34\x40\x5f\x9e\x7d\x38\x3d\xfb\x98\x42\xcb\x27\x44\xe3\x2e\x41\xe7\x98\xd9\x54\x18\xef\x0d\x5c\x54\x60\xee\x0d\x5c\xa3\xd0\x77\x68\x98\x3c\xac\xb0\xd4\x31\x74\xea\x25\x28\xba\xe1\x54\x51\x48\xea\x6d\x14\xb4\xea\x28\x5d\xc7\xa1\xed\xfb\x7a\x4f\x23\xa1\xca\xad\xda\x8e\x85\xf4\xed\xfc\xe0\x74\x45\x70\x0e\x3d\x3b\x9f\x97\x9e\x5b\x3f\xe4\x7d\xa5\x84\x1b\xbf\x33\x4d\x6f\x6f\x8b\x87\xe1\x05\x5d\x83\x2f\xf7\xb3\xcf\xd3\xfb\xef\xe0\x9f\xc6\x77\x30\x4c\xf6\x19\x47\x85\x23\x49\x9a\xc7\xa8\xfa\xd7\x23\xc7\x6e\xd4\xa5\x42\x41\xa9\xcf\xa8\x7e\x7c\xaa\xe1\xb0\x49\x7f\x5a\x85\x70\x62\x45\xb2\x8e\xca\xdc\x89\xa5\x3a\x9e\xd0\x1b\xb9\x1c\x53\xc8\xb0\xd2\xa5\x16\x4d\xe1\x07\x2e\x7d\x70\xad\x00\x0b\x09\x8b\x3a\xd7\x62\xad\xf3\x21\x50\x1f\x4a\x34\xf7\x23\xd4\x49\x83\x5a\x2b\x15\x9b\x3f\xb7\xea\x53\x49\x59\x4f\x8d\x6a\x36\xd2\xd3\x52\x54\xf1\x55\x5b\xa2\x61\xf4\x49\x9c\x76\xa1\x35\xfe\x80\xae\x19\x19\x2c\xe6\xa2\x83\xa1\x0f\xcb\xd9\xfc\x1f\x60\xcd\x03\x8c\xb3\xb8\x24\x0f\x3c\x82\x6f\xf8\x0e\x22\xfc\x30\x9f\x7d\x7d\xc8\x78\x8b\x91\x23\xc2\x51\xb1\xab\xc4\x31\x0e\x96\xb1\xdc\x08\x48\xe3\x64\xe1\xdb\xc4\x0e\x26\xcd\x51\x42\x36\xc2\x4a\x76\xd9\x80\xb1\xf0\xa8\x56\x25\x96\x71\x8c\xbe\xb2\xec\x46\x30\xaa\x9b\x6b\xb1\xab\x56\xdb\x65\xa4\x92\x4f\x44\xbb\xd1\x8a\x41\xf4\x88\x55\x0a\xfa\xa3\x7a\xe9\x5e\xb5\xe6\xf4\x33\xdc\x42\xc0\x50\x85\x42\x65\xb3\x44\x7c\x38\xcc\x8f\x06\x1e\xfd\xfc\x33\x18\x6c\x02\xea\x0e\x26\x13\x8e\x5f\xf8\xbb\x77\x23\x50\x7b\xce\x69\xf6\x54\x5f\xa5\x0e\x13\xad\x41\xaf\x6c\x92\xc9\x95\x13\x69\x17\x35\xcb\x94\xc8\x4e\xb8\x47\xca\xd6\xb5\x95\x49\xeb\x28\x5f\xac\xc4\xf5\xa0\x75\x14\x4a\xda\x8c\x65\x9c\x01\x95\x14\x10\x8c\x68\x9e\xc2\xa9\xa5\xe2\xa8\xd5\xc6\x03\x0e\x8f\x0f\xa5\x10\x5b\x07\x6d\xb2\x44\x7a\x28\x56\xba\x50\x17\x3f\xa0\xef\x4e\xae\x82\x58\x0c\x19\xe9\xf9\xb8\x12\x3d\xd1\x19\x98\x51\x7a\xce\xad\x89\x73\x5e\x71\xef\xce\x96\x58\xda\x3c\xf3\x3d\xf5\x91\xf0\xfc\x8e\x06\xf7\xf4\x0e\x84\x9e\xe8\x27\x70\x45\x0d\x24\xdb\x21\x07\x29\x24\xd7\x23\xbd\xf6\xa1\x27\x3d\x12\x38\xc9\x22\x73\xa0\x26\xe5\xf3\x12\x62\x5d\x0a\x97\x5d\x74\x08\x50\x05\x98\x43\x87\x42\x6d\xf6\xca\x2d\x1e\x3d\x58\xbe\x8c\x58\x64\x9e\x9e\xdc\x2c\x51\x95\x13\xab\xdf\x48\xd2\x0b\xbb\x1a\xac\x5e\x12\x22\xe3\x59\xb8\x63\xa5\xcb\x58\xe7\x30\x87\xbb\xab\x86\x6b\xaa\xaf\x94\xe9\x6e\x63\x65\x1f\x45\x0d\xb3\xc3\xe4\xda\x6f\x1a\x8d\x17\xea\xbc\x26\xfb\xf2\xd0\x88\x89\xb7\x33\x7b\xf1\x16\xa1\x0e\xce\xa3\x46\xd7\x22\x0e\x7e\xfb\x64\xdc\x1b\x60\x38\x94\x9d\xb7\xbf\x06\x3c\xd8\xe1\x77\x60\x71\x0f\x86\xd2\x63\xf5\x89\x90\x86\x19\xaa\x17\x31\xf5\x66\x81\x0a\xb0\x72\x25\x96\xbe\x25\x6a\xdc\x3c\xd5\x1b\x69\x11\xba\x32\x78\x66\x92\xed\xe8\xbf\xc2\x44\x29\xa1\x1f\x1a\xf4\xf5\xef\x1a\x7b\x0d\xb3\xd7\x0e\xb1\x2b\xb5\xa8\x34\x68\xa7\x53\xf1\x0a\xb6\x57\x1c\x8d\xe2\x57\x0c\x2a\x85\x0a\xb2\xed\x74\x11\x5e\x4d\xf7\x8a\x4a\x09\xbf\xd1\x50\x69\x27\x6a\xd4\x4e\xcd\xec\x06\xbf\x57\x54\x2d\x3b\x38\xa8\x52\xa7\xb1\x76\xa4\xb8\xc1\xb0\x6f\xfe\xd5\x0e\x84\xf9\xea\x21\x31\xa0\xf1\x12\xc7\xde\x82\x40\x53\x2f\x3a\xaa\xb4\x4e\xbc\x04\x57\x5b\xbe\x96\x32\x95\x05\x50\xaa\x82\xde\x1a\x28\xb8\xd2\xb3\x6f\x5f\xaa\x77\xd1\x29\x41\x6f\xba\xcc\xb4\x83\xcd\x1b\x60\x95\xf9\xc6\x70\x98\x7e\x90\x10\x15\x7f\x18\x75\x92\x0f\x0c\xeb\xd5\x24\x99\x60\xad\xa0\x24\x13\xac\xd4\x94\x6a\xa2\x6b\xba\xb3\xb7\x5c\xab\xfb\x92\x68\x33\x81\x92\x68\xb5\xac\x95\xe6\x99\x91\x6b\x5e\x83\xd3\xd3\xca\xb8\xc9\x2e\x03\x06\x26\x75\x7d\x07\x73\x9c\x0e\xc8\xff\x02\x00\x00\xff\xff\x74\xdf\xc9\x95\x3d\x58\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 22589, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\xdd\x6f\xdb\xc8\x11\x7f\x37\xe0\xff\x61\x70\x2f\xb2\x51\xbb\xbd\xe0\x8a\xc3\x55\x86\x0f\x50\x6c\xa6\x11\x2a\x53\x89\x3e\x9a\x04\x87\x03\xb1\x22\x47\xd4\xd6\xe4\x2e\xb3\xbb\x74\xa4\x2b\xfa\xbf\x17\xfc\x14\xbf\x96\xa4\x14\xc9\xf7\xe0\x07\x93\xb3\x33\xf3\x9b\x99\xfd\xcd\x2c\x57\xb7\xb7\xf0\x17\x9f\xba\x82\x28\x84\x65\x70\x79\x71\x7b\x1b\xfd\xc1\x07\x2e\x95\x2b\x70\xfe\x71\x02\x0e\x51\x64\x45\x24\x82\x13\xfa\xa9\xc0\xe5\xc5\xdc\x58\x80\x54\x44\xa1\x8f\x4c\x59\x8a\xfa\xc8\x43\x05\xf7\xf0\xe3\x5d\xf2\xce\xe3\xf6\x73\xc3\x63\xdb\xa3\x91\x3c\x32\x9b\x3b\x94\xb9\x70\x0f\x83\xe5\xe2\xdd\x2f\x83\xbb\x5c\x23\x73\x88\x70\x2c\x9b\xb3\x35\x17\x3e\x65\xae\x25\x95\xa0\xcc\x95\x70\x0f\x9c\x65\x5a\x36\x68\x3f\x5b\xeb\x90\xd9\x8a\x72\x66\xad\xb8\x43\x31\x12\x58\x13\x4f\x62\xd9\x92\x4f\x99\xe5\xa3\x94\xc4\x8d\x25\xbe\x11\xc1\x28\x73\xef\x22\x08\x29\x52\x93\xf8\x38\x84\xc0\x0b\x5c\xf9\xd5\xbb\x83\xc5\x2e\xc0\x21\x18\x9f\x17\x86\x39\x1f\x4f\xcd\x3b\x98\xdb\x1b\xf4\xc9\x10\x6e\xef\x60\xfa\x8d\xa1\x18\xc2\x6d\x16\x84\x87\x99\x31\x5a\x18\x7b\x61\x18\xbf\x03\x73\xba\x00\xe3\xf3\x78\xbe\x98\x67\x3a\xe1\xd3\x78\xf1\x1e\xe6\x0f\xef\x8d\xa7\x11\x04\xae\x65\x13\x45\x3c\x9e\xf8\x50\xf1\x62\xaf\xa9\xe2\xcf\xc3\xf4\xe9\xc9\x30\x17\xed\xde\x24\x32\x30\x35\xeb\x7a\x60\x3c\x87\xc1\x87\xc9\xdf\x02\x37\xca\x68\x20\xb8\x8d\x4e\x28\x88\x07\x1e\x61\x6e\x48\x5c\x1c\x34\xb9\xb3\x91\x8a\x0b\x3c\x69\x4c\x12\x95\xe5\x90\x84\x2b\x8f\xda\xed\xe1\x28\x7b\x72\x74\x34\x52\xeb\x51\x30\xa2\xaa\x06\xb5\x0b\x10\xd6\x5c\x40\xf4\x3c\xaa\x47\x89\x4a\x02\x5f\xc3\xd5\x33\xee\x6e\xe0\x85\x78\x21\x5e\x43\x40\xa8\x90\x59\x80\xe2\x32\x45\x22\xec\x8d\x15\x10\xb5\x81\xfb\xd4\xff\x9b\x6a\x6a\x23\x41\x07\xd7\x24\xf4\x94\xa5\xc8\xca\x43\x19\x10\x1b\xa3\x8a\x1f\xd4\xde\x7f\xa3\x6a\x63\x71\xea\x14\x8b\xb8\x9a\x0b\x1a\xf9\xb8\xb3\x88\x6d\xf3\x90\x29\x99\xc5\x62\x31\x7a\x3b\x31\xf6\x91\x48\x83\x99\x87\xe3\x0e\x16\xb9\xed\x61\x25\x47\xf1\xd2\x9a\x62\xb8\xba\xbc\x00\x00\xa0\x0e\xac\xa8\x4b\x99\x8a\xd3\x67\x2e\x27\x93\x9b\xe4\x05\x71\x1c\x81\x52\x82\xbd\x21\x82\xd8\x0a\x05\xbc\x10\xb1\xa3\xcc\xbd\xfa\xf9\xef\xd7\x99\x4c\xa2\xcc\x8a\x03\x4c\x99\x42\x17\x45\x55\xcf\x2a\xe6\x08\xca\x6c\x1e\xef\xf3\x80\xec\x22\x2e\x91\xb0\xe2\xdc\x43\xc2\x72\x71\x78\x34\xde\x8d\x96\x93\x05\xbc\x1b\x4d\xe6\x46\x69\x31\x0f\xd5\x51\xab\x3d\xea\x53\x85\x8e\x45\x64\x9c\xf0\xff\x48\xce\x56\x97\x17\xd7\x8d\x7b\x20\x0d\x0f\xae\xd7\x68\x9f\x21\xec\xa9\xde\x2c\xea\x95\x6c\x58\xda\x2c\x64\x82\x3c\x40\x41\x62\x1a\xd4\x8a\xfe\xc0\x85\x83\xe2\x07\x5d\x1e\xda\x72\xe4\xa0\x22\xd4\xeb\x17\x21\x0f\x1d\x17\xc5\xe9\x23\x94\xea\xcd\x22\x24\xf1\x6b\x88\xcc\xd6\xba\x9c\x88\x5b\x1b\x22\x37\xcd\x25\x5a\x5d\x10\x08\x7c\xa1\x3c\x94\x56\xe7\xca\x2c\x60\x82\x30\x49\x92\xde\x13\x67\x29\x77\x25\xab\xb5\x1f\xab\x36\xf6\x59\xea\xb9\xc0\xf6\xb8\x8c\x0a\x54\x41\xd4\x44\xa5\x22\x7e\x00\x11\x4b\x44\xed\x34\x7a\x02\x7f\x70\x86\xb5\x45\x02\x89\xea\x5c\x95\x0a\x87\x81\xd3\x5f\x38\xaf\xad\xec\x7f\x3f\xe0\x42\xa1\xb0\x5e\x50\x48\xca\x59\x0d\xd0\x9b\x5a\x95\x71\x45\x3c\xcb\xe6\x94\x49\x4d\x99\xae\x11\xad\x80\x73\x4f\xf3\x3a\x1a\x41\xac\x35\xea\xe9\x24\x7a\x2f\x50\xa2\x78\xd1\xca\xf8\x64\x6b\xa9\xad\x25\x51\x59\x92\xfe\x51\x17\xeb\xa8\xf0\x7d\x16\x03\x22\x14\xb5\x69\x40\xce\xc1\xc4\xcd\x66\x0a\xbc\xac\x41\x77\x00\x25\x74\xd3\xcc\x51\xa1\xb0\xa8\x63\x49\xfc\x9a\x45\x64\x6e\x7c\x5c\x1a\xe6\x43\x4b\x50\x2a\x71\xc8\x16\xf4\x33\x93\x40\x99\x2f\x46\xb3\x45\x32\x50\xbc\x49\x9e\x8c\xcd\x87\x99\x11\x37\xff\xb7\x5f\xb2\x67\xe6\x14\x9e\xc6\xe6\xbf\x47\x93\xa5\xb1\x7f\x30\xfa\x5c\x78\xf0\x30\x7a\x78\x6f\xc0\x9b\x93\x81\x86\xe9\x27\xd3\x78\x84\xb7\x5f\xba\xd1\x8f\x26\x0b\x63\x76\x20\xf8\x5c\x7d\x87\xf8\x5f\xa9\xd3\x0b\xd2\x19\xcb\xb8\x7b\xa4\x28\x32\xaa\x7e\xee\x08\x02\x8f\xda\x09\xc2\xb8\xa3\x7d\x77\x43\x4b\x9f\x49\x1e\x0a\x1b\xb3\xbd\xa0\x69\x1a\x19\xb1\x0d\x06\xc3\x61\x4d\xa2\xef\xae\x29\xe2\x3c\x2b\x85\xe8\x0c\x25\x99\xd0\x51\x48\xd3\x6a\x4d\x3a\xbe\x9b\x40\x74\x1e\x9e\x9c\x42\x3a\x0c\xbd\x3a\x89\x1c\x08\xfc\xfb\x69\xa4\xc3\x60\x9d\x48\x74\x0b\x3a\xa8\xa4\xb0\xec\xac\x05\x9d\xd3\x49\xd1\xcf\xfe\xe3\x5e\x3a\xe5\x75\x8d\x91\xbd\xd9\xa6\x9d\x36\x9a\x85\xf7\xd6\x5b\x46\x21\xa2\xef\xf4\xba\x71\xf2\x4f\x9b\x07\xd5\xd6\x42\xf6\x82\x1e\x0f\x10\x14\x6e\xeb\x04\xbf\x8d\x46\xb3\xd0\x53\xba\xb7\x3e\x46\xc7\xf1\xe6\x77\x51\x34\xb4\xef\x25\x75\x19\x51\xa1\xc0\xa6\x03\xe9\x3f\x7e\xbe\xfe\xed\xf7\x3d\x75\xff\xf7\x7f\x4d\xe4\xfd\xdb\xef\xb5\x31\x11\x7d\x9e\x1c\x5d\xeb\x4c\x9f\x2b\x63\x9c\x61\x6b\x2f\x28\x28\xab\xeb\xc9\xd0\x51\x1f\xad\x15\x0f\x99\x23\xa3\x24\xfe\x22\x08\x73\x31\x63\xce\xd2\x2e\xa3\x4e\xb6\xa7\x52\x0f\xfa\xf2\x41\xb2\x8f\xa6\xe6\xa4\x6b\x52\x80\x44\xfe\x61\x3a\x59\x3e\x99\x51\x86\xe7\xc6\x22\x87\xcb\x70\xab\x5e\x88\x77\x35\xe8\x35\x9c\x0c\x86\x43\x81\xae\xed\x11\x29\x1b\x9b\xc0\x29\xc1\x68\x5b\xdd\x41\x70\x3a\x48\xb2\x0b\x50\x47\x54\x82\x67\xdc\xed\x3f\x5e\x99\xf3\xc5\x6c\x34\x36\x5b\x40\x37\xf2\xe2\x81\xe9\x4c\x0a\x6c\xf4\xf8\x58\xb0\xd8\xc7\x4f\xf8\x30\x1b\x3f\x8d\x66\x5f\xe0\x5f\xc6\x17\xb8\xa2\xce\x71\x5d\xfc\xbc\x88\x75\x66\x5b\x31\xb7\xfa\xda\x0b\xf5\x2a\x9f\x77\x32\x68\x63\xf3\xd1\xf8\x7c\x5c\x7f\x8b\x97\x16\x54\xc2\xd4\x6c\xee\x76\xcb\xf9\xd8\xfc\x27\xac\x94\x40\x84\xab\x54\xf8\xa6\xd6\x49\x74\x0e\x47\x8d\xf1\x94\xde\xc6\x8d\xb6\x97\xab\xd5\xf6\xac\xf3\x30\x69\xc8\xa7\xf4\x31\xd1\xd8\xcf\xcb\xca\x38\x70\x53\x6f\xfc\xda\x0d\x60\xa1\xb5\xda\x25\x32\x27\xf0\x7e\x69\x8e\x3f\x2e\x33\x10\x15\xf5\x45\x28\xd9\x07\xc3\x12\x8a\xa6\xa3\xff\x4d\xf6\xe1\xaf\x0d\xc0\x9e\x89\x4f\xec\x3a\x75\x7a\x3b\xbd\x3f\x43\xdc\x34\x7e\xc3\xe8\x01\x84\x07\x56\x70\x2e\x2c\xa9\xee\x22\x1c\x4d\x03\x3d\x0a\x5d\x33\xa8\xfc\x6b\xe4\x6a\x77\x0e\x5c\x65\xf5\x45\x68\xd9\xd7\xd6\x12\x16\xbd\x97\xc5\x4d\x7e\x2e\x57\x6b\x36\xfa\xed\x6c\x8d\xd3\x94\x39\xb8\xb5\xaa\xb7\x1e\x16\x67\x56\x7a\xb1\x71\x6a\x04\x9d\x06\x8b\x70\xf2\x5b\x98\x32\xeb\x27\x82\x07\xe2\x39\x7d\x32\xda\x6c\x75\xa3\xc8\x12\x52\xa2\x6b\x8d\xca\xf8\x46\x4c\x09\x42\x55\x8f\xf0\x50\xe7\x1a\x3e\xbd\x37\x66\x86\xf6\x4e\xe9\x1e\x94\x08\x11\xa6\x33\xfd\xc5\x51\x22\xd2\x1d\xe1\x94\xca\x22\xd0\xd1\x11\xe1\x64\x7d\xab\xd5\x4a\x27\x97\x46\x42\x3d\xca\x23\xdd\xdd\x91\xda\xfc\x86\xe1\x4c\x08\x9a\x4c\x75\x12\x4d\x2e\x79\x18\x96\x73\x57\x7a\xc9\xd4\xb1\x6c\xa9\x57\x59\xb9\x4c\x39\x7f\x42\x6a\xd7\x37\x9d\x90\x2a\x0b\x0e\x03\x58\xb8\x58\x7b\xb5\x3c\x15\x2f\xf3\xba\xd0\x15\x64\x0f\x03\xd6\x74\x75\xf8\x6a\x08\x1b\xef\x2d\xbb\xa0\x36\x2d\x3a\x0c\x73\x36\x29\xbf\x1a\xce\xfc\x5b\x59\x17\xb6\xd6\xa3\x50\x59\xfd\xfe\x6e\xe2\x35\xe8\xa3\x6a\xad\x71\x94\x3c\x86\x44\xca\x8a\xcb\x9f\xed\xcf\xc4\x22\x6d\x26\xfb\xe0\x2a\xaf\x38\x1c\xe3\xf9\x5a\x6e\xdd\x50\x2f\x3c\xba\xc6\x1b\x9f\x1d\xd4\xf6\x7c\xe7\x92\x54\xb7\x66\x18\x3e\xf2\x64\xd2\x94\x9e\x96\xe4\x14\xa7\xef\xd7\xd8\x49\x75\x7b\xdf\x75\x16\x50\x82\x38\x98\xcf\x5a\xd9\x69\xdb\x5a\x71\xfe\x7c\xb2\x22\x6b\xb1\xd1\x39\xd5\x5d\x5d\x65\xf7\x95\xb7\xbf\xfe\x0a\x03\xc9\xbd\xf4\x37\x4b\x71\x79\x0e\x86\x43\x85\x5b\x75\x7d\x7d\x03\x7a\x41\x9b\x3b\xfd\x04\xa9\x94\x21\x0a\xbd\xe8\x8a\x87\xee\x46\xf5\x32\x5f\x12\x6d\x77\xa0\x24\x5a\x71\x21\x1b\xea\xe3\x3d\x06\xf7\xf0\xd3\x4f\x95\x24\xea\x7e\xa4\x0a\x36\xf7\x03\x0f\x15\x66\x09\x29\xfe\xc8\xf5\x91\x7f\x63\x97\x17\x8e\xe0\x01\xc4\x3f\xcb\x6b\xae\x1e\x9b\x48\x9b\x38\xd1\x71\xa0\x5d\xb2\xbc\xcd\x5a\x57\x15\x18\xa4\x9f\xdc\x01\xba\xb3\x7e\xd8\x2a\x94\x95\x58\xab\x50\x7e\xc2\xda\x4b\xfd\x3f\x00\x00\xff\xff\x9f\xe0\x51\xba\x23\x2c\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 11299, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xc1\x0a\x82\x40\x10\x86\xef\x0b\xfb\x0e\x73\x2c\xc2\x27\xf0\x14\x29\xe1\x45\xc3\x12\xba\x2d\xa3\x2e\x39\x87\x76\x96\x71\x20\x7c\xfb\x08\x0f\x69\x5e\xba\xce\xfc\x7c\xff\xff\x25\x09\x1c\x9e\xf4\x10\x54\x0f\x4d\xb4\xc6\x9a\x53\x9d\x1f\x6f\x39\x14\x65\x96\xdf\x61\xe0\xe8\xda\xc9\x0d\x4c\x3d\x54\x25\x0c\x34\x2a\xcb\xe4\x38\x7a\x41\x25\x0e\x2e\xa2\x28\x75\x14\x31\xe8\x08\xcd\xb5\x28\xcf\xd0\xaa\x78\x0f\xbb\x6d\x96\xfa\x7d\xfa\xcb\xd7\x99\xaf\x6b\xbe\x0a\x86\x11\xbb\x3f\x1b\x96\xe9\xb9\xc3\x9a\xa5\x57\xc6\xaf\xf0\xb9\x65\x75\x75\xd9\x7a\xa5\xeb\xc7\x77\x50\x6a\xcd\x3b\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xd1\x4b\xc3\x30\x10\xc6\x9f\x5b\xe8\xff\x70\x8f\x1b\x6e\xa0\x22\xbe\xec\xa9\xda\x0a\xc3\xda\x8d\xd2\x81\x7b\x0a\x67\x12\xb6\x60\x9b\x94\xe4\xea\xac\x7f\xbd\x6c\x86\x51\xdc\x74\xcd\x5b\x8e\xdf\xf7\xdd\x85\x7c\x37\x9d\xc2\x55\xad\x36\x16\x49\xc2\xaa\x89\xc2\x28\x7c\x2c\xd2\xb8\x4c\xa1\x8c\x1f\xb2\x14\x90\x73\xd3\x6a\x62\x8e\x90\x94\x23\xc5\x1d\x8c\xa2\x10\x00\x00\x85\xb0\xd2\x39\xe8\x1f\xbe\x45\x8b\x9c\xa4\x85\x0f\xb4\x9d\xd2\x9b\xd1\xfd\xdd\x18\xf2\x45\x09\xf9\x2a\xcb\x26\x5e\xe8\x9c\x24\xc6\x8d\x90\xff\x09\x6f\x6e\x4f\x84\x87\x49\xa4\x6d\xd0\x52\xc7\xa8\x6b\xf6\x7a\x57\x63\x55\x29\x4d\x47\x16\x92\xf4\x29\x5e\x65\x25\x5c\x7b\x95\x40\x55\x75\x4c\x69\x6e\x6a\x09\x41\xf0\xa6\x36\x03\x70\xd3\xd2\x40\x7e\x27\xe5\xfb\xa9\x7f\x70\x89\xf7\x0d\x2e\xfb\xd7\x46\xd3\xf6\xd8\x60\x38\x7f\x7c\xc1\x25\x01\x6a\xdd\x62\x35\xd8\xdf\xe3\x83\xe7\x6f\x1b\x81\x24\x05\x43\x82\x20\xd8\x17\x48\xd5\xd2\x11\xd6\x0d\xec\x14\x6d\x0f\x57\xf8\x32\x5a\xfe\xfe\xed\x65\x31\x7f\x89\x8b\x35\x3c\xa7\xeb\x91\xcf\xda\xa4\x97\x9d\xc9\x69\x1c\xc6\x51\x38\x9e\xf5\x12\x3c\xcf\x93\xf4\xf5\x4c\x82\x99\xb7\x63\x4a\x7c\xc2\x22\x3f\x9b\x71\x8f\xfc\xf8\xf5\x77\x24\x31\x3b\xbd\xaf\x25\xc5\x62\x39\xa8\xc3\xcc\xb3\x7f\xed\xd3\x2c\x0a\xbf\x03\x00\x00\xff\xff\x80\x2b\xbf\x1e\x84\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 900, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\xc1\x4b\xc3\x30\x14\xc7\xf1\x73\x03\xf9\x1f\xde\xb1\xc5\x0d\x54\xc4\xcb\x4e\xd5\x46\x10\xeb\x36\x4a\x7b\xd8\xa9\x3c\xd3\xd0\x05\x96\x64\xbc\xbc\x4d\xf7\xdf\x4b\xb1\x48\x0e\x2a\xe6\x18\x7e\x1f\x42\xbe\xcb\x25\x5c\x39\x3b\x12\xb2\x81\xee\x28\x85\x14\x8f\x8d\x2a\x5b\x05\x6d\xf9\x50\x2b\x40\xad\xc3\xc9\x73\x7f\xb0\xce\x72\x84\x5c\x8a\x0c\x87\x81\x4c\x8c\x90\x1e\xbd\x47\x42\xcd\x86\xe0\x8c\x74\xb1\x7e\xcc\xef\xef\x0a\x58\x6f\x5a\x58\x77\x75\xbd\x90\x62\x1a\x61\x8c\x86\x7b\x1d\x06\xf3\x17\xbc\xb9\x4d\x20\x00\x7c\x59\x87\x1f\x7d\x38\x1a\x42\xb6\xc1\x43\x96\xbd\xd9\xd1\x7a\xfe\x1e\x42\xa5\x9e\xca\xae\x6e\xe1\x7a\x7e\x6b\x40\x7b\xb8\xf4\x7c\x22\x1f\xce\x86\xfe\x01\x5c\xf0\xbc\x4f\xc8\x0c\xb2\x5f\xc1\xb6\x79\x7e\x2d\x9b\x1d\xbc\xa8\x5d\x3e\x27\x59\x24\x5f\x2c\xa4\x28\x56\x53\xce\x34\x70\x15\xde\xfd\x74\x57\x35\x9b\xed\x8f\x81\x57\x52\x7c\x06\x00\x00\xff\xff\x46\xb7\x65\xca\x91\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 401, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xd1\xbd\x6e\xc3\x20\x10\xc0\xf1\xdd\x92\xdf\xe1\xf6\xc6\x43\x67\x4f\xb4\xd0\x89\xd8\x95\x05\x33\xa2\xa9\x95\x9e\x14\x20\xa2\xe7\x7e\xbc\x7d\xe5\xb6\x51\x08\xe9\x47\xf0\x7a\xf6\xfd\x05\xfc\x9a\x06\xae\x1c\x6e\xa3\xa5\x11\xf4\xbe\xae\xea\x8a\x49\x25\x06\x50\xec\x46\x0a\xb0\x9b\x4d\x98\x3c\x99\x1d\x3a\xa4\x67\x18\x44\xc7\xd6\x02\x6e\x7b\xa9\xd7\x1d\x38\xfb\x66\xc2\x7e\x8c\x96\x30\x78\x50\xfd\xe9\xc0\x84\x89\xda\x82\xda\xa3\xc5\xdd\xbb\xa1\x29\xfa\xf0\x32\xc6\x39\xf7\x35\xf9\x8c\x96\xa5\x5c\xf0\xf4\x94\xc5\x0e\xb3\x4b\x72\x75\x05\xc0\x38\xff\xf1\x9e\x06\x3d\x3c\xe0\x16\x3d\x41\xd7\x2b\xe8\xb4\x94\xc0\xc5\x1d\xd3\x52\x41\x73\xbd\xca\x56\x8f\x57\x28\x5a\x4b\x0f\xfb\xe7\x62\x3b\x83\xa5\x84\x3c\xbc\xfa\xe5\x88\xf3\xcb\x9c\x41\x96\x23\x7e\xbf\xf1\xd1\xf0\x00\xb1\x04\x31\x89\xe5\xae\xff\x22\xf2\xa1\xbf\xff\x4d\x71\x95\xff\x90\x5a\x9d\x7d\x3c\x15\x69\xeb\xea\x23\x00\x00\xff\xff\xef\x83\x3f\x08\x38\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 824, mode: os.FileMode(438), modTime: time.Unix(1477928393, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x4f\x83\x30\x1c\xc5\xcf\x36\xe9\x77\x78\x47\x88\xec\xa0\x31\x5e\x76\x42\xe9\x81\x88\x65\x12\x48\xdc\x89\x74\xd0\xe0\x3f\xd9\xda\xa5\xed\x34\x7c\x7b\x83\xa8\x23\x8b\xf6\xd8\x5f\x7f\xcd\x7b\x6f\xb5\xc2\xf5\x81\x06\xa7\x82\x46\x73\xe4\x8c\xb3\xc7\x4a\xa4\xb5\x40\x9d\x3e\x14\x02\xca\x7b\x1d\x10\x71\x06\x00\xd4\xe3\x7c\x76\x34\x78\xed\x48\xed\x13\xce\xae\xc2\x78\xd4\xbf\x84\x4c\x80\x2c\x6b\xc8\xa6\x28\x92\xd9\xec\x6c\x7f\xe6\xdd\x9b\x72\xaa\x0b\xda\xe1\x5d\xb9\x91\xcc\x10\xdd\xdc\xc6\x97\x06\x79\x7f\xd2\xee\x5f\xe3\xfe\xee\x0f\xa3\x55\xc6\x9a\xf1\x60\x4f\x1e\x3b\x6b\xf7\x5a\x99\xcb\x37\x9b\x2a\x7f\x4e\xab\x2d\x9e\xc4\x36\xa2\x3e\xe6\x2c\x5e\x2f\x2a\x37\x32\x7f\x69\x04\x72\x99\x89\xd7\xb9\xb9\x6f\xa7\xe4\xed\x1c\xa6\xfd\x6a\x59\xca\x9f\x51\x26\x94\x7c\x07\x4d\x30\xc1\xf9\xb7\xe5\xa4\x99\xfd\x30\xd3\x5d\x56\x95\x9b\xe5\xa4\xeb\xcf\x00\x00\x00\xff\xff\x20\x01\xac\x41\x78\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 376, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_2_optionsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xe2\xe5\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xc8\x2f\x28\xc9\xcc\xcf\x2b\xe6\xe5\xd2\xe0\xe5\x52\x50\xc8\x4b\xcc\x4d\x55\x28\x4b\x2c\x4a\xce\x48\x2c\xd2\x30\x36\xd2\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\xd1\x01\xc9\xa6\x24\x96\x24\x2a\x94\xa4\x56\x94\x80\x79\x01\x41\x9e\xbe\x8e\x41\x91\x0a\xde\xae\x91\x1a\x20\x7d\x9a\xbc\x5c\x9a\xd6\x20\xf3\x79\xb9\x90\xed\x74\xc9\x2f\xcf\x03\x89\xb9\x04\xf9\x07\xa0\xda\x69\x0d\x08\x00\x00\xff\xff\x45\x35\x76\xee\x9b\x00\x00\x00")

func migrations9_2_optionsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_2_optionsSql,
		"migrations/9_2_options.sql",
	)
}

func migrations9_2_optionsSql() (*asset, error) {
	bytes, err := migrations9_2_optionsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_2_options.sql", size: 155, mode: os.FileMode(438), modTime: time.Unix(1481369963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xd1\x4e\xc2\x30\x14\x7d\x66\xc9\xfe\xe1\xbe\xb1\x45\x48\x7c\x30\x3e\x40\x42\x32\x5d\x35\x8b\x73\xe0\xdc\x12\x79\x5a\xba\x72\x19\x55\xd6\x92\xb6\xa8\xfc\xbd\x19\xe0\x9c\x80\x02\x7d\x6a\x7b\xce\x3d\xf7\x9e\x93\xdc\x6e\x17\x2e\x4a\x5e\x28\x6a\x10\xd2\x85\x6d\xd9\xd6\x6d\x4c\xbc\x84\x40\xe2\xdd\x84\x04\x98\x2c\x4b\xae\x35\x97\x02\x1c\xdb\x6a\xf1\x09\xd4\x27\xe7\x85\x46\xc5\xe9\xbc\x63\x5b\xd5\xfb\x0d\x57\xd9\x8c\xea\x59\x75\x67\x33\xaa\x28\x33\xa8\x9c\xeb\x2b\x17\xa2\x61\x02\x51\x1a\x86\x0d\xe2\x3b\x9d\x2f\x11\x5a\xaf\x5a\x8a\x7c\x17\x9f\xce\xa9\xc9\xa6\x88\xd0\xca\x79\xc1\x85\xa9\x71\xf0\xc9\x9d\x97\x86\x09\x5c\x6e\x99\x0b\x54\x0c\xc5\x86\x7c\x8c\x3b\x8a\x83\x47\x2f\x1e\xc3\x03\x19\x3b\x7c\xe2\xda\x96\xdb\x6f\xb8\x4d\xa3\xe0\x29\x25\x10\x44\x3e\x79\x69\x98\xce\xf2\xad\xa7\x61\xd4\x8c\x22\x7d\x0e\xa2\x7b\xc8\x8d\x42\x04\xe7\xdb\x77\xa5\xb7\x55\x3b\x24\x43\x19\x93\x4b\x61\xfe\x53\x72\x9c\x9f\x68\xba\x83\x41\x7b\xaa\x64\xd9\x76\x7b\x3d\x83\x9f\xc6\xed\xc0\x0e\x0c\x6d\x23\x6b\xf4\xb4\xe6\x99\x59\x2d\xf0\xdc\x09\xd6\x45\x55\x23\x2e\x0c\x16\xa8\x0e\x4f\xb2\xc7\x3a\x36\x91\xd6\x78\x56\x18\xeb\x82\xba\xcb\x5f\x91\x6c\x58\x4c\x4e\x4e\x60\x71\xad\x97\xa8\x7e\x45\x68\x5b\xcd\x7d\xf0\xe5\x87\xa8\xfe\xfc\x78\x38\xda\xdb\x87\xbe\x6d\x7d\x05\x00\x00\xff\xff\xd1\x16\x68\xd2\x3c\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 828, mode: os.FileMode(438), modTime: time.Unix(1477928463, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_2_options.sql": migrations9_2_optionsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_2_options.sql": &bintree{migrations9_2_optionsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

