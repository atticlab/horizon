// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/4_account_statistics_updated_at_timezone.sql
// migrations/5_account_statistics_account_type.sql
// migrations/6_account_traits.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x7b\x6f\xe3\x36\x12\xff\x3f\x9f\x82\xe8\x3f\x76\x70\xce\x22\x4e\xe2\x3c\xd1\x02\x6e\xa2\x74\x8d\x7a\x95\x36\x76\x6e\xbb\x38\x1c\x08\x5a\x62\x1c\x75\x65\x51\x95\xe4\x3c\x7a\xb8\xef\x7e\xa3\xf7\x8b\x14\x29\x47\xca\x15\x05\x16\x96\x86\x33\xbf\xdf\x70\x38\x1c\x8e\x98\x83\x83\xbd\x83\x03\xf4\x1b\xf3\x83\xb5\x47\x17\xbf\xcf\x91\x49\x02\xb2\x22\x3e\x45\xe6\x76\xe3\xc2\xbb\xbd\xbd\x85\xb6\x44\x7e\x40\x02\xba\xa1\x4e\x80\x03\x6b\x43\xd9\x36\x40\x3f\xa2\xc3\xab\xe8\x95\xcd\x8c\xef\xf5\xa7\x86\x6d\x85\xd2\xd4\x31\x98\x69\x39\x6b\x78\x31\x78\x58\xde\x9e\x0f\xae\x52\x75\x8e\x49\x3c\x13\x1b\xcc\x79\x64\xde\x06\x24\xb0\x1f\x78\xf0\x8f\x0f\x92\xcc\x49\x74\x3c\x51\x50\xfd\xb8\x75\x8c\xc0\x62\x0e\x5e\x81\x26\x1a\xbe\x7f\x24\xb6\x4f\x4b\x66\x40\x01\xde\x50\xdf\x27\xeb\x48\xe0\x85\x78\x0e\xe8\xba\x4a\xb0\x53\xe2\x19\x4f\xd8\x25\xc1\x13\xbc\x73\xb7\x2b\xdb\x32\x46\xc8\x5d\x63\x03\xa8\xda\x2c\x15\x33\xe9\x23\xd9\xda\x40\x90\xac\x6c\xea\xbb\xc4\xa0\x21\xe8\x41\xe5\xed\x8b\x15\x3c\x61\x66\x99\x05\x1c\x7b\xb1\x0f\x75\xb2\xa1\x97\x88\x18\x06\xdb\x02\x22\xdb\xda\x58\x81\x7f\x85\x96\x6f\x2e\x3c\x5d\x4e\x7f\x9e\x6b\x57\x68\x01\x8c\x36\xe4\x32\xc1\x70\x85\xee\x5e\x1c\xea\x5d\xa2\x03\x10\xcb\x8c\x5e\xa2\xc8\xe9\xd7\xf7\xda\x74\xa9\xc5\x03\x2b\x4a\xd1\x70\x0f\xc1\x7f\xc4\x34\x3d\xa0\x0c\x5e\x22\x1e\x31\x02\xea\xa1\x67\xe2\xbd\x01\xed\xe1\xe9\xc9\x3e\xd2\xef\x96\x48\x7f\x98\xcf\x47\xb1\xac\xef\xd3\x00\x9c\x6d\x52\x8e\xf8\xf8\xa8\x2a\xbe\x21\xaf\x98\xb9\xd4\x23\x91\xdf\xc3\x79\x5d\x59\x6b\xcb\x09\xd0\x8d\x76\x3b\x7d\x98\x2f\xd1\x61\x65\x80\x49\x2c\xfb\x0d\x47\xc3\xe4\xc2\x1b\xe6\x04\x4f\x2d\xc4\x4b\x60\x2c\xa7\x2a\x3f\x3c\x18\x57\xf1\xe7\x70\x94\xc4\x8b\x80\x24\x03\xf6\xf6\x61\xbe\xb9\x13\x1e\xae\x10\xcb\x0f\x2c\xa3\xeb\x49\xcf\x15\xf7\x3f\xf1\xb1\xe3\x2c\x58\xb4\x1b\xaa\x36\xe7\x30\x81\x2a\xc2\x2f\x94\x7e\x57\xd6\x9c\x08\x2b\xaa\x4e\x67\x4f\x4d\x77\x2a\xad\xa8\x9c\x38\xce\x96\xd8\x8a\xba\x13\x61\x45\xd5\x5b\x17\x52\x2d\x35\x31\x09\x50\x98\x3d\x61\x9a\x37\x2e\x0a\xd3\x4b\xf4\x13\xfd\xcd\x1c\x5a\x19\x11\xc5\x03\xf5\x5c\xe2\x05\x6f\x38\x80\x18\x43\xfe\x86\xd8\x36\xdf\x88\x38\x52\x03\x8f\x74\x9f\x9a\x62\xa5\x49\x84\x5a\x66\x4a\xbe\x4c\x60\x15\xed\x15\x91\x33\xc3\x8c\xef\x92\xb7\x70\x4b\xf1\xd1\x8a\x31\x9b\x12\x27\x63\x11\x25\x56\xee\xd8\xd8\xb7\x2d\x06\x73\xdc\xb0\x35\x2d\x48\xa5\x90\xf7\x3b\xf2\x40\xaa\x2f\x27\x0f\xcc\xe9\x1a\x16\x5a\x25\x3c\x8c\x80\x79\xfc\x55\x1b\x0b\xf8\xdb\xd5\x9f\xd4\x80\x70\xa0\xaf\x41\x36\x04\x92\x5e\xe1\xc1\x86\x06\xa4\xf0\xd3\xf0\x28\x3f\x86\xc2\xbc\x9a\x87\x51\xea\x9a\xf0\x49\xf8\x60\x38\x00\x37\x0e\x2e\x2f\x23\x45\xc8\x61\x2f\xc3\xfd\xc6\x14\x97\x32\xc4\x96\x89\x7d\xfa\x57\xea\xb8\x85\xf6\xfb\x83\xa6\x5f\x37\xf8\xae\xe8\xad\x54\xba\xa6\x2e\x62\xb2\x58\x4e\xef\x97\xe8\xeb\x6c\xf9\x19\x8d\xa3\x07\x33\x1d\xc6\x7d\xd1\xf4\x25\xfa\xf9\x5b\xf2\x48\xbf\x43\x5f\x66\xfa\x3f\xa7\xf3\x07\x2d\xfb\x3d\xfd\x23\xff\x7d\x3d\xbd\xfe\xac\xa1\x71\x5b\xf8\xe8\xee\xab\xae\xdd\x80\x19\x09\x8f\xe9\x7c\xa9\xdd\x8b\x69\x64\x6a\xf2\x37\x9f\x2c\xb3\x0a\x66\xcd\x3c\x17\xca\x95\x75\xbc\x9d\x75\xb5\x0a\x2b\x5a\xf3\x48\x0c\x67\xb8\x1a\x86\xae\x0b\x45\x53\x63\xde\xa9\x87\xc0\x13\xec\x40\xcc\x7b\xc3\xc9\x72\xef\x0a\x77\x55\xad\x24\x7f\x34\xee\x7c\x62\xd0\xf4\xf1\x11\x96\x55\xd7\x98\x13\xad\x09\xe4\x0a\x13\x2c\xa2\x90\xca\x15\x2a\x1a\x81\xe4\x0f\xcc\x33\xa9\xf7\x83\x20\x99\x44\xe9\x9f\xff\xca\x84\x1c\x61\xd9\x3e\xfa\xd3\x67\xce\x4a\xec\x15\x9b\x9a\x30\xb6\x6b\xaf\x24\x5a\x13\xaf\xc0\xb2\xd8\xc2\x11\x40\x84\x34\x16\xc6\x4f\xc4\x7f\x52\xaa\x66\x5c\x8f\x3e\x5b\x6c\xeb\x63\xe9\xc0\xc4\x49\x1e\x71\xfc\x38\x87\xe2\x68\x5a\x32\x1c\xa2\x4d\x39\x9f\x16\x35\x79\xc3\x66\xbe\x3c\xff\x56\xc6\x28\x25\x6d\x49\x91\xc0\x91\xcd\x02\x29\xf9\xb9\x71\x99\x07\x6e\xc1\xcf\x30\x1f\xe1\x2e\x52\xe5\x32\xae\x86\x14\x83\xe3\x10\xf0\xb6\x20\x81\x70\x23\xf2\x91\x52\xec\xc2\x6e\x2b\xd8\xdc\xe1\xd0\x88\x41\x44\x30\xd7\xd1\x6b\x58\xbd\xd4\x7b\x16\x89\x84\xf5\x77\xf0\x8a\xc3\x8a\xd5\xb7\xfe\xae\x4b\x89\x63\x39\x9f\xb6\xb0\x38\xb2\x0c\xcb\x25\xdd\x27\x29\xbe\x11\xd9\xae\xaf\xbe\xe0\xe5\x29\xa4\xad\x03\xba\xd9\xaf\x95\x6c\xf4\xbd\x89\xef\x44\x74\xc7\x9d\x5d\xc9\x56\xbe\xdd\x37\x8b\x73\x6a\x80\xda\x80\xde\x22\x55\xb6\xa1\x16\x13\xa4\x70\xd3\x0d\xeb\x05\x23\x69\x05\x84\x5b\xd2\x3b\x77\xa4\xa4\xd6\x65\x5b\xcf\xa0\x69\xac\x0b\xb2\x7f\x9a\xa9\x06\x50\xab\xd6\x24\x14\x56\x45\x91\x5e\x8f\x89\x41\x64\x46\x35\x35\xa8\xcc\xc2\x7b\x92\x83\x08\x5f\xb7\xe9\x41\x62\xe5\xa3\x12\x44\x4b\xb2\xef\x4c\x11\x12\x6b\xf5\x24\x21\x1a\xd0\x90\x26\x0a\x43\x7a\x8c\xdc\x34\x5a\x8b\x00\x95\x0b\xb3\xa4\x1e\x93\x94\x7b\xaa\x99\xa4\x39\x29\x70\x65\x73\xd3\xe2\xca\x85\x08\x17\xa2\xa8\xea\xfb\xbf\xd4\x6d\x50\x01\x51\xe7\x99\xda\x00\x8a\x77\x7c\x83\xd7\x50\x45\x6d\xed\x40\xf0\x32\xeb\x10\xd4\x5f\x85\x5e\x10\xbd\xf6\xad\xb5\x43\x82\x2d\xa8\xe6\xb8\xfd\xe2\x74\xff\x5f\xff\xce\xb3\xf1\x7f\xfe\xcb\xcb\xc7\x20\x51\x29\xe7\xe8\x86\xc5\x6d\xaa\x7a\xee\xce\x74\x39\xe0\x86\xc6\xec\x9e\xeb\xaa\xab\x49\x98\x81\x3b\xf1\x0a\x26\xce\xf4\xc3\x99\x3b\x87\x00\x5e\x73\x8e\xb0\xb0\xc0\x92\xc5\x93\x18\x57\x5a\xf1\xf1\x7a\xb9\xd3\xe7\x85\x63\x3d\x8a\x5f\x5d\xdf\xcd\x1f\xbe\xe8\xe1\xf4\x85\x1f\x08\x52\x46\x0e\xf8\xf6\x99\xd8\xc3\x41\xb5\x3f\x00\x2c\x3d\xba\x36\x6c\xe2\xfb\xdd\x63\x93\xd4\xa8\x4a\x80\x95\xca\x9e\x0f\x61\x21\xdc\x50\x5b\xf1\x90\xe4\x66\x3e\x93\x1b\x02\xeb\xe3\x91\x79\xf2\xcf\x39\xe8\x66\xba\x9c\x4a\x18\x4a\xb4\x0a\xbe\x19\x74\xa0\x99\xd3\xe3\x7d\x8f\x56\x6e\xcb\xb4\x8d\x42\xc5\x4e\x1c\xcc\xa7\x44\xe1\x42\x9b\x6b\xd7\xcb\xc2\xd7\xbb\x4f\x70\x5c\xe4\xaf\xb7\x11\x1a\x8f\xe2\x6e\xb0\x78\x7e\x9b\xda\x71\x2a\xfc\x66\xfa\x42\x83\x8a\x66\xa6\x2f\xef\x6a\x4d\xb8\xa8\x64\x59\xa0\xe1\x60\x8c\x2d\xc7\x0a\x2c\x38\x5c\xfb\x91\xae\x4f\xfe\x5f\x36\xa0\x1b\x1c\x1d\x8e\x4f\x0f\x0e\xe1\xff\x23\x34\x3e\xbd\x3c\x9c\x5c\x8e\x27\x9f\x2e\x2e\x4e\xcf\x8f\xce\xfe\x71\x78\x3c\x00\xd0\x4a\xda\x8f\x40\xbb\x49\x5f\xcb\x21\xbe\x82\xf0\x67\x96\x29\xb6\x74\xfa\xe9\xf0\xf0\x70\x72\x36\x6e\x63\xe9\x18\x93\xf5\x1a\xd6\x0c\xec\x6c\x98\xbe\xba\xd4\xf1\xa9\x8f\xc1\x97\x59\xfb\xae\xd9\xdc\xc9\x64\x72\xde\xc6\xdc\x09\xae\xaf\x13\x9c\x6f\xac\x38\xed\x66\x37\x5a\x1d\x1f\x1d\x4f\x4e\xdb\x58\x9d\xf0\xac\x66\xcb\x0a\xa2\xa3\xd1\xdc\xd1\xe4\xec\xe8\xa4\x8d\xb9\x53\x5c\x5e\xb2\x8d\xda\x8f\x27\x17\x67\xad\x62\xe3\x0c\x97\x13\x58\xb3\xf6\x8b\xc9\xd9\xa4\x8d\xf6\xf3\x8a\x76\x1c\xbc\x30\xfc\x42\xde\x1a\xad\x9c\x4c\xc6\x27\x17\x89\x15\xc1\xa2\x6c\x6c\x36\xbf\x23\x8d\x35\xf5\x83\x3b\x50\xcb\x6b\xa8\x76\xa0\x56\xa1\xb7\xd5\x3e\x13\xef\xd6\x4e\x79\x4f\x7a\x56\xab\x2e\x54\x72\xb6\xa4\x7d\xd2\x81\xcb\x95\xfa\x06\xbb\x3b\xbd\xed\x11\xb5\x0b\xb7\xcb\x8a\xa1\x36\x8e\x17\x1e\x48\x77\xa8\x08\xca\x09\xc4\xfd\x4e\xdf\x52\x8d\xd7\x77\xfa\x62\x79\x3f\x85\x14\xd4\xea\x9c\x5b\x2f\xdb\x4b\x26\xa2\x13\xc3\xf4\xe6\xa6\xa0\x9e\x07\x02\xfd\x76\x3f\xfb\x32\xbd\xff\x86\x7e\xd5\xbe\xa1\x61\xf2\xdd\x69\x54\xb8\x4e\xa1\x70\x0f\xa4\x57\x36\xb9\x99\x26\x46\x15\x30\x52\x56\xa3\xfa\x1d\x03\xc9\x35\x82\x5e\x49\xc6\x26\x9a\x08\x16\x40\x94\xc9\x59\x66\xc3\x67\xec\x5e\x30\xa7\xda\xb9\x70\x4b\xa6\xa5\x48\x2b\x3b\x6e\x2f\x78\x2b\x36\x78\xa8\x79\x30\xa4\xd8\x25\x79\xbe\x0f\x2a\xcd\x26\x79\xcc\x14\x40\x2a\x13\x15\x66\xd6\x3e\xa9\x8a\x8c\x36\x91\x6d\x04\x2a\x5f\x3d\x9c\xaa\x38\x4e\x20\xb0\x85\xbc\xa6\x3c\x67\xfa\x8d\xf6\xc7\x2e\x7d\xc9\x68\xa0\xc4\x08\xb8\x80\x77\x2b\xee\x61\x31\xd3\x7f\x41\xab\xc0\xa3\x34\x4b\x6a\x35\xf8\xab\xac\x9c\xec\x08\x6a\xae\x30\x84\xc5\x6d\xa8\x96\x81\xc5\xc2\xa3\x5a\xc7\x92\x07\x35\x6c\xbc\x76\x87\x33\x6a\xe3\x2a\x81\xac\x36\x7f\x79\xd8\xe2\x32\xb7\x3b\x74\xb1\x3e\x35\x7c\x95\x3e\xf3\xa8\xde\x52\xe6\x2e\x53\x4c\xc3\x03\x71\xf4\xfe\xdd\xb8\x1f\xf4\x19\x94\x65\x09\xfc\x8a\xf2\x22\x89\xf4\x7a\x48\x09\x3f\xef\x63\xf0\x28\xbd\xe9\x21\x82\x9e\xb7\xd5\x3a\x05\x6d\x99\xca\x70\xf3\x8f\x4e\x23\xee\xf7\x6c\x09\x05\xe6\x62\xb7\x1f\x16\x89\xe6\x22\x11\x41\x07\x74\x27\x5e\x7c\x3a\xc1\x6b\x5f\x74\x12\xcd\x82\xb5\xb0\x23\xa1\xf2\xd7\xc5\x3a\x25\xf0\x61\x98\x23\x58\x07\x8c\x12\x2a\xb9\xc6\x5d\x27\xa6\x79\x12\xb2\xfb\x3f\x60\xa5\xf3\x79\x28\x2b\x2f\x12\x48\xaf\x36\x95\x10\xf3\xf1\x15\x7d\xde\x0f\xc8\x9a\x05\xb5\x04\xca\x83\x1b\xc4\xd3\x15\x74\x17\x00\xb9\xc6\xdd\x43\x59\x12\xb6\x71\xcf\xb3\xda\x29\xc2\x20\x9c\x54\x00\xdd\x7a\x5c\x6a\xae\x48\x34\xbb\xcd\xa8\x54\x99\x88\x55\x77\x1d\x36\x4d\x96\xe4\xf8\xa5\x93\x90\x6c\x21\xa1\xbe\xf0\xe0\xd8\x51\x30\x35\xda\x90\xee\x60\xdc\x13\x6c\x59\x65\xb2\xac\x43\x95\xd9\x6d\xbe\x5e\xb0\xf3\x0c\x49\xf3\x4b\x26\xa9\xce\xa2\xdf\xb0\x29\x19\xda\x25\x3d\x8a\xd5\x55\x2e\x2c\xf6\x3d\x09\xb5\x0b\x92\x52\x32\x95\x01\xea\xd4\x0a\xf7\x55\x3f\x68\x6e\x8a\x37\x64\x65\xbc\x0a\xb2\xea\x94\x78\x77\x71\x3f\x88\x1b\xf7\x1a\xb0\x8c\x24\x6f\x90\x3a\xdb\xf4\xc4\xf1\x41\x0c\xb3\xdb\x2c\x32\x56\xc2\x43\x64\x59\x75\xde\x2a\xef\x3f\x41\x54\x6d\x71\x6b\xc0\xb6\x69\xa2\xac\xb4\x5c\x1b\xf4\x92\x27\x9a\x0c\xaa\x30\x6a\x55\xbe\x54\x8c\xf5\xb5\x79\xd6\xcd\x28\x31\x91\x6f\xa1\xc5\x7a\xb3\xff\x00\xab\x5b\xdb\xb9\xf6\x05\x61\x93\x66\x45\x45\x7a\x8c\xc7\x2b\xc6\xbe\x77\x34\x03\x0d\x16\xa4\xc5\xcb\x70\x98\x5e\x9c\x3d\xf8\xe9\x27\x34\xf0\x99\x0d\x85\x40\xd4\xab\x0f\xe7\x24\xf9\xfb\xad\xfd\xfd\x11\x12\x0b\x86\x4d\x7d\x25\x41\xcb\xf7\xb7\xd4\x13\x8b\xae\xd8\x76\xfd\x14\x28\x99\x2f\x89\x36\x03\x28\x89\x56\x20\xec\xa3\xaf\x9f\xb5\x7b\x2d\x0e\x40\xf4\x23\x3a\x3e\x96\x7d\x8a\xb0\x4c\xfc\x58\xe8\xb9\xde\xfe\xaa\xd4\x76\xed\xe8\x13\x44\x62\x1c\xdd\xde\xdd\x6b\xb3\x5f\xf4\xac\x8f\x8a\xee\xb5\x5b\xa0\xa1\x5f\x6b\x8b\x5a\x81\x5d\x0e\x49\xd1\x1f\xe1\x23\x83\x6d\x5c\x9b\x06\x34\x42\xfa\xbf\x00\x00\x00\xff\xff\xf0\x60\x52\x61\xb1\x3f\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 16305, mode: os.FileMode(420), modTime: time.Unix(1464872716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x4b\xc3\x30\x1c\x47\xcf\xcb\xa7\xf8\x1f\x37\xdc\x40\x45\xbc\xec\x54\x6d\x84\x61\xed\x46\xe9\xc0\x9d\x42\x4c\x42\x1b\x5c\x93\xd2\xfc\x6b\x9d\x9f\xde\x6c\x2b\xa5\xe8\xb4\xcd\x31\xbc\xdf\x23\xb4\x6f\xb1\x80\xab\x42\x67\x15\x47\x05\xdb\x92\x90\xc7\x84\x06\x29\x85\x34\x78\x88\x28\x70\x21\x6c\x6d\x90\x39\xe4\xa8\x1d\x6a\xe1\x60\x4a\xc0\x1f\x2e\x65\xa5\x9c\x83\xfe\x11\x39\xaf\xb8\x40\x55\xc1\x07\xaf\x0e\xda\x64\xd3\xfb\xbb\x19\xc4\xeb\x14\xe2\x6d\x14\xcd\xcf\x3b\xe7\x14\x32\x61\xa5\xfa\x6f\x77\x73\xdb\xdb\x79\xe2\x34\x95\x5c\xef\x0f\x4c\x1b\x61\x0b\x05\x93\xc9\x9b\xce\xb4\xc1\x0e\x83\x90\x3e\x05\xdb\x28\x85\xeb\x79\x8f\xb6\x35\x8e\xc3\x1b\xa5\xde\x7f\xdb\x27\x03\x78\xab\x1f\xb4\x17\xd6\x60\xde\xe9\x47\xe3\xdd\xeb\x07\x78\x6e\x4c\xcd\xf7\x63\xed\x2d\x3d\xf6\xed\x75\x29\x7d\x1a\x92\x71\xf4\x9f\xe5\x78\x81\xba\x50\xbe\x87\xa2\x84\x46\x63\xee\x35\xa7\x1b\xf8\xb2\x46\xfd\xf8\xd9\x9b\x64\xf5\x12\x24\x3b\x78\xa6\xbb\x69\x1b\xcc\xbc\x57\xc0\x8c\xcc\x96\x5d\x6f\xab\x38\xa4\xaf\x17\x7a\x63\xed\x90\x69\xf9\x09\xeb\xf8\x62\x91\x2d\x72\xb4\xf5\x6b\x0e\x6d\x63\x08\x09\x93\xf5\x66\x94\x7d\x79\x46\xff\x0a\x7f\x49\xbe\x03\x00\x00\xff\xff\x90\xed\xa7\x46\x2a\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 810, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_account_statistics_updated_at_timezoneSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x2e\x49\x2c\xc9\x2c\x2e\xc9\x4c\x2e\x56\x80\x48\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x94\x16\xa4\x00\xf5\xa5\xc4\x27\x96\x28\x84\x44\x06\xb8\x2a\x94\x64\xe6\xa6\x02\x15\xe7\x16\x28\x94\x67\x96\x64\x80\xb9\x0a\x55\xf9\x79\xa9\xd6\x5c\x5c\xc8\xf6\xb8\xe4\x97\xe7\x51\xd5\xa6\xfc\xd2\x12\x64\xcb\x00\x01\x00\x00\xff\xff\x99\xce\x1e\x1a\xd4\x00\x00\x00")

func migrations4_account_statistics_updated_at_timezoneSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_account_statistics_updated_at_timezoneSql,
		"migrations/4_account_statistics_updated_at_timezone.sql",
	)
}

func migrations4_account_statistics_updated_at_timezoneSql() (*asset, error) {
	bytes, err := migrations4_account_statistics_updated_at_timezoneSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_account_statistics_updated_at_timezone.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_account_statistics_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\x3f\x4b\x04\x31\x10\x47\xfb\x7c\x8a\x29\x15\xef\xc0\xfe\xaa\x68\x22\x1c\xe6\xb2\x47\x4c\x8a\xad\x42\xc8\x06\x09\xee\x9f\x90\x19\x91\xfd\xf6\xae\x8b\x85\xb0\xc2\x36\x62\x3d\xc3\xe3\xfd\xde\xf1\x08\x77\x43\x7e\xad\x81\x12\xb8\xc2\x18\x57\x56\x1a\xb0\xfc\x41\x49\x08\x31\x4e\xef\x23\x79\xa4\x40\x19\x29\x47\x04\x2e\x04\x3c\x36\xca\x5d\x34\xc0\x7a\x4c\xb5\x84\x4a\xb3\xa7\xb9\x24\xc0\x21\xf4\x7d\x1e\x09\x74\x63\x41\x3b\xa5\x40\xc8\x27\xee\x94\x85\xfb\xd3\x1e\x59\x98\xe6\xba\xa0\xf5\x8b\x35\xfc\xac\xed\x2f\x2f\xbe\xbc\xa5\x79\x97\xf3\x65\x78\x35\xe7\x0b\x37\x2d\x3c\xcb\xf6\x26\x74\x5d\x4d\x88\x07\x08\x88\x89\x7c\x9c\xba\x74\xd8\xaa\xdf\x9e\x18\x63\x3f\x5b\x88\xe9\x63\xfc\x2f\xe5\x6f\xce\x5a\x75\x63\xf6\x17\x83\x97\x75\x9f\x01\x00\x00\xff\xff\xb2\xea\x86\xd6\xe8\x01\x00\x00")

func migrations5_account_statistics_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_account_statistics_account_typeSql,
		"migrations/5_account_statistics_account_type.sql",
	)
}

func migrations5_account_statistics_account_typeSql() (*asset, error) {
	bytes, err := migrations5_account_statistics_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_account_statistics_account_type.sql", size: 488, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_account_traitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xb1\x6e\xc2\x30\x10\x86\x77\x3f\xc5\x6d\x24\x6a\xd9\xaa\x2e\x4c\x29\x18\x09\x35\x05\x64\xc2\xc0\x14\x5d\x1c\x37\x5c\x49\x6c\xe4\x5c\x4a\xe9\xd3\xd7\x4a\x69\x49\xd9\xea\xc9\x3e\xdf\xa7\xd3\x77\xff\x78\x0c\x77\x0d\x55\x1e\xd9\xc0\xf6\x28\xc4\x54\xc9\x24\x93\x90\x25\x4f\xa9\x04\xd4\xda\x75\x96\x73\xf6\x48\xdc\x42\x24\x20\x1c\x2a\xa1\xa0\x8a\x2c\xc3\x5a\x2d\x5e\x12\xb5\x83\x67\xb9\x03\x25\xe7\x52\xc9\xe5\x54\x6e\x60\x4f\x2d\x3b\x7f\xce\x2f\x74\x1b\x51\x19\xdf\xf7\x68\x51\x3b\x7d\xc8\xc9\x6a\xd7\x90\xad\xf2\x23\x9e\x1b\x13\x1a\xa0\x70\xae\x36\x68\x61\xb9\xca\x60\xb9\x4d\x53\x98\xc9\x79\xb2\x4d\x33\x98\x27\xe9\x46\x0e\x59\xd7\xf1\xff\x60\x11\x4f\x6e\xa5\xba\x92\x38\xaf\x5d\x75\xf5\xd9\x48\xb5\x48\xd2\xa1\xcf\xf7\x4c\xd4\x41\x04\xf4\x1e\x7d\xb8\x19\x0f\xef\xe8\xcf\x61\x76\xf4\xf8\x70\x11\x6a\xbb\xe2\xcd\x68\x06\x36\x1f\xfc\x8b\x90\xb3\x83\x42\x63\x18\x07\x4f\xed\x4d\x58\x75\x99\x63\x80\xa8\x31\x2d\x63\x73\x84\x13\xf1\x3e\x98\xf5\x15\xf8\x74\xd6\x5c\x65\x4a\xf3\x8a\x5d\xcd\x10\x59\x77\x8a\x62\xc0\x61\xd3\x28\x2c\x63\x14\xf7\x86\xc3\x18\x67\xee\x64\x85\x98\xa9\xd5\xfa\x26\xc6\xa2\x46\x7d\xa8\x43\x3a\x93\x3f\xbf\x3f\xfb\x98\x88\xaf\x00\x00\x00\xff\xff\xf9\x5f\xed\xcf\x0d\x02\x00\x00")

func migrations6_account_traitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_account_traitsSql,
		"migrations/6_account_traits.sql",
	)
}

func migrations6_account_traitsSql() (*asset, error) {
	bytes, err := migrations6_account_traitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_account_traits.sql", size: 525, mode: os.FileMode(420), modTime: time.Unix(1464705819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x3d\x4f\xc3\x30\x10\x40\xe7\xdc\xaf\xb8\x31\x11\xad\x04\x08\xb1\x74\x0a\xc4\x48\x88\xd0\x56\x51\x32\x74\x8a\x0e\xc7\x4a\x4f\xaa\xed\xca\xbe\x16\xfa\xef\x09\x50\x21\x0f\x7c\x78\x7e\xcf\x77\xf7\xe6\x73\xbc\xb0\x3c\x06\x12\x83\xdd\x1e\xe0\xbe\x51\x65\xab\xb0\x2d\xef\x6a\x85\xa4\xb5\x3f\x38\xe9\x77\x6c\x59\x22\xe6\x90\xd1\x30\x04\x13\x23\xa6\x4f\x6f\x29\x90\x16\x13\xf0\x48\xe1\xc4\x6e\xcc\x6f\x6f\x0a\x5c\xae\x5a\x5c\x76\x75\x3d\x83\x0f\x86\x62\x34\xd2\x6b\x3f\x98\xbf\xbc\xab\xeb\xc4\x9b\x88\x4f\xd5\xd2\x5b\xef\xf7\x66\xda\x90\xbd\xc3\x2c\x7b\xe1\x91\x9d\x7c\x73\x58\xa9\x87\xb2\xab\x5b\xbc\xfc\x9a\x34\x10\xef\x4e\xbd\x1c\x82\xf3\xc7\xe9\xeb\x7f\x79\xeb\x9d\x6c\x13\xe3\xcc\x67\xbf\xf1\xeb\xe6\xf1\xb9\x6c\x36\xf8\xa4\x36\xf9\xb9\xc6\x2c\x39\xaf\x80\x62\x01\x90\x56\xad\xfc\xab\x03\xa8\x9a\xd5\xfa\xc7\xaa\x0b\x78\x0f\x00\x00\xff\xff\x79\x84\x25\x20\x83\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 387, mode: os.FileMode(420), modTime: time.Unix(1464705819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcd\x4e\xc4\x20\x14\x85\xf7\x3c\xc5\xdd\x3b\x5d\xb8\xee\x0a\x05\x57\x0c\x98\x06\xd6\x04\xc7\x66\xbc\xc9\x00\x93\x4a\xfd\x79\x7b\xad\xda\x94\xe2\x5f\xdb\xed\x21\xe7\xcb\xe5\x7c\x55\x05\x17\x1e\x8f\x9d\x4b\x2d\x98\x33\x21\x54\x68\xde\x80\xa6\x57\x82\x83\x3b\x1c\x62\x1f\x92\x3d\xa1\xc7\xf4\x08\x0d\x97\x74\xcf\xe1\x5a\x09\xb3\x97\xe0\xdd\x8b\x8d\xe7\xf6\xbd\x88\x31\x80\x56\xf3\xc0\xc6\x3e\xd5\xcb\x61\xf7\x0e\x4f\xaf\x36\xf5\x5d\x88\x4f\x6d\x37\xd0\x3e\x93\x0f\xe6\x2a\x92\x8f\x21\x3d\x14\xac\x31\x5b\x40\x23\x00\x94\xb1\x1f\xff\x68\x31\xc0\x1d\x1e\x31\x24\x90\x4a\x83\x34\x42\x00\xe3\x37\xd4\x08\x0d\xd5\xe5\x6e\xde\x9c\xce\x5f\xd3\xca\x0f\xfd\xb3\x57\x13\x92\x8b\x63\xf1\x39\x6c\x55\x37\x2c\xf2\x4d\xdf\x6a\x75\x5f\xd3\x4e\xe6\xc6\xfd\x37\xa8\xcb\x58\xa5\xcd\x7f\xd4\xb1\x46\xdd\xfe\xe6\x6e\x57\xbc\xe7\x86\xca\xb7\xb9\x87\x9a\xbc\x05\x00\x00\xff\xff\xa7\x41\x23\x51\x25\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 805, mode: os.FileMode(420), modTime: time.Unix(1464859741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/4_account_statistics_updated_at_timezone.sql": migrations4_account_statistics_updated_at_timezoneSql,
	"migrations/5_account_statistics_account_type.sql": migrations5_account_statistics_account_typeSql,
	"migrations/6_account_traits.sql": migrations6_account_traitsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"4_account_statistics_updated_at_timezone.sql": &bintree{migrations4_account_statistics_updated_at_timezoneSql, map[string]*bintree{}},
		"5_account_statistics_account_type.sql": &bintree{migrations5_account_statistics_account_typeSql, map[string]*bintree{}},
		"6_account_traits.sql": &bintree{migrations6_account_traitsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

