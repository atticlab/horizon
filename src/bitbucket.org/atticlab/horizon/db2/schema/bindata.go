// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/4_account_statistics_updated_at_timezone.sql
// migrations/5_account_statistics_account_type.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5b\x6d\x6f\xdb\x38\x12\xfe\x9e\x5f\x41\xec\x17\x27\x38\xa7\xb0\xf3\x76\xa9\x83\x5d\xc0\x9b\x68\xaf\xc6\xb9\xca\x6e\xec\x5c\xb7\x38\x1c\x04\x5a\x62\x6c\x5d\x25\x51\x15\xe9\x34\xe9\xe1\xfe\xfb\x8d\xde\x6c\xbd\x90\x22\xe5\x48\xbd\x7e\x29\x2c\x8e\x9e\x99\x67\x66\x38\x1c\x92\xca\xe9\xe9\xd1\xe9\x29\xfa\x9d\x32\xbe\x8e\xc8\xe2\x8f\x39\x72\x30\xc7\x2b\xcc\x08\x72\xb6\x7e\x08\x63\x47\x47\x0b\x63\x89\x18\xc7\x9c\xf8\x24\xe0\x16\x77\x7d\x42\xb7\x1c\xfd\x8c\x46\x37\xc9\x90\x47\xed\x2f\xf5\xa7\xb6\xe7\xc6\xd2\x24\xb0\xa9\xe3\x06\x6b\x18\x18\x3c\x2e\x7f\xbb\x1e\xdc\xe4\x70\x81\x83\x23\xc7\xb2\x69\xf0\x44\x23\x1f\x24\x2c\xc6\x23\xf8\x8f\x81\x24\x0d\x32\x8c\x0d\x01\xe8\xa7\x6d\x60\x73\x97\x06\xd6\x0a\x90\x48\x3c\xfe\x84\x3d\x46\x4a\x6a\x00\xc0\xf2\x09\x63\x78\x9d\x08\x7c\xc3\x51\x00\x58\x37\x99\xed\x04\x47\xf6\xc6\x0a\x31\xdf\xc0\x58\xb8\x5d\x79\xae\x3d\x44\xe1\xda\xb2\x81\xaa\x47\x73\x31\x87\x3c\xe1\xad\x07\x04\xf1\xca\x23\x2c\xc4\x36\x89\x8d\x1e\x54\x46\xbf\xb9\x7c\x63\x51\xd7\x29\xd8\x71\x94\xfa\xd0\xc4\x3e\x99\x20\x6c\xdb\x74\x0b\x16\xc5\x0e\x73\x19\x77\x6d\x76\x83\x96\xaf\x21\x8c\x2c\xa7\xbf\xce\x8d\x1b\xb4\x00\x56\x3e\x9e\x64\x76\xdc\xa0\xfb\x6f\x01\x89\x26\xe8\x14\xc4\x76\x8a\x27\x28\x71\xfc\xed\x83\x31\x5d\x1a\xe9\x8b\x02\x60\x74\x7c\x84\xe0\x1f\x76\x9c\x08\xa8\x83\xb7\x70\x84\x6d\x4e\x22\xf4\x8c\xa3\x57\xa0\x7f\x7c\x75\x71\x82\xcc\xfb\x25\x32\x1f\xe7\xf3\x61\x2a\xcb\x18\xe1\xe0\x74\x87\x08\xc4\xc7\x67\x55\x71\x07\xbb\xde\xab\xe5\x42\x0c\x7d\x82\x56\xee\xda\x0d\x38\xba\x33\x7e\x9b\x3e\xce\x97\x68\x24\x94\x85\x1c\xd0\x11\xfe\x46\xc8\x17\x6d\xe4\x4c\x58\x13\xda\xa7\x01\xdf\x68\x63\xe7\xd2\x9a\xe0\x38\x08\xb6\xd8\xd3\xc4\xce\x84\x35\xa1\xb7\x21\xcc\x3c\xe2\x58\x98\xa3\x78\x32\x41\x98\xfd\x10\xc5\xd9\x96\xfc\x44\xdf\x69\x40\x2a\x6f\x24\xf9\x40\xa2\x10\x47\xfc\xd5\xe2\x90\x63\x88\xf9\xd8\xf3\xc4\x4a\x8e\x4e\x20\x51\x4b\x99\xba\xa6\x51\x08\x13\x67\x1d\xe1\x78\x76\x75\x95\xa6\x15\xd4\x2c\x47\x5d\x07\x71\xf2\xc2\xab\x0e\x0a\x43\x98\xbe\x8d\x94\xeb\x66\x6f\x20\xf9\x69\xf4\x6a\x65\xf3\xa1\x2b\xbb\xab\xb0\x7b\xc3\xb3\xb8\x55\x4c\x6f\x9a\x74\x72\xa3\xc9\xd3\x13\xb1\x3b\xb7\x39\x43\xcd\x4c\xae\x30\xb1\x64\x14\x72\x39\x1a\x92\x34\x58\x52\xc9\x9f\x68\xe4\x90\xe8\x27\x04\x23\x64\x0d\x54\xcb\xa3\x49\xe6\x89\x87\x1c\xc2\xa1\x2a\x30\xf4\x6f\x46\x83\x95\xdc\x2b\x1e\x71\xe0\xdd\xae\xbd\x92\xa1\x66\x5e\x61\xe4\xeb\x16\x16\x23\x99\xa5\xa9\xb0\xb5\xc1\x6c\xa3\x55\x48\xc3\x88\x3c\xbb\x74\xcb\x2c\xe5\x8b\x99\x93\x22\x1c\x30\x9c\xae\x63\x49\x58\x76\x76\xc8\xea\xc1\x3e\x2c\x7a\xf2\xb6\x47\x99\x68\x2e\xc5\xab\xb2\xb4\x82\x44\x44\x5c\x73\x4a\x2f\x29\xea\x93\x40\x76\x97\x48\xd9\x4f\x3f\xa4\x11\xb8\xc5\x7a\x86\x78\x00\xa3\x1a\x97\x71\x35\xa5\x28\x2c\xcc\xc0\xdb\x85\x02\x22\xcc\xc8\x27\x42\xac\x90\x52\x4f\x3c\x1a\xb7\x2f\x16\x88\x48\x62\x9d\x0c\xc3\xec\x25\xd1\xb3\x4c\xc4\xc7\x2f\x16\x7f\xb1\xe2\xc5\x92\xb9\xdf\xeb\x52\xf2\x5c\xde\x87\x2d\xae\xcb\xae\xed\x86\xb8\xfb\x22\x25\x56\xb2\x2f\x59\x62\x52\xfa\x13\x5e\x5d\x42\xda\x3a\x00\x20\xc0\x9b\x5f\x73\x3f\x2c\x8c\x3f\x1e\x0d\xf3\xb6\xc1\x15\x45\xf2\xb9\xb4\x9e\x8e\x84\xc1\x62\x39\x7d\x58\xa2\x4f\xb3\xe5\x07\x34\x4e\x1e\xcc\x4c\x00\xfb\x68\x98\x4b\xf4\xeb\xe7\xec\x91\x79\x8f\x3e\xce\xcc\x7f\x4c\xe7\x8f\xc6\xee\xf7\xf4\xcf\xfd\xef\xdb\xe9\xed\x07\x03\x8d\x3b\x21\x8a\xee\x3f\x99\xc6\x1d\xe8\x56\x30\x9e\xce\x97\xc6\x43\x4b\xc2\x3b\x6c\x85\xf8\x3b\xd7\x51\x72\xe9\x2d\x53\x55\x0b\x6a\xb1\x40\x4a\x17\xdd\xb8\x5f\xb0\x53\x62\xc9\x92\xf4\xc6\x15\x29\x7d\xc4\xe8\x36\xb2\x49\x9e\xeb\x92\xea\x9f\x57\xaa\xc1\x60\x32\xa9\x49\x68\xcc\x8a\x22\xbd\x1e\x0b\x83\x4c\x8d\x6e\x69\xd0\x89\xc2\x5b\x8a\x83\xcc\xbe\x6e\xcb\x83\x42\xcb\x8f\x2a\x10\x2d\xc9\xbe\xb1\x44\x28\xb4\xd5\x8b\x84\xec\x85\x86\x32\x51\x78\xa5\xc7\xcc\xcd\xb3\xb5\x68\xa0\x76\x63\x96\xf5\x63\x8a\x76\x4f\xb7\x92\x34\x17\x05\xa1\xec\x5e\xb5\xbc\x73\xc1\xd2\x89\x28\xeb\xfa\xfe\x2f\x7d\x1b\x74\x40\x24\x78\x26\x1e\x18\x25\xda\xbe\xc1\x30\x74\x51\x5b\x8f\x4b\x06\x7d\xa8\xb5\x92\xa1\xd8\x0b\xb2\x61\xe6\xae\x03\xcc\xb7\x00\x2d\x70\xfb\xfb\xab\x93\x7f\xfe\x6b\x5f\x8d\xff\xf3\x5f\x51\x3d\x06\x89\x4a\x3b\x47\x7c\x9a\xee\x90\xeb\xb5\x7b\x87\x15\x80\x1b\x1a\xab\xfb\x1e\xab\x0e\x93\x31\x03\x77\x5a\x2b\x08\x9c\xc3\xe2\xc8\x5d\x43\x02\xaf\x05\x5b\x58\x98\x60\xd9\xe4\xc9\x94\x6b\xcd\xf8\x74\xbe\xdc\x9b\x73\xd5\x3a\x8f\x52\xf9\xdb\xfb\xf9\xe3\x47\x33\x8e\x69\x7c\x7e\x95\xd3\x0c\xc0\xe1\xcf\xd8\x3b\x1e\x68\xb5\x16\xe0\x8f\x88\xac\x6d\x0f\x33\xd6\x1f\x0b\xe9\xa2\xd5\x8a\x87\xa2\xfe\x89\x99\xdc\x61\xc8\xc1\x27\x1a\xe9\x1d\xde\xa1\xbb\xe9\x72\xaa\x60\x29\x41\x6e\x3a\x6c\xd1\x81\x9d\x99\x0b\x03\xd6\xab\x99\xb9\xbc\xaf\x1d\xb1\x24\x0b\xd2\x02\x1d\x0f\xc6\x96\x1b\xb8\xdc\x85\xad\x13\x4b\xb0\xde\xb1\xaf\xde\x60\x88\x06\x67\xa3\xf1\xd5\xe9\xe8\xf2\xf4\xec\x12\x8d\xaf\x27\x67\x97\x93\x8b\xf1\xbb\xd1\xd5\xe8\xec\xf2\xfa\x2f\xa3\xf3\x01\xb8\x43\x0b\xfd\x0c\xd0\x1d\xf2\x52\x76\xee\x0a\x1c\x4f\x5d\xa7\x51\xd3\x5f\x2f\x46\xd7\x97\x6d\x34\x9d\x5b\x78\xbd\x86\x68\x41\xdd\xb2\xc8\x4b\x48\x02\x46\x98\x05\xbe\xdc\x1d\xce\x34\xab\xbb\x7a\x3f\x3e\x6b\xa3\xee\xc2\xaa\xc7\xdd\xda\x97\xcd\xe4\x6c\x3b\xae\x91\x8d\x5a\xdf\x5f\x8c\xcf\x2e\xda\x68\xbd\x14\x69\xcd\x1f\xc5\xb5\xaa\x49\xdd\x78\x74\x3e\xbe\x78\x9f\xa9\x93\xa4\x5c\xe3\x41\xd9\x1b\x52\xb9\xe9\x2c\xab\x03\x58\xd1\x61\x50\x07\xb0\x1a\xfb\xf2\x36\x5a\xde\xb2\x15\x84\x32\xa6\xd0\xb2\x30\xe6\xc6\xed\xb2\x70\x45\xf1\x8e\x91\x36\x55\x7b\x88\xc6\xc3\xf4\x76\x42\x9d\x1e\x92\xad\x5f\x07\x2e\xd7\xda\xf3\x1c\xee\xf4\xb6\xed\x75\x17\x6e\x57\x2d\x32\x6d\x1c\x2f\x6d\xa6\xdb\xbb\x44\x50\x49\xc2\x2f\xe4\x35\x47\xbd\xbd\x37\x17\xcb\x87\x29\xd4\xa3\x56\x7d\x7a\x6d\xc1\xae\xab\x49\xba\x9e\xe9\xdd\x5d\x41\x85\xcc\x18\xf4\xfb\xc3\xec\xe3\xf4\xe1\x33\xfa\xbb\xf1\x19\x1d\x67\xe7\xe7\xc3\xc2\x8d\xd4\xb0\x7e\xa1\xa1\xba\xb3\xe8\x85\x65\x45\x87\x88\xa2\xc8\x8c\x32\x3f\xd7\x69\x7b\x40\xd6\x07\x95\x66\x95\x22\x66\x1a\x46\x6a\x13\x95\x4e\x96\x3e\xa9\xca\x94\x36\x91\x6d\x34\x54\x49\x57\xb4\x8c\xa7\xd9\x0d\x55\xe1\x25\xe7\x39\x33\xef\x8c\x3f\x0f\xd9\x26\x27\x2f\x2a\x94\x80\x0b\x44\xf7\xc3\x8f\x8b\x99\xf9\x37\xb4\xe2\x11\x21\xbb\x19\x57\x33\x7f\xb5\xeb\x10\x3a\x32\x75\x0f\x18\x9b\x25\xdc\xdf\x97\x0d\x4b\x85\x87\xb5\x0d\xb4\xc8\xd4\xf8\x1c\xa0\x3b\x3b\x93\x53\x05\x2d\x23\xab\x67\x11\x22\xdb\xd2\xce\xa5\x3b\xeb\x52\x3c\x3d\xfb\x2a\xc7\x1e\xc3\xfa\x09\x87\x70\x9a\x5a\x24\xee\xe0\x93\xf1\x37\xdb\xfd\x68\xce\x60\xa5\xcd\xcc\xaf\x80\x17\x49\xe4\xb7\x95\x25\xfb\x45\x77\x13\xc3\xfc\xe2\x51\x66\xfa\x7e\x07\xda\xa9\xd1\xb0\xd3\xd4\x35\x77\x7f\x06\x3a\x14\x5e\xaf\x28\x28\xd0\xd0\x0a\xfb\x61\x91\x21\x17\x89\x48\x0e\x0b\x0e\xe2\x25\xa6\xc3\x5f\xfa\xa2\x93\x21\x4b\xe6\xc2\x81\x84\xca\x87\xdd\x75\x4a\xe0\xc3\xb8\x46\xd0\x0e\x18\x65\x54\xf6\x88\x87\x06\xa6\x39\x08\xbb\xeb\x68\xd0\xd2\x79\x1c\xca\xe0\x45\x02\xf9\x4d\x7b\xc9\x62\xb1\x7d\x45\x9f\xf7\x63\x64\x4d\x83\x5e\x01\x15\x99\xcb\xd3\x70\xf1\xee\x12\x60\x8f\x78\x78\x2a\x2b\xd2\x36\x3d\xa4\xa9\x6e\xfe\x2d\x10\xce\x3a\x80\x6e\x3d\xae\x54\x57\x24\xba\xfb\xb8\x46\xab\x33\x91\x43\x77\x9d\x36\x4d\x9a\xd4\xf6\x2b\x83\x90\x2d\x21\x31\x5e\xbc\xab\xe9\x28\x99\x1a\x75\x28\x57\x30\xe1\xf6\xaa\x0c\x99\x4d\xeb\x18\x72\xf7\x71\x49\x2f\xb6\x8b\x14\x29\xeb\xcb\x4e\x52\x9f\x45\xbf\x69\x53\x52\x74\x48\x79\x94\xc3\x55\xbe\x9f\xe9\x3b\x08\xb5\xef\x75\x94\x64\x2a\x2f\xe8\x53\x2b\x7c\x3e\xf5\x83\x62\x53\xfc\x60\x4b\xc5\xab\x20\xab\x4f\x49\xf4\x69\xd8\x0f\xe2\x26\xfc\x2a\x4d\x45\x52\xf4\x92\x3e\xdb\x7c\xc7\xf1\x83\x18\xee\x2e\x57\x55\xac\xa4\x9b\xc8\x32\xf4\xfe\xf4\xb3\xff\x02\x51\xd5\x25\xec\x01\xdb\x96\x89\x32\x68\xb9\x37\xe8\xa5\x4e\x34\x29\xd4\x61\xd4\xaa\x7d\xa9\x28\xeb\x6b\xf1\xac\xab\xd1\x62\xa2\x5e\x42\x8b\xfd\x66\xff\x09\x56\xd7\x76\x70\xef\x0b\xc2\x0e\xd9\x35\x15\xf9\x36\xde\x5a\x51\xfa\xa5\xa3\x08\x34\x68\x50\x36\x2f\xc7\xc7\xf9\x77\x5c\xa7\xbf\xfc\x82\x06\x8c\x7a\xd0\x08\x24\x07\xc9\x71\x4c\x06\x93\x49\xfc\x59\xc1\xc9\xc9\x10\xc9\x05\xe3\x13\x67\x2d\x41\x97\xb1\x2d\x89\xe4\xa2\x2b\xba\x5d\x6f\xb8\x96\xfa\x92\x68\xb3\x01\x25\xd1\x8a\x09\x27\xe8\xd3\x07\xe3\xc1\x48\x13\x10\xfd\x8c\xce\xcf\x0b\xe1\x93\xfd\x25\x0f\xb2\xa9\x1f\x7a\x84\x93\x24\x12\xff\x0b\x00\x00\xff\xff\xc2\x0d\x19\x47\xf6\x33\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 13302, mode: os.FileMode(420), modTime: time.Unix(1464189941, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6d\x6f\xdb\x46\x12\xfe\xee\x5f\xb1\xc8\x17\xc9\x38\xf9\x2e\x41\x0e\x41\xce\x46\x02\x28\x36\x73\x11\x2a\x53\x89\x44\x35\x09\x8a\x82\x58\x91\x2b\x8a\x35\xc9\x65\x76\x49\xbf\xa4\xe8\x7f\xef\x2c\xdf\xdf\x96\xa4\x6c\xd2\x2d\x0a\xb4\xe2\xce\xce\xcc\x33\x33\xfb\xcc\x70\xe9\xb3\x33\xf4\x2f\xd7\xb6\x18\x0e\x08\xda\xfa\x27\x67\x67\xf0\x2f\xfa\x4c\x79\x60\x31\xb2\xf9\xb2\x44\x26\x0e\xf0\x0e\x73\x82\xcc\xd0\x8d\x96\x4f\x36\x8a\x86\x78\x00\xf2\x2e\xf1\x02\x3d\xb0\x5d\x42\xc3\x00\xbd\x43\x2f\x2f\xa2\x25\x87\x1a\x37\xf5\xa7\x86\x63\x0b\x69\xe2\x19\xd4\xb4\x3d\x0b\x16\x26\x5b\xed\xe3\xdb\xc9\x45\xaa\xce\x33\x31\x33\x75\x83\x7a\x7b\xca\x5c\x90\xd0\x79\xc0\xe0\x3f\x1c\x24\xa9\x97\xe8\x38\x10\x50\xbd\x0f\x3d\x23\xb0\xa9\xa7\xef\x40\x13\x11\xeb\x7b\xec\x70\x52\x32\x03\x0a\x74\x97\x70\x8e\xad\x48\xe0\x0e\x33\x0f\x74\x5d\x9c\x24\xf0\x54\xec\x92\x73\xe4\x3b\xbe\xc5\x7f\x38\x17\x48\x7b\xf0\xe1\xa7\xf2\x4d\x53\xd4\xcd\x62\xa5\x5e\xa0\x0d\x58\x72\xf1\x39\x3a\xbb\x40\xab\x3b\x8f\x30\xf8\xbf\x08\xf9\xe5\x5a\x99\x6b\x4a\x2e\x89\x16\x1f\x91\xba\xd2\xe0\xc1\x62\xa3\x6d\x52\x85\xe8\xeb\x42\xfb\x84\x36\x97\x9f\x94\xeb\x39\xf2\x2d\xdd\x80\x08\x3a\x54\x58\x2f\x99\xcf\xb5\x54\x1c\xb9\x5c\x5d\x5f\x2b\xaa\xd6\xe2\x46\x2c\x80\x60\x6b\x4d\x09\x5a\x6c\xd0\xe4\xf3\xf2\x3f\xbe\x25\x92\xe7\x33\x6a\x10\x33\x64\xd8\x41\x0e\xf6\xac\x10\xe2\x31\xa9\xfa\x71\xe0\x01\x65\x64\xb8\x28\xc4\xfa\xca\x41\x08\x77\x8e\x6d\xc8\x03\x50\x76\xe1\x71\xf8\x13\xb3\x02\xbe\x28\x59\x14\x80\x2e\x04\xb5\x84\xc4\x73\x51\x71\x9c\x04\x1c\xd1\x3d\x9a\xde\x90\x87\x19\xba\xc5\x4e\x48\x4e\x91\x8f\x6d\xc6\xa3\x90\x44\x65\x48\x30\x33\x0e\xba\x8f\x83\x03\x54\x4d\xec\xf5\xac\x9c\x42\x21\x66\x92\x3d\x0e\x1d\x28\x7d\xbc\x73\x08\xf7\xb1\x41\x44\x39\x4f\x2a\xab\x77\x76\x70\xd0\xa9\x6d\x16\x2a\xb4\x1c\x77\x5b\x78\xf6\xa0\x63\xc3\xa0\xa1\x17\xf0\x14\xbe\x36\xff\xb0\x54\x72\xf0\x49\xec\xb2\x08\x80\x58\x66\xf6\xbc\x98\x8f\x68\x5f\x4d\x2b\x9a\x9e\x20\xf8\xc7\x36\xd1\xce\xb6\x6c\x2f\x88\x32\xa5\x6e\x97\xcb\x59\xf4\x1c\x9b\x26\x83\x73\x02\x47\x0b\x33\x6c\x04\x84\x41\x60\xd8\x03\x84\x6b\xfa\xe6\xbf\xa7\x27\xa7\xb5\x5a\x49\xb4\x93\xfd\x9e\x18\x43\xbb\x9c\x28\x4d\x3c\xae\x00\xd1\x65\x08\x52\x39\xea\x13\xe0\x30\xc1\x0b\x32\xc9\x17\x94\x99\x84\xbd\x40\xb0\x42\x2c\x40\x5a\x5e\x8d\xea\xa5\x79\xc9\x24\x01\xb6\x1d\x8e\xfe\xe0\xd4\xdb\xc9\x83\xe2\x10\x13\xf6\x0e\x1c\x94\x44\x69\x12\x14\x4e\x7e\x84\x40\xa1\x32\x47\x63\x61\xfd\x80\xf9\xa1\x39\xa3\x15\x79\x9f\x91\x5b\x9b\x86\x5c\xef\xdc\x98\xc4\x88\x61\x8f\xe3\x98\x7d\xa3\xac\x64\x7e\x5c\x29\x1f\xe7\xdb\xa5\x86\x5e\x56\x2c\xe4\x59\xe9\x27\x6f\x38\x94\x13\x53\xc7\x01\x12\x1d\x04\xda\x82\xeb\x23\x71\x90\x44\x2f\x11\x4f\xd0\x4f\xea\x91\xea\x1e\x46\xa0\x19\x75\x6d\x8a\x65\x43\xdf\xec\x2d\x9b\xd5\x51\xf2\xd3\xf5\x29\x83\xb0\xe8\xb7\x90\x0f\x40\x54\xc3\xf2\xaa\x5a\x51\x14\x48\x03\x70\xdb\x1e\x6f\x2e\xc8\x3d\x21\xba\x4f\xa9\xd3\xbc\x2a\x9a\xae\x0e\x22\x92\x5c\x47\xcb\x70\x76\x09\xbb\x95\x89\xb8\xf8\x5e\x0f\xee\x75\x20\x3e\x9d\xdb\x3f\xeb\x52\xf2\x52\xce\xd3\xe6\x63\x16\xd8\x86\xed\xe3\xc1\x19\xaa\xd9\x46\xce\x57\xcd\x98\xfa\x1f\xf7\x6e\x02\x39\x16\x3f\xa8\x80\x60\xfe\x48\xc3\xb0\x51\xbe\x6c\x15\xf5\xb2\x25\x12\x45\xf0\xa9\x74\x3f\x1b\x11\x82\x8d\x36\x5f\x6b\x71\x23\x7d\x15\x3d\x58\xa8\xa0\x2c\x6a\x7d\x1f\xbe\x27\x8f\xd4\x15\xba\x5e\xa8\xbf\xce\x97\x5b\x25\xfb\x3d\xff\x96\xff\xbe\x9c\x43\x0b\x46\xaf\x06\x01\x8a\x56\x5f\x55\xe5\x0a\x6c\x77\x20\x9e\x2f\x35\x65\x7d\x24\xe0\x4c\x77\x87\xf8\xbf\x6d\xb3\x13\xcb\x58\x85\xda\xd5\x4c\x8b\xf4\x28\x6d\xb8\xbe\x0f\x3e\xc4\xb8\xa2\x7e\xf4\xc4\x76\x14\x3f\xe2\x34\x64\x06\x49\x4b\x5d\xc2\xfd\x29\x4f\x4d\x26\xe7\xe7\x35\x89\x1e\x87\xa2\x08\x6f\x3c\x5a\x90\x59\x89\x62\x2f\xa1\x85\xa6\xbd\xcd\x09\x78\x0a\x29\xc8\x3c\x1b\x96\x16\x3a\xac\x3c\x17\x31\x1c\x09\xf6\x89\xd4\xd0\x61\xad\x4e\x0e\xb2\x0d\x2d\xf4\x50\xd8\x32\x5e\xc9\xa6\x14\x51\xf4\xaf\xf7\x38\x96\x4c\x61\x1d\x43\x5e\x5f\x06\x69\x27\x83\x46\xd9\xdc\xb4\x7c\x5e\xc1\xd2\xd6\x2c\x9b\xf5\xfe\x91\x69\x0d\xe6\x1e\xe2\xdd\x12\x07\x9c\x42\x01\xb9\xaf\x51\xf5\xbd\x98\x9d\xe0\x35\x4d\xb2\xe8\x12\xf1\x0a\xd9\xb8\x24\xa2\x20\x5b\xe6\xb6\xe5\xe1\x20\x04\xd5\x0d\x61\xff\xdf\x9b\xd3\xdf\x7e\xcf\x59\xf8\xcf\xbf\x9a\x78\x18\x24\x2a\x43\x1c\x71\xa9\x1e\x75\x83\x3a\x67\x67\xba\x3c\x08\x43\x2b\xab\xe7\xba\xea\x6a\x12\x64\x10\x4e\x7d\x07\x89\x83\x17\x56\x88\xe2\x5b\x28\x60\x8b\x44\x64\x58\x3c\x4c\x70\xbc\x92\xa3\x93\xd8\xee\x75\xde\xe3\xe3\xb2\x52\x97\x5d\xdd\x1d\xc5\xf2\x97\xab\xe5\xf6\x5a\x15\x29\x15\x2f\xd4\x29\x4a\x0f\xe2\x0d\xaf\xed\xd3\x49\xaf\x81\x02\xc2\xc1\x88\x65\x38\x98\xf3\x1a\xa3\x0f\x86\x42\xda\xac\x8e\xc2\xd1\xc1\x7e\x6d\x48\x3a\x42\xe1\xdf\x90\x87\xfc\x5a\x45\xdd\x68\xeb\xf9\x42\x6d\x41\x5b\x27\xbc\x23\x13\x18\x95\xd2\xfc\xea\xaa\x60\xad\x8f\x8f\xe8\xf3\x7a\x71\x3d\x5f\x7f\x47\xbf\x28\xdf\xd1\xd4\x36\x8f\xef\xc1\x23\x22\x95\xd9\x6c\xc3\xda\xea\x67\x27\xda\x5d\x36\xa0\xa4\x90\x16\xea\x95\xf2\xed\x11\x8d\x2a\xda\x57\xd0\x27\xee\xcc\x1a\xdb\xd6\x76\xb3\x50\xff\x8f\x76\x01\x83\x17\xce\x69\x22\x3c\xab\xf5\x85\x26\x4f\x45\x7b\x1b\xcc\xcd\xa8\x57\xf6\xf2\xb1\xda\x61\x9b\x5c\x8b\x1b\xea\x60\xce\xc5\xea\xfa\xb9\x57\xe9\xe5\xb3\x7a\xdb\x6e\xac\x71\x1d\x38\xf8\x21\x5e\x7f\xaa\xdb\x5b\x75\x01\x53\x56\xe2\x7d\x45\x77\x11\x43\x7a\xed\x56\x72\xbf\xe9\x35\x7b\x96\xde\xa0\xc9\x3c\xcf\x69\x75\x48\x9f\x81\x3d\xfb\x7a\x9b\x4f\xf5\xb3\xc6\x8b\x82\x0e\x04\xd4\xd7\xfd\x51\x40\x24\x8a\x8b\x38\x24\xfd\xef\x51\xb0\xea\x68\xb2\x1b\x3d\x48\xf8\xd0\x80\xca\xba\x8b\x98\xd2\xbb\xca\x12\x88\x66\xf7\x8a\xa7\x77\x14\x1f\x6b\x06\xfa\x1d\xdb\x06\x6f\x6d\xcf\x24\xf7\x7a\xf5\x5e\x5d\x07\xbd\xc9\xe5\xf9\xa0\xae\x77\x5a\x2b\xe2\xc8\x2e\xf9\xcb\xec\x1d\x0b\x1e\x01\x64\xe0\xf0\xb7\x19\xea\x76\xbf\x33\x05\x09\x05\x08\x7d\x62\x2e\x1e\x86\xde\x5b\x4d\x74\x12\x90\x10\xea\xf0\x3a\x39\x1c\x42\x65\x76\xc9\x3d\x86\xeb\x4d\x76\x3a\x0f\x69\x26\xd9\x1f\xc4\xa8\x35\x53\xb2\xf3\x18\x8a\x91\xab\xab\xdc\xe2\x8f\x9c\x82\xda\x47\x83\x4e\x2c\x95\x0d\xfd\x91\x15\xbe\xe1\x3c\x4f\x66\x8a\x1f\x8d\xba\x60\x15\x64\xfb\x23\x6a\xfa\x3c\xf5\x3c\xd0\x1a\x3f\x8c\x75\x61\x6c\xda\xd4\x1f\x6c\x3a\x29\x3e\x0f\xc0\xec\xa2\xa7\x0b\x94\x74\xf2\x2f\xab\xce\xef\xc8\x47\xe7\x86\xaa\xa9\xc6\xa9\xea\x58\x86\x28\x2b\x2d\xdf\x23\x8f\x41\x11\x6d\xf6\xfa\x00\x2a\xef\x38\x0e\xdc\x48\x3d\xb3\x6e\xa5\x17\x90\xa6\xce\x19\x0d\xcd\xc1\xfd\x48\xd3\x78\xa2\x58\x32\x10\x3e\x72\x1e\xaf\x27\x44\x9e\x8f\xe2\xf8\x39\xfa\x71\xa9\x1b\x7b\xf4\x24\x0c\xc2\x26\xc9\x66\xa3\xf4\x5d\x52\xdf\x51\x7a\x33\x4c\x41\xb5\x18\xe8\x1c\xc1\xa6\xd3\xf4\xbb\xd8\xd9\xfb\xf7\x68\xc2\xa9\x03\xf3\x0c\x17\xdf\xbe\x45\x89\x4d\xce\xcf\xc5\x75\xed\xe9\xe9\x0c\xc9\x05\x0d\x6a\xf6\x13\xb4\x39\x0f\x09\x93\x8b\xee\x68\x68\x1d\x82\x5e\xe6\x4b\xa2\xed\x0e\x94\x44\x2b\x2e\x9c\xa2\xaf\x9f\x94\xb5\x12\x9f\x27\xf4\x0e\xbd\x7e\x5d\xc8\x9e\xec\xaf\xf9\x90\x41\x5d\xdf\x21\x01\x89\x32\x51\xfc\x43\xc0\x2b\x7a\xe7\x9d\x98\x8c\xfa\x28\xfa\x1b\xa7\xe6\x72\x31\x30\x37\x20\x5f\x17\x1d\x82\xe5\x03\xd5\xb6\xa9\xc0\x11\xbd\xc4\xfa\x6b\x4e\x5b\x5b\x9b\x4c\x5a\x55\x6d\x32\xd9\x1b\x4b\x26\xf4\x77\x00\x00\x00\xff\xff\x5d\xb2\x1f\x7d\x3f\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10559, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x7b\x8a\x1b\x15\xe9\x13\x74\x12\x1b\xa4\x4b\x2a\xd5\x82\x5b\x48\xdb\x60\x6e\x30\x17\x92\x03\xe9\xdb\x2b\x3a\xd8\xda\xc5\xf5\xf8\xf8\xfe\xfb\x8a\x02\x77\x77\xba\x25\x2b\x0e\xbb\x08\x70\x68\xd5\xfe\xa2\xb0\xd6\x95\xba\xa2\xe7\x68\xfa\xc9\x78\xa6\x11\x1b\x8d\x9e\xb2\x70\x9a\x0c\x47\xf7\xe2\x89\x83\x89\x36\x09\x0d\x14\x6d\x90\x8c\xdd\xb9\xd6\x47\xec\x25\x39\x87\x9b\x35\x4b\xe3\xb6\xfc\xd1\xcb\x47\x2f\x4b\xbd\x24\x1b\xb2\x1d\xfe\x1c\x98\xd3\xef\x09\x98\x27\x55\xfc\x08\x00\x55\xdb\x9c\xd6\x49\xe5\xe2\xfe\xfd\xa5\x84\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1463067478, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x4b\xc3\x30\x1c\x47\xcf\xcb\xa7\xf8\x1f\x37\xdc\x40\x45\xbc\xec\x54\x6d\x84\x61\xed\x46\xe9\xc0\x9d\x42\x4c\x42\x1b\x5c\x93\xd2\xfc\x6b\x9d\x9f\xde\x6c\x2b\xa5\xe8\xb4\xcd\x31\xbc\xdf\x23\xb4\x6f\xb1\x80\xab\x42\x67\x15\x47\x05\xdb\x92\x90\xc7\x84\x06\x29\x85\x34\x78\x88\x28\x70\x21\x6c\x6d\x90\x39\xe4\xa8\x1d\x6a\xe1\x60\x4a\xc0\x1f\x2e\x65\xa5\x9c\x83\xfe\x11\x39\xaf\xb8\x40\x55\xc1\x07\xaf\x0e\xda\x64\xd3\xfb\xbb\x19\xc4\xeb\x14\xe2\x6d\x14\xcd\xcf\x3b\xe7\x14\x32\x61\xa5\xfa\x6f\x77\x73\xdb\xdb\x79\xe2\x34\x95\x5c\xef\x0f\x4c\x1b\x61\x0b\x05\x93\xc9\x9b\xce\xb4\xc1\x0e\x83\x90\x3e\x05\xdb\x28\x85\xeb\x79\x8f\xb6\x35\x8e\xc3\x1b\xa5\xde\x7f\xdb\x27\x03\x78\xab\x1f\xb4\x17\xd6\x60\xde\xe9\x47\xe3\xdd\xeb\x07\x78\x6e\x4c\xcd\xf7\x63\xed\x2d\x3d\xf6\xed\x75\x29\x7d\x1a\x92\x71\xf4\x9f\xe5\x78\x81\xba\x50\xbe\x87\xa2\x84\x46\x63\xee\x35\xa7\x1b\xf8\xb2\x46\xfd\xf8\xd9\x9b\x64\xf5\x12\x24\x3b\x78\xa6\xbb\x69\x1b\xcc\xbc\x57\xc0\x8c\xcc\x96\x5d\x6f\xab\x38\xa4\xaf\x17\x7a\x63\xed\x90\x69\xf9\x09\xeb\xf8\x62\x91\x2d\x72\xb4\xf5\x6b\x0e\x6d\x63\x08\x09\x93\xf5\x66\x94\x7d\x79\x46\xff\x0a\x7f\x49\xbe\x03\x00\x00\xff\xff\x90\xed\xa7\x46\x2a\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 810, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_account_statistics_updated_at_timezoneSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe2\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x89\x2f\x2e\x49\x2c\xc9\x2c\x2e\xc9\x4c\x2e\x56\x80\x48\x3b\xfb\xfb\x84\xfa\xfa\x29\x28\x94\x16\xa4\x00\xf5\xa5\xc4\x27\x96\x28\x84\x44\x06\xb8\x2a\x94\x64\xe6\xa6\x02\x15\xe7\x16\x28\x94\x67\x96\x64\x80\xb9\x0a\x55\xf9\x79\xa9\xd6\x5c\x5c\xc8\xf6\xb8\xe4\x97\xe7\x51\xd5\xa6\xfc\xd2\x12\x64\xcb\x00\x01\x00\x00\xff\xff\x99\xce\x1e\x1a\xd4\x00\x00\x00")

func migrations4_account_statistics_updated_at_timezoneSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_account_statistics_updated_at_timezoneSql,
		"migrations/4_account_statistics_updated_at_timezone.sql",
	)
}

func migrations4_account_statistics_updated_at_timezoneSql() (*asset, error) {
	bytes, err := migrations4_account_statistics_updated_at_timezoneSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_account_statistics_updated_at_timezone.sql", size: 212, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_account_statistics_account_typeSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x90\x3f\x4b\x04\x31\x10\x47\xfb\x7c\x8a\x29\x15\xef\xc0\xfe\xaa\x68\x22\x1c\xe6\xb2\x47\x4c\x8a\xad\x42\xc8\x06\x09\xee\x9f\x90\x19\x91\xfd\xf6\xae\x8b\x85\xb0\xc2\x36\x62\x3d\xc3\xe3\xfd\xde\xf1\x08\x77\x43\x7e\xad\x81\x12\xb8\xc2\x18\x57\x56\x1a\xb0\xfc\x41\x49\x08\x31\x4e\xef\x23\x79\xa4\x40\x19\x29\x47\x04\x2e\x04\x3c\x36\xca\x5d\x34\xc0\x7a\x4c\xb5\x84\x4a\xb3\xa7\xb9\x24\xc0\x21\xf4\x7d\x1e\x09\x74\x63\x41\x3b\xa5\x40\xc8\x27\xee\x94\x85\xfb\xd3\x1e\x59\x98\xe6\xba\xa0\xf5\x8b\x35\xfc\xac\xed\x2f\x2f\xbe\xbc\xa5\x79\x97\xf3\x65\x78\x35\xe7\x0b\x37\x2d\x3c\xcb\xf6\x26\x74\x5d\x4d\x88\x07\x08\x88\x89\x7c\x9c\xba\x74\xd8\xaa\xdf\x9e\x18\x63\x3f\x5b\x88\xe9\x63\xfc\x2f\xe5\x6f\xce\x5a\x75\x63\xf6\x17\x83\x97\x75\x9f\x01\x00\x00\xff\xff\xb2\xea\x86\xd6\xe8\x01\x00\x00")

func migrations5_account_statistics_account_typeSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_account_statistics_account_typeSql,
		"migrations/5_account_statistics_account_type.sql",
	)
}

func migrations5_account_statistics_account_typeSql() (*asset, error) {
	bytes, err := migrations5_account_statistics_account_typeSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_account_statistics_account_type.sql", size: 488, mode: os.FileMode(420), modTime: time.Unix(1464168695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/4_account_statistics_updated_at_timezone.sql": migrations4_account_statistics_updated_at_timezoneSql,
	"migrations/5_account_statistics_account_type.sql": migrations5_account_statistics_account_typeSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"4_account_statistics_updated_at_timezone.sql": &bintree{migrations4_account_statistics_updated_at_timezoneSql, map[string]*bintree{}},
		"5_account_statistics_account_type.sql": &bintree{migrations5_account_statistics_account_typeSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

