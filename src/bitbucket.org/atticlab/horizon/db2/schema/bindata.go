// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_aggregate_expenses_for_accounts.sql
// migrations/7_account_limits.sql
// migrations/8_account_limits_two_way.sql
// migrations/9_1_assets.sql
// migrations/9_commission.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\xeb\x6f\xe3\xb8\x11\xff\xbe\xc0\xfe\x0f\xc4\x7d\x71\x82\x3a\x69\xbc\xc9\xe6\x89\x3b\xc0\x97\xf8\x7a\x46\x13\x7b\x2f\x76\x7a\xbb\x28\x0a\x81\xb6\x68\x5b\x5d\x59\xd2\x49\x72\x12\x5f\xd1\xff\xbd\x43\xea\x2d\xf1\xa5\x47\xd2\xfd\xb2\xb1\x34\xf3\xe3\xcc\x70\x38\x1c\x0e\x29\x1e\x1d\x7d\xfc\x70\x74\x84\xbe\xb8\x41\xb8\xf6\xc9\xec\xb7\x7b\x64\xe2\x10\x2f\x70\x40\x90\xb9\xdb\x7a\xf4\xe5\xc7\x0f\x8c\xe4\x0e\x7e\x12\x13\xad\x7c\x77\x9b\xd1\x3c\x13\x3f\xb0\x5c\x07\x5d\x1d\x7f\x3e\x3e\xc9\x93\x2d\xf6\xc8\x5b\x1b\x14\xa2\x4c\xf3\xf1\xc3\x6c\x34\x47\x41\x88\x43\xb2\x25\x4e\x68\x84\xd6\x96\xb8\xbb\x10\xfd\x88\x4e\x6e\xa2\x77\xb6\xbb\xfc\xce\x79\xbc\xb4\x2d\x4a\x4f\x9c\xa5\x6b\x5a\xce\x1a\xde\xf4\x9e\xe6\xbf\x5c\xf6\x6e\x52\x44\xc7\xc4\xbe\x69\x2c\x5d\x67\xe5\xfa\x5b\x20\x31\x82\xd0\x87\xff\x02\x20\x75\x9d\x04\x65\x43\x00\x7d\xb5\x73\x96\x21\x08\x65\x2c\x00\x8b\x50\x82\x15\xb6\x03\x52\x6c\x09\x20\x8c\x2d\x09\x02\xbc\x66\x14\x2f\xd8\x77\x00\x2d\xa6\xf1\xdd\x17\x23\x20\xcb\x9d\x6f\x85\x7b\x8a\xbf\x5a\xdd\xa4\xba\x11\xec\x2f\x37\x86\x87\xc3\x0d\xbc\xf1\x76\x0b\xdb\x5a\xf6\xa9\x39\x96\x60\x36\xdb\x5d\x33\xc2\xbb\xc7\xe9\x17\x34\x9e\xdc\x8d\xbe\xa2\xf1\x2f\x68\xf4\x75\x3c\x9b\xcf\x62\xda\xe3\xd0\xc7\x26\x31\xc8\x6a\x45\x96\x61\x60\x2c\xf6\x86\xeb\x9b\xc4\x07\x59\xdd\xef\x37\x72\x4e\xcb\x31\xc9\xab\xb1\xb1\x82\xd0\xf5\xf7\x06\xe0\x38\x01\x66\x8a\x06\x06\x28\x6b\x99\xb5\xd8\x5d\x8f\xf8\x38\x65\x0e\xf7\x1e\x69\xc3\x9e\xc9\xd2\x4e\x8e\x9a\xcc\x36\x31\xd7\xe0\x80\x94\x33\x20\x7f\xec\xc0\x7b\xea\x69\x91\xe3\xf7\x7c\xf2\x6c\xb9\xbb\x20\x7e\x66\x6c\x70\xb0\x69\x8a\xd5\x01\x84\xb5\xf5\x5c\x3f\x04\x90\x78\x80\x35\xc6\x69\x6c\xd0\xa5\xed\x06\xc4\x34\x70\x58\x0b\x20\xf1\xeb\x26\x3e\x85\x97\x4b\x77\xe7\x00\xf3\x8b\x15\x6e\xa8\x4f\x59\x61\xd0\x0c\xa0\xbe\xe2\x79\x56\x6c\x9a\x3e\x44\x06\x05\xff\x26\xf4\xe8\xe8\xdd\x84\xca\x96\x36\x41\x61\x80\x00\x93\x0e\x4b\xec\x44\x5a\xd4\x6e\x24\x8a\xab\xa6\x04\x75\x8d\xf0\xd5\xf0\x34\x40\x29\x29\x00\xeb\x92\x12\x6d\xba\x24\xe6\x29\xa8\x97\xee\x76\x6b\x05\x41\x6c\x32\x8d\xc1\x54\x64\xc0\x41\x40\x54\xbe\x5b\xe2\x88\x7c\x40\xc7\x71\xb9\x8c\x0a\x9e\x45\x32\xbc\xd4\x74\x1a\xca\x6a\x37\xcb\xec\x10\xc0\xc4\x09\xb3\x0e\x88\xbc\x03\x9f\xd2\x50\x30\xb1\x05\x9d\xca\xa1\xd7\xac\x65\x90\x0c\x0b\xe8\xe6\x57\x60\x1e\xde\xcf\x47\x8f\x68\x3e\xfc\xf9\x7e\x94\xe3\x9e\x4e\xee\xbf\xe5\x7b\xbb\x34\x51\xc1\xb4\xe9\x03\x96\xe5\x61\x18\x6a\x88\xb5\x7f\x3b\x9d\xcc\xe6\x8f\xc3\xf1\x64\x9e\x83\x51\xb1\x1a\xde\x77\xb2\xaf\x25\x44\x3a\xcd\xd4\x15\x81\xcf\xa8\x2f\xc0\xda\xf5\x3d\x48\x36\xd6\xf1\x24\x27\x69\xb1\x44\xa9\xdf\x44\xe6\x8c\x12\xf4\x9c\xc7\x6a\x03\x33\xd7\x91\x60\xb2\xf7\x35\xe0\x2a\x3e\x25\xc3\xae\x3a\x60\xed\x86\x6c\x6b\x6b\x49\x3b\xb9\x48\x28\x6f\x40\xd7\xab\x23\xee\xdb\xe9\xfd\xd3\xc3\x04\x59\x66\xd4\xfa\xdd\xe8\x97\xe1\xd3\xfd\x5c\x17\x5c\xe0\xad\x6d\xa0\x73\x4e\xd2\x06\x26\x72\x09\x05\x02\xfb\xa9\x6f\xbf\x74\xa6\x9d\x8d\x7e\x7b\x1a\x4d\x6e\x1b\x58\x1d\x82\x12\xcd\x00\xeb\xb7\x5d\x40\xd1\x64\xcf\x52\x56\x7d\xc1\x05\x61\xa4\x96\xd8\x7c\x0c\x4d\xe6\x38\xb3\xd3\xa4\x8e\xd3\x38\x4d\xea\x24\x79\x52\x90\x97\x02\x9c\xda\x78\xb9\x98\xa5\x65\xa8\x8c\x5e\x8d\x1d\xc5\x2e\x2d\xd8\x42\x26\x21\xa2\xa9\x84\x2b\x4d\x86\x28\xf4\x24\xc4\xa3\xaf\xf3\xd1\x64\x36\x9e\x4e\xf2\x33\x11\x35\x32\x91\x51\x78\xb6\xb7\x0e\xfe\xb0\x53\xa5\x6f\x7f\x1d\x3d\x0c\x2b\x4d\xde\x44\xeb\x7d\x58\xc6\x4f\xf0\x96\x5c\x27\x4f\xd1\x1c\xb2\x81\xeb\x98\xe9\x06\xcd\x60\x0d\xbd\xc5\xd7\xe8\xe8\x06\x4d\x5f\x1c\xe2\xc3\x5f\x49\x9d\xe0\xf6\x71\x34\x9c\x8f\x12\xf8\x14\x34\x2a\x21\xe4\x81\x63\x71\x62\xe4\x54\x62\x1d\xf0\x82\x7a\x93\xe9\xbc\xa4\x22\xfa\x7d\x3c\xff\x35\x95\xa0\xb8\xe8\x2e\x49\x91\x21\x95\xe4\xb9\x9d\x3e\x3c\x8c\x26\x73\xb9\x34\x11\x0d\xcc\x2a\x55\x1c\x34\x9e\xa1\xde\x97\xfb\xbf\x7a\x6b\x5a\x51\xf1\x7c\x77\x49\xcc\x9d\x8f\x6d\x64\x63\x67\xbd\xc3\x6b\xd2\xe3\x89\x13\xf7\x62\x97\x36\x89\x20\x8b\x26\x11\x76\x4a\x06\x52\x94\xa4\xb1\x35\xe2\xd6\xa9\x31\x68\xc5\x08\xd1\xa4\x12\xad\x5c\x1f\xd1\xe7\xb4\x84\x43\xd3\x4e\xe4\xae\xd0\x01\xcc\xaa\x7d\xf4\x8c\xed\x1d\x39\x44\x1e\xb6\xfc\x20\x31\x90\x76\x3d\x85\x12\x9a\x64\x85\x77\x36\x64\xe7\x78\x61\x93\xc0\xc3\x4b\x42\x8b\x44\xbd\xca\x7b\xb6\x78\x84\x95\x50\xbe\xee\x53\xb2\x45\x69\xec\xc5\x96\x60\x03\x35\xb3\x43\x32\x3c\x04\x9d\x12\x0d\xeb\x52\xa6\x71\xf0\xf1\x03\x82\x7f\x71\xa6\x8c\x96\x1b\xec\xc3\x34\x43\x7c\xd0\xde\xdf\x83\x4d\x0e\xce\xcf\x0e\x59\x0f\x4e\x9e\xee\xef\xfb\x31\x31\x0b\x44\x34\x3d\xe7\xd0\x0f\x3e\x55\xe8\xb7\xf8\x35\x37\x13\xd0\x2a\xda\xc2\x5a\x5b\x4e\x98\xcc\xbf\xe8\xa4\xcc\x61\x62\xcb\xde\x1b\x8c\x4f\x83\x7a\xeb\x3a\xe1\xa6\x0e\x7d\x41\x1e\xcb\x29\x33\xf4\x8e\x06\xbd\xeb\x6b\x78\x42\x60\xfe\x11\x8b\x56\x93\x31\x2f\xa5\x2e\xeb\xc7\x0f\x87\xbc\x91\xc1\x09\xdd\x1d\x78\x44\x2e\xc9\x7d\x0f\xaf\x60\x8d\x12\x9f\x26\x06\x7b\xb6\xbe\x43\xc1\x16\xdb\xb6\x86\x5f\x58\x0e\x4c\x9b\x44\xd3\x89\xc0\x21\xb4\xa8\x5f\x08\xf9\xae\x8f\x1d\x53\xeb\x82\x27\x7d\xaf\x89\x9e\x90\xeb\xc2\x63\xc7\xd9\x61\x5b\x17\x3d\xa6\xd6\x05\xdf\x79\x10\x2c\x59\x59\x0d\xd1\x22\x38\x78\xc9\xd6\x43\x34\x64\xb1\x9f\xe8\x4f\xd7\x21\x4a\x7f\x65\xe9\x48\x1b\x17\x65\x39\x7c\xec\x95\x90\xbd\xc7\x32\x97\x24\x65\x4e\x24\x18\x7d\xfa\x7e\x19\x55\x1c\xf4\x7c\xde\x0a\x0c\xec\xb8\xce\x7e\xeb\xee\x02\xb4\x70\x5d\x9b\x60\x47\xcb\x18\x49\x1a\x97\xa4\x32\x71\xd2\xa7\x6d\x96\x34\x4b\xcc\xa3\x45\x32\xcd\xe6\xc3\xc7\x79\x34\xc5\x0e\xa2\x27\xe3\x09\x70\xb1\xe9\xf0\xe7\x6f\xc9\xb3\xc9\x14\x3d\x8c\x27\xff\x18\xde\x3f\x8d\xb2\x07\xc3\xaf\xb9\x07\xb7\x43\x98\xa0\xd1\xa0\xae\x0a\x68\xfa\xfb\x64\x74\x07\x2d\xa9\x75\x89\xd6\x64\x5c\x55\x52\x94\xe8\xe9\x31\x2b\xd4\x55\xe4\xc8\x65\xcf\x2d\x9c\x2b\xb7\xce\x54\x79\x18\xe4\x05\xac\xd2\x95\x79\x07\xcf\x2b\x28\x15\x4b\x1e\xd0\xbf\x03\xd7\x59\x94\x5f\xaf\x6c\x1c\x1a\x2b\xa2\x1e\x79\x30\x45\x2d\xe9\xc6\x8f\x94\x56\xe0\x65\xd5\x85\x48\x6b\x57\xab\x40\xbe\x9b\xbf\x29\x95\x69\xee\x74\x15\xe8\xcc\xf3\xb2\x57\x02\xf7\x2b\xaf\x0e\x5b\xf8\x60\xb9\xe6\x96\x39\x62\x48\x5e\x2b\x6e\x88\x3d\xcf\xb6\xe4\x21\x59\xe0\x16\x95\xf5\x6f\x0b\x99\xcb\x58\xca\xd1\x23\x4d\x27\x12\x9a\x5c\x45\x5b\x14\xcb\x17\x6c\x47\x96\xcd\x76\x74\x57\xd5\xc3\x7b\xba\x73\x9b\x05\xe0\x64\x90\xb0\x5c\x9a\xcf\x1c\x4d\x7e\xf5\xb9\x59\xd6\x4c\x2d\xcf\x4a\xd4\xd1\xf8\x56\x98\x3a\x29\x4c\x74\x60\xe9\x18\x2a\x31\x74\xa9\x03\x0c\xa1\xe1\xab\xe5\x18\x21\xe9\x0f\x6c\x9f\xe3\x07\x91\xe9\x65\xdd\x62\x92\x10\x32\x2e\x3d\xa3\x24\xb5\x9d\x0e\x8c\x12\x43\x25\x46\x49\x76\x55\x45\x52\xe6\x76\x3a\xf5\xe6\x78\xde\x36\xab\xd4\x85\xf3\xb5\x3a\xd6\x31\xa9\x28\xc2\x48\x9f\x75\x8c\x26\x43\xba\xd5\x59\x0a\x00\x74\xf9\x53\x4d\xcb\x12\x26\x9f\xf0\x33\xb9\x02\x97\x2a\xed\xe3\x11\xa7\xee\x94\xfc\x2e\xed\x05\x57\x14\x1a\x54\x1c\xcb\x85\xb5\x33\x68\x6f\x41\xf0\xe3\x7b\x26\xcc\x82\x86\x07\x63\x54\xf0\x9a\x9e\xff\x60\x33\xa5\x28\x68\xd0\xf7\x10\x7e\x88\xff\x2c\xa4\xa1\x4b\xb3\xf0\xd5\xa0\x69\x48\x60\xfd\x59\x25\x53\x38\xb5\xa0\xda\xd9\x81\x8f\x0b\xaa\xeb\x59\xc0\x15\x28\x54\x63\xe0\xab\x83\x49\x23\xed\x3b\xcb\x3e\xb4\x9a\x79\xb7\x8c\xa4\x91\xd2\xcd\xb3\x14\xad\xe6\xb2\xcc\x45\x4e\x2e\xc8\x66\x38\x7b\x05\x5d\x7a\xae\x3a\x3d\x28\x1e\xc9\x11\xe5\x10\x34\xf5\x59\xc6\x95\x24\x3a\x55\xb5\x9e\xa9\xe2\x67\x81\xbb\x83\x6c\x3b\x71\x7f\xc1\xd4\x90\x56\x6b\x7a\xd7\xd7\x15\x0a\xdd\x81\x22\xdc\xcb\xe9\xc0\xdc\xc2\x3d\x3e\xed\x50\xa1\xd5\x0b\xad\x83\x85\x6a\x57\xac\xb3\x70\xa1\x68\xe8\xdd\x03\x46\x4d\xc5\xdb\x87\x0c\x45\x83\xd5\xa0\x21\x62\x50\x84\x8d\xc2\xee\x68\xb7\x9e\x9c\x7a\x6f\x5e\x34\xfd\x04\x2e\xce\xdb\x54\x89\xa1\x76\x64\x91\x87\x08\x3e\x71\xd6\xba\x24\xb9\xc1\xe2\xd1\x29\x4a\x10\xff\x6f\x19\x1e\xa4\x49\xc4\x79\x26\x36\x08\xc6\x5d\xa2\xc2\x7b\x48\xb6\x76\x76\x28\x7a\xbb\x25\x74\x07\x86\xff\x8e\x5a\x43\xf8\x3e\xb0\xd6\x0e\x0e\x77\x80\xce\xe9\x81\xab\xf3\xc3\x7f\xfe\x2b\x0b\xd3\xff\xf9\x2f\x2f\x50\x03\x45\x39\xf1\x23\x5b\x37\x5a\x72\x56\xa3\x7a\x0a\xe6\x80\x35\xa4\x71\x3f\x07\x56\xc5\x49\xb4\x03\xbb\x1a\x0b\xe8\x43\x33\xa0\x9d\x78\x09\x1e\xbd\x16\x2d\xd6\x61\xc0\xc5\x03\x29\x39\xa8\xa0\x19\x04\xa2\x91\xc4\xce\x97\xf0\x4f\x3f\xd0\xdd\xa7\x44\x2f\x07\x6c\xfc\x8c\xed\x83\x5e\xbe\xfe\x06\x7a\xfa\x64\xbd\xb4\xe1\xd9\x9b\x89\x26\x39\xdf\xc1\x95\xaf\x52\xaa\x79\x0f\x21\x6b\x9e\x6f\xe1\x0a\xae\x95\xbd\xbd\xa7\x32\xda\x27\x81\xa4\xea\x28\x66\x16\xb1\x42\x77\x74\xf3\x95\xee\xbb\x2a\xf7\x36\xd1\xdd\x70\x3e\x54\x2b\xaa\xc6\x16\xec\x94\xb5\xc7\xaf\xec\x6c\xd4\x87\xd4\xa8\xa9\x43\x3f\xa8\x21\x67\xa3\xfb\xd1\xed\x3c\xb7\x11\x7d\x0c\x88\xd5\x91\xdd\x47\x83\x7e\x54\xdc\x92\x77\x8b\xa0\xb8\xde\x54\x3f\x75\x0d\xb7\xa5\x92\xd5\xf0\xa0\xab\xa9\xac\x8e\xab\xa9\xee\x78\x32\x1b\x41\x0a\x39\x9e\xcc\xa7\x95\x5a\x2e\x4b\x10\x67\xe8\xa0\x37\x30\x2c\xc7\x0a\x2d\x6c\x1b\x01\x83\x3b\x0e\xfe\xb0\x41\xc8\xde\xa7\x93\xc1\xf9\xd1\xc9\xe5\xd1\xe9\x09\x1a\x0c\xae\x3f\x5f\x5e\x7f\x3a\x3b\x1e\x9c\x5c\x0d\x2e\xae\xfe\x72\x72\xda\xa3\xb2\x6b\xc1\x7f\x32\xa2\x03\xe2\x85\xb1\xb8\x80\x71\xea\x5a\xa6\xac\xa9\x4f\x67\x57\x97\x83\x41\xad\xa6\x4e\x0d\xbc\x5e\xc3\xe8\x86\xfc\xc1\x20\xaf\x1e\x71\x02\x12\x18\x60\xd0\xb4\x16\x2c\x6b\xef\xec\xfc\xf2\xf3\xc5\x79\xad\xf6\x2e\x8c\x62\x90\x90\xc1\x7f\x3e\x1d\x9c\x5c\x5c\xd6\x82\xbf\x2c\xc1\x1b\xe1\x8b\x6b\xbc\xe0\xbd\xac\x99\xf3\xcb\xd3\xc1\xe0\xac\x56\x33\x57\xc6\x20\x2e\x1c\xcb\x80\x2f\x2e\xce\x2f\xcf\x2f\x6a\x02\xe7\xf6\x2a\x24\xd0\x57\xe7\x67\xa7\xe7\x9f\x13\x68\xf1\x80\x90\xee\x12\xb4\x8e\x99\xb2\xc2\x78\x67\xe0\xbc\x02\x73\x67\xe0\x1a\x85\xbe\xa6\x61\xb2\x59\x61\xa9\x65\xe8\xd4\x4b\x50\x74\xc3\xa9\xa2\x90\xd4\x59\x2f\x68\xd5\x51\xda\xf6\x43\xdd\xf5\x7a\x47\x3d\xa1\xca\xad\xea\xf6\x85\x70\x75\xde\x38\x5d\xe1\x9c\x43\x4f\xcf\xe7\x25\xe7\xd6\x9b\xac\x57\x0a\xb8\xd1\x9a\x69\x78\x77\x97\x3f\x0c\xcf\x69\x1a\x7d\x79\x1c\x3f\x0c\x1f\xbf\xa1\xbf\x8f\xbe\xa1\x83\x78\x9f\xb1\x9f\x3b\x92\xa4\x79\x8c\xaa\x7b\x3d\x32\x6c\xa9\x2e\x25\x11\x94\xfa\xf4\xab\xc7\xa7\x24\x87\x4d\xba\xd3\x8a\xc2\xf1\x15\x49\x1b\x2a\xca\x6e\x99\xaa\xe3\x09\x9d\x09\x97\x61\x72\x25\x2c\x35\xa9\x25\x26\xf7\x03\x97\x2e\x64\x2d\x01\x73\x05\xe6\x35\xae\x25\xb5\xce\x87\x40\x5d\x28\x21\x6f\x87\xab\x93\x86\x68\xb5\x54\x94\x7f\x6e\xd5\xa5\x92\xa2\x96\xa4\x6a\x4a\xc5\xd3\x52\x54\xf1\x55\x5b\xac\x21\xfb\x24\x4e\xbb\xd0\x1a\x7d\x40\x27\x47\xa6\x27\xa7\x39\x07\x43\x9f\x66\xe3\xc9\xdf\xd0\x22\xf4\x09\x49\xe3\x92\x38\xf0\x70\xbe\xe1\x6b\x24\xf0\xd3\x64\x0c\xd3\x6b\x22\x37\x1f\x99\x09\xcc\x8a\x5d\x05\x19\xa3\x60\x19\xd1\xf5\x91\x30\x4e\xe6\xbe\x4d\x6c\x61\xd2\x0c\x85\x4a\xc3\xad\x64\x17\x0d\x18\x11\xf7\x2b\x55\x62\x91\x8c\xec\x2b\xcb\x76\x02\xb2\xba\xb9\x96\x74\xe5\x6a\xbb\x48\xa8\xf8\x13\xd1\x76\x62\x45\x20\x7a\x82\x95\x0a\xfa\xfd\x6a\xe9\x5e\x35\xe7\x74\xd3\xdd\x5c\x40\xaa\x42\xae\xb2\x59\x10\xfc\xe0\x20\x3b\x1a\x78\xf4\xd3\x4f\xa8\x47\x6f\xaf\xe8\x5d\x5f\xd3\x32\xf7\xe1\x61\x1f\x55\xde\x87\x6e\xfa\x56\x5f\xa5\x16\x03\x4d\xa2\x57\x3a\xc8\xc4\xca\xf1\xb4\x63\x6c\xa9\x12\xe9\x09\x77\xa6\x6c\x55\x5b\x11\xb5\x8e\xf2\xf9\x4a\x5c\x07\x5a\xb3\x50\x52\xa7\x2f\xa3\x0c\xa8\xa0\x00\xa7\x47\xb3\x14\x4e\x4d\x15\x45\xad\x3a\x1e\xd0\x3c\x3e\x14\x42\x6c\x15\x54\x66\x89\xe4\x50\xac\x70\xa2\xce\x7f\x40\xdf\x5e\xb8\x12\x62\x3e\x64\x24\xe7\xe3\x0a\xe2\xf1\xce\xc0\xf4\x93\x73\x6e\x32\x99\xb3\x8a\x7b\x7b\x69\x2d\x53\x5b\xce\x6c\x4f\xbd\xcf\x3d\xbf\xa3\x21\x7b\x72\x07\x42\x47\xe2\xc7\x70\x79\x0d\x04\xdb\x21\x8d\x14\x12\xeb\x91\x5c\xfb\xd0\x91\x1e\x31\x9c\x60\x92\x69\xa8\x49\xf1\xbc\x04\x5f\x97\xdc\x65\x17\x2d\x02\x54\x0e\xa6\x69\x57\xa8\xcd\x5e\xba\xc5\xa3\x03\xcb\x17\x11\xf3\x92\x27\x27\x37\x0b\xa2\x8a\x05\xab\xde\x48\xd2\x89\x74\x15\x58\xbd\x24\x44\x24\x67\xee\x8e\x95\x36\x7d\x9d\xc1\x34\x77\x57\x0d\xd7\x54\x5f\x29\xd3\xde\xc6\xca\x36\xf2\x1a\xa6\x87\xc9\xb5\x57\x1a\xd2\x0b\x75\xde\x52\xfa\x62\xd7\xf0\x05\xaf\x67\xf6\xfc\x2d\x42\x2d\x9c\x47\x8d\xae\x25\x38\xfa\xfd\xd7\xd1\xe3\x08\x92\x13\xd1\x79\xfb\x1f\x51\xe8\xd3\x2f\x64\xa7\x8f\xe8\x40\x78\xac\x3e\x26\xd2\x30\x43\xf9\x22\xa6\xce\x2c\x50\x02\x56\xce\xc4\xc2\x55\xa2\xc6\xcd\x53\x9d\x09\xcd\x43\x57\x06\xcf\x94\xb2\x9e\xf8\x6f\x30\x50\x0a\xe8\x4d\x83\xbe\xfe\x5d\x63\x6f\x61\xf6\xca\x21\x76\xa5\x16\x25\x86\x7a\x3a\xe5\xaf\x60\x7b\xc3\xde\xc8\x7f\xc5\xa0\x52\x28\x47\x5b\x4f\x17\xee\xd5\x74\x6f\xa8\x14\xf7\x1b\x0d\x95\x76\x3c\xa6\x7a\x6a\xa6\x37\xf8\xbd\xa1\x6a\xe9\xc1\x41\x95\x3a\xd2\xda\x91\xe2\x06\xc3\xae\xe5\x2f\x37\xc0\xcd\x57\x9b\xc4\x00\xe9\x25\x8e\x9d\x05\x01\x59\x2b\x3a\xaa\xd4\x4e\xbc\x38\x57\x5b\xbe\x95\x32\xa5\x09\x50\xa8\x82\xde\x1c\xc8\xb9\xd2\xb3\x6b\x5f\xaa\x36\xd1\x2a\x41\x97\x5d\x66\xda\xc2\xe6\x12\x58\x65\xbe\x71\x70\x90\x7c\x90\xc0\x8a\x3f\x81\x6b\xc7\x1f\x18\x56\xab\x49\x22\xc2\x4a\x41\x49\x44\x58\xaa\x29\x55\x48\x17\xee\x6e\xbd\x09\xb5\x9a\x2f\x90\xca\x05\x28\x90\x96\xcb\x5a\x49\x9e\xc9\x5c\xf3\x47\x74\x7a\x5a\xea\x37\xd1\x65\xc0\xb4\x20\xe5\xd9\x24\x24\x49\x87\xfc\x2f\x00\x00\xff\xff\x74\xdf\xc9\x95\x3d\x58\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 22589, mode: os.FileMode(438), modTime: time.Unix(1472550458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\x6f\x6f\xdb\x36\x13\x7f\x1f\x20\xdf\x81\xe8\x1b\x3b\x78\x9c\x67\x2d\x3a\x14\x5d\x82\x16\x70\x13\x65\x35\xe6\xc8\xad\x2d\xaf\x2d\x86\x41\xa0\x25\xda\xd6\x22\x8b\xaa\x48\x25\x71\x87\x7d\xf7\x1d\x25\x51\xd6\x3f\x4a\xb2\x63\x65\x03\x86\x2d\xd2\xf1\xee\x7e\x77\xc7\xdf\x1d\x45\x9f\x9f\xa3\xff\x6d\x9c\x55\x80\x39\x41\x73\xff\xf4\xe4\xfc\x5c\xfc\x8b\x3e\x51\xc6\x57\x01\x99\x7d\x1e\x23\x1b\x73\xbc\xc0\x8c\x20\x3b\xdc\x24\x02\xa7\x27\x33\xcd\x40\x8c\xc3\xa2\x0d\xf1\xb8\xc9\x9d\x0d\xa1\x21\x47\xef\xd0\xcb\xcb\xf8\x9d\x4b\xad\xbb\x8a\xc7\x96\xeb\x08\x79\xe2\x59\xd4\x76\xbc\x15\xbc\xe9\xcd\x8d\x9b\xb7\xbd\xcb\x54\xa3\x67\xe3\xc0\x36\x2d\xea\x2d\x69\xb0\x01\x11\x93\xf1\x00\xfe\xc3\x40\x94\x7a\x52\xcb\x9a\x80\xf6\x65\xe8\x59\xdc\xa1\x9e\xb9\x00\x5d\x44\x08\x2c\xb1\xcb\x48\xde\x12\xa8\x30\x37\x84\x31\xbc\x8a\x24\x1e\x70\xe0\x81\xb6\x4b\x01\x21\x41\xaa\xe3\x0d\xb9\x40\xbe\xeb\xaf\xd8\x77\xf7\x12\x19\x5b\x1f\xfe\xd4\xbe\x1a\x9a\x3e\x1b\x4d\xf4\x4b\x34\x03\x6b\x1b\x7c\x81\xce\x2f\xd1\xe4\xc1\x23\x01\xfc\x9f\x0c\xc2\xd5\x54\x1b\x1a\xda\x4e\x18\x8d\x6e\x90\x3e\x31\xe0\xc1\x68\x66\xcc\xa4\x4e\xf4\x65\x64\x7c\x44\xb3\xab\x8f\xda\xed\x10\xf9\x2b\xd3\x82\x78\xba\x34\xf6\xa1\xe0\xc5\x4e\x53\xc1\x9f\xab\xc9\xed\xad\xa6\x1b\xf5\xde\xc4\x32\x08\x56\x97\xf4\xa0\xd1\x0c\xf5\x3e\x8d\x7f\xf2\x57\x22\xa3\x7e\x40\x2d\x62\x87\x01\x76\x91\x8b\xbd\x55\x08\xc1\xe9\x55\xb9\xb3\x66\x9c\x06\xe4\xa8\x31\x89\x55\xe6\x43\x12\x2e\x5c\xc7\xaa\x0f\x47\xde\x93\x83\xa3\x91\x58\x17\xc1\x10\x55\x8d\x38\xa8\x43\x50\x68\x48\x3c\x17\xf5\xc8\x08\x67\x88\x2e\x51\xff\x8e\x6c\x07\xe8\x1e\xbb\x21\x39\x43\x3e\x76\x02\x26\x03\x14\x95\x29\xc1\x81\xb5\x36\x7d\xcc\xd7\x50\x53\xb1\xff\x83\x62\x6a\x85\xa0\x4d\x96\x38\x74\x61\x7f\xe0\x85\x4b\x98\x8f\x2d\x22\x2a\xbe\x57\x7a\xff\xe0\xf0\xb5\x49\x1d\x3b\x5b\xc4\xc5\x5c\x38\xc2\xc7\xad\x89\x2d\x8b\x86\x1e\x67\x32\x16\xc6\xf0\xc3\x58\xdb\x45\x22\x09\x66\x1a\x0e\x10\x4b\x6d\x5f\x14\x72\x14\x2d\x2d\x29\x46\xfd\xd3\x13\x04\xff\x38\x36\x5a\x38\x2b\xc7\xe3\x51\xfa\xf4\xf9\x78\x3c\x88\x5f\x60\xdb\x0e\x60\x47\xc1\x2e\xc4\x01\xb6\x38\x09\x20\x4e\xc1\x16\xa2\xd7\x7f\xf3\xf3\x99\x94\x89\x95\x99\x51\x80\x41\x07\x59\x81\x58\x41\xcf\x22\xe2\x08\x07\xa8\x20\xda\xe7\x3e\xde\x0a\x2e\x61\x68\x41\xa9\x4b\xb0\x97\x8a\xa3\x6b\xed\x66\x38\x1f\x1b\xe8\x66\x38\x9e\x69\xb9\xc5\x40\x2e\x07\xad\x76\x9d\x8d\xc3\x89\x6d\x62\x16\x25\xfc\x2f\x46\xbd\xc5\xe9\xc9\x59\xe5\x1e\x48\xc2\x43\x96\x4b\x62\x75\x10\xf6\x44\xaf\x8c\x7a\x21\x1b\xa6\x32\x0b\x52\x90\xfa\x04\xb8\x5b\xd0\xa0\x52\xf4\x05\x0d\x6c\x12\xbc\x50\xe5\xa1\x2e\x47\x36\xe1\xd8\x71\xdb\x45\xc8\x25\x36\x68\x38\x7e\x84\x12\xbd\x32\x42\x8c\x7c\x0f\xa1\x7f\x28\x5d\x8e\xc5\xcd\x35\x66\xeb\xea\x12\x2d\x2e\xf0\x03\x72\xef\xd0\x90\x99\x8d\x2b\x65\xc0\x02\xec\x31\x1c\xf7\x9e\x28\x4b\xa9\x2b\xb2\xd6\x5e\x16\x6d\xec\xb2\xd4\x72\x81\xe5\x52\x26\x0a\x94\x23\xd1\x44\xa1\x2f\x6e\x7c\x24\x58\x42\xb4\x53\xf1\x04\xfd\xa0\x1e\x29\x2d\x0a\x08\xe6\x8d\xab\x12\xe1\xd0\xb7\xdb\x0b\xa7\xb5\x25\xff\xde\xf8\x34\x80\xe8\x98\xf7\x90\x19\x80\x55\x02\xf4\xaa\x54\x65\x14\xa8\x11\xd0\x3b\x1e\x53\x94\xe9\x92\x10\xd3\x87\xdd\xab\x78\x2d\x46\x10\x13\x64\x94\x74\x22\xde\x03\x31\x91\xe0\x5e\x29\xb3\xc1\x8f\x26\x7f\x34\x61\xd3\x9b\xcc\xf9\x51\x16\x6b\xa8\xf0\x5d\x16\x7d\x1c\x70\xc7\x72\x7c\xdc\x05\x13\x57\x9b\xc9\xf0\xb2\x02\xdd\x1e\x94\xd0\x4c\x33\x07\x85\x02\xf4\x40\x70\xbf\xcb\x88\xcc\xb4\xcf\x73\x4d\xbf\xaa\x09\x4a\x21\x0e\x72\x41\x3b\x33\x31\x94\x99\x31\x9c\x1a\xf1\x40\xf1\x2a\x7e\x32\xd2\x41\x5d\xd4\xfc\x3f\x7c\x93\xcf\xf4\x09\xba\x1d\xe9\xbf\x0f\xc7\x73\x6d\xf7\x60\xf8\x35\xf3\xe0\x6a\x08\xe3\x08\x7a\x75\x34\xd0\x68\xf2\x45\xd7\xae\xc1\x85\x66\xf4\xc3\xb1\xa1\x4d\xf7\x04\x9f\xaa\x6f\x10\xff\xbf\x63\xb7\x82\xd4\x61\x19\x37\x8f\x14\x59\x46\x55\xcf\x1d\xbe\x0f\x9e\xc4\x08\xa3\x8e\xf6\xe4\x86\x96\x3c\x63\x34\x0c\x2c\x22\xf7\x82\xa2\x69\x48\x62\xeb\xf5\x2e\x2e\x4a\x12\x6d\x77\x4d\x16\x67\xa7\x14\xa2\x32\x14\x67\x42\x45\x21\x55\xab\x15\xe9\x78\x32\x81\xa8\x3c\x3c\x3a\x85\x34\x18\x7a\x76\x12\xd9\x13\xf8\xd3\x69\xa4\xc1\x60\x99\x48\x54\x0b\x1a\xa8\x24\xb3\xac\xd3\x82\x4e\xe9\x24\xeb\x67\xfb\x71\x2f\x99\xf2\x9a\xc6\xc8\xd6\x6c\x53\x4f\x1b\xd5\xc2\x3b\xeb\x35\xa3\x10\x56\x77\x7a\xd5\x38\xf9\x9f\xcd\x83\x30\x54\x11\xef\x9e\xb8\xe0\x18\xe2\xe4\xb1\x4c\xf0\x8f\x62\x34\x83\xa3\xae\xea\xed\x86\x88\xe3\x78\xf5\x3b\x11\x0d\xe5\x7b\xe6\xac\x3c\xcc\x43\xd0\x5e\x91\x81\x5f\xde\x9c\xfd\xf1\xe7\x8e\xba\xff\xfe\xa7\x8a\xbc\x41\xa2\x38\x26\x92\x0d\x8d\x8f\xae\x65\xa6\x4f\x95\x79\x10\x8d\xda\x5e\x90\x51\x56\xd6\x23\xd1\x41\x5c\xcd\x05\xe4\x10\x8e\xfe\x10\xcd\xb7\x50\xd1\x2b\x22\x99\x33\xb7\xcb\x60\xef\x25\x7b\x2a\xf1\xa0\x2d\x1f\xc4\xfb\x68\xa2\x8f\x9b\x26\x05\x14\xcb\x5f\x4d\xc6\xf3\x5b\x5d\x64\x58\x7c\xa1\x90\x70\x3d\x08\xfd\x3d\x76\xfb\xbd\x56\xc3\x09\xc4\x25\x20\x2b\xcb\x85\xf3\x75\x65\x13\x38\x26\x18\x65\xab\xdb\x0b\x4e\x03\x49\x36\x01\x6a\x88\x8a\x7f\x47\xb6\xbb\x8f\x57\xfa\xcc\x98\x0e\x47\x7a\x0d\xe8\x4a\x5e\xdc\x33\x9d\x71\x81\x0d\xaf\xaf\x33\x16\xdb\xf8\x89\x3e\x4d\x47\xb7\xc3\xe9\x37\xf4\x9b\xf6\x0d\xf5\x1d\xfb\xb0\x2e\xde\x2d\x62\x95\xd9\x5a\xcc\xb5\xbe\xb6\x42\xbd\x48\xe7\x1d\x09\x6d\xa4\x5f\x6b\x5f\x0f\xeb\x6f\xd1\xd2\x8c\x4a\xf1\xa5\xb2\xb2\xdb\xcd\x67\x23\xfd\x57\xb4\xe0\x01\x9c\x7d\xfb\x89\xf0\xa0\xd4\x49\x54\x0e\x8b\xc6\x78\x4c\x6f\xa3\x46\xdb\xca\xd5\x62\x7b\x56\x79\x18\x37\xe4\x63\xfa\x18\x6b\x6c\xe7\x65\x61\x1c\x18\x94\x1b\xbf\x72\x03\x98\x40\xdd\xdb\x58\xe6\x08\xde\xcf\xf5\x11\x0c\x6e\x09\x88\x82\xfa\x2c\x14\xf9\xc1\x30\x87\xa2\xea\xe8\x3f\x90\x1f\xfe\xea\x00\xec\x98\xf8\xc8\xae\x03\xe1\xb6\x75\x7a\x77\x86\x18\x54\x7e\xc3\x68\x01\x84\xfa\xa6\xdf\x15\x96\x44\x77\x16\x8e\xa2\x81\x1e\x84\xae\x1a\x54\xfa\x35\x12\x4a\xa0\x03\x5c\x79\xf5\x59\x68\xf2\x6b\x6b\x0e\x8b\xda\xcb\xec\x26\xef\xca\xd5\x92\x8d\x76\x3b\x5b\xe1\xb4\xe3\xd9\xe4\xd1\x2c\xde\x7a\x98\xa0\x3b\xb9\xd8\x38\x36\x82\x46\x83\x59\x38\xe9\x2d\x4c\x9e\xf5\x63\xc1\x3d\xf1\x1c\x3f\x19\x75\xb6\x9a\x51\xc8\x84\xe4\xe8\x5a\xa1\x32\xba\x11\x83\xdc\x3a\xbc\x45\x78\x40\x31\xfa\xf2\x51\x9b\x6a\xca\x3b\xa5\x77\x70\x58\x0c\x09\x9a\x4c\xd5\x17\x47\xb1\x48\x73\x84\x13\x2a\x13\xa0\xc5\x11\xe1\x68\x7d\xab\xd6\x4a\x23\x97\x0a\xa1\x16\xe5\x91\xec\x6e\xa1\x36\xbd\x61\xe8\x08\x41\x95\xa9\x46\xa2\x49\x25\xf7\xc3\xd2\x75\xa5\xe7\x4c\x1d\xca\x96\x6a\x95\x85\xcb\x94\xee\x13\x52\xba\xbe\x69\x84\x54\x58\xb0\x1f\xc0\xcc\xc5\xda\xb3\xe5\x29\x7b\x99\xd7\x84\x2e\x23\xbb\x1f\xb0\xaa\xab\xc3\x67\x43\x58\x79\x6f\xd9\x04\xb5\x6a\xd1\x7e\x98\xe5\xa4\xfc\x6c\x38\xd3\x6f\x65\x4d\xd8\x6a\x8f\x42\x79\xf5\xbb\xbb\x89\xe7\xa0\x8f\xa2\xb5\xca\x51\xf2\x10\x12\xc9\x2b\xce\x7f\xb6\xef\x88\x45\xea\x4c\xb6\xc1\x95\x5f\xb1\x3f\xc6\xee\x5a\x6e\xd9\x50\x2b\x3c\xaa\xc6\x1b\x9d\x1d\xf8\x63\x77\xe7\x92\x44\xb7\x62\x18\x3e\xf0\x64\x52\x95\x9e\x9a\xe4\x64\xa7\xef\xe7\xd8\x49\x65\x7b\x4f\x3a\x0b\xc0\x02\x9b\xa4\xb3\x96\x3c\x6d\x9b\x0b\x4a\xef\x8e\x56\x64\x35\x36\x1a\xa7\xba\x7e\x5f\xde\x57\x9e\xbf\x7f\x8f\x7a\x8c\xba\xc9\x6f\x96\xa2\xf2\xec\x5d\x5c\x88\x2f\xe2\x67\x67\x03\xa4\x16\xb4\xa8\xdd\x4e\xd0\x61\x2c\x24\x81\x5a\x74\x41\xc3\xd5\x9a\xb7\x32\x9f\x13\xad\x77\x20\x27\x5a\x70\x41\x0e\xf5\xd1\x1e\x83\xf9\xfc\xf5\xeb\x42\x12\x55\x3f\x52\x45\x30\xdb\xfb\x2e\xe1\x44\x26\x24\xfb\x23\xd7\x6b\xfa\xe0\x9d\x9e\xd8\x01\xf5\x51\xf4\xb3\xbc\xea\xea\xb1\x30\xb3\x20\x6f\x97\x4d\x92\xf9\x6d\x56\xbb\x2a\xc3\x20\xed\xe4\xf6\xd0\x2d\xfb\x61\xad\x90\x2c\xb1\x5a\xa1\xf4\x84\xb5\x93\xfa\x37\x00\x00\xff\xff\x9f\xe0\x51\xba\x23\x2c\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 11299, mode: os.FileMode(438), modTime: time.Unix(1472476019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\xe5\xe2\xe5\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\xc8\x2f\x88\x4f\xaa\x8c\xcf\xc8\xcf\x4c\x51\xf0\xf7\x53\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\xcf\x2f\x48\x05\xea\xc8\xcc\xcf\x8b\x2f\x48\x2c\x2a\xc9\x4c\xce\x2c\x48\xcc\x2b\x29\x56\x08\x0d\xf6\xf4\x73\x57\x48\x2a\x29\x4a\x4d\x55\xd0\xc0\x54\x9b\x99\xa2\x69\x8d\x6e\x7e\x09\xc4\xfc\x12\x54\xf3\x4b\x8a\x12\xf3\x8a\x13\x93\x89\xb4\x01\x59\x35\xc4\x0e\x5e\x2e\x64\x7f\xb9\xe4\x97\xe7\x81\xc4\x5c\x82\xfc\x03\x30\xfd\x65\x8d\x2a\x81\x70\x10\x50\x02\x10\x00\x00\xff\xff\x25\x89\xaf\xf2\x1e\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 286, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_aggregate_expenses_for_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x41\x6f\xa3\x30\x10\x85\xcf\x41\xe2\x3f\xcc\x31\xd1\x26\xd2\xee\xaa\xea\x25\x27\x5a\xa8\x14\x95\x92\x08\x11\xa9\x39\x59\x53\xdb\x4a\xac\x82\x8d\xec\xa1\x29\xfd\xf5\x25\xa9\x15\xa1\x26\x6d\xf0\x8d\xe1\xbd\x37\x03\xfe\x66\x36\x83\x3f\x95\xda\x5a\x24\x09\xeb\x3a\x0c\xc2\xe0\x3e\x4f\xa2\x22\x81\x22\xba\x4b\x13\x40\xce\x4d\xa3\x89\x39\x42\x52\x8e\x14\x77\x30\x0e\x03\xe8\x0e\x0a\x61\xa5\x73\xd0\x3f\x7c\x87\x16\x39\x49\x0b\x6f\x68\x5b\xa5\xb7\xe3\xdb\x9b\x09\x64\xcb\x02\xb2\x75\x9a\x4e\xbd\xd1\x39\x49\x8c\x1b\x21\x7f\x33\xfe\xfb\x7f\x66\x3c\x4e\x22\x6d\x8d\x96\x5a\x46\x6d\x7d\xf0\xbb\x0a\xcb\x52\x69\x3a\x69\x21\x4e\x1e\xa2\x75\x5a\xc0\x5f\xef\x12\xa8\xca\x96\x29\xcd\x4d\x25\x61\x34\x7a\x51\xdb\x01\x72\xd3\xd0\x40\xfd\x5e\xca\xd7\xf3\xfc\xd1\x35\xbd\x6f\x70\x3d\xbf\x32\x9a\x76\xa7\x06\xc3\xf5\xa7\x2f\xb8\x66\x40\xad\x1b\x2c\x07\xe7\x7b\xf9\xe0\xf9\x9b\x5a\x74\x68\x09\x86\xd4\xfd\x9c\x43\x81\x54\x25\x3b\x9a\xaa\x1a\xf6\x8a\x76\xc7\x47\xf8\x30\x5a\x7e\xbf\xed\x55\xbe\x78\x8a\xf2\x0d\x3c\x26\x9b\xb1\x67\x6d\xda\x63\x67\x7a\x8e\xc3\x24\x0c\x26\xf3\x1e\xc1\x8b\x2c\x4e\x9e\x2f\x10\xcc\x7c\x1c\x53\xe2\x1d\x96\xd9\x45\xc6\xbd\xe4\x2b\xaf\xbf\x23\xb1\xd9\xeb\x43\x2d\xce\x97\xab\x41\x1d\xe6\x5e\xfb\xd3\x3e\x75\xef\x3f\x03\x00\x00\xff\xff\x80\x2b\xbf\x1e\x84\x03\x00\x00")

func migrations3_aggregate_expenses_for_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_aggregate_expenses_for_accountsSql,
		"migrations/3_aggregate_expenses_for_accounts.sql",
	)
}

func migrations3_aggregate_expenses_for_accountsSql() (*asset, error) {
	bytes, err := migrations3_aggregate_expenses_for_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_aggregate_expenses_for_accounts.sql", size: 900, mode: os.FileMode(438), modTime: time.Unix(1472464340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_account_limitsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xd0\x41\x4b\xc3\x30\x14\x07\xf0\x73\x03\xf9\x0e\xef\xd8\xe2\x06\x2a\xe2\xc5\x53\xb5\x11\xc4\xba\x8d\xd2\x1e\x76\x2a\xcf\x34\x74\x0f\xd6\x64\x24\x6f\xd3\x7d\x7b\x5b\x2c\x92\x83\xba\x1c\xc3\xff\x97\xbc\xf7\x5f\x2e\xe1\x6a\xa0\xde\x23\x1b\x68\x0e\x52\x48\xf1\x54\xa9\xbc\x56\x50\xe7\x8f\xa5\x02\xd4\xda\x1d\x2d\xb7\x7b\x1a\x88\x03\xa4\x52\x24\xd8\x75\xde\x84\x00\xf1\xd1\x3b\xf4\xa8\xd9\x78\x38\xa1\x3f\x93\xed\xd3\xfb\xbb\x0c\x56\xeb\x1a\x56\x4d\x59\x2e\xa4\x98\x42\x18\x82\xe1\x56\xbb\xce\xfc\x07\x6f\x6e\x23\x38\x26\xbe\xed\x80\x9f\xad\x3b\x98\x71\x4c\x72\x16\x92\xe4\x9d\x7a\xb2\xfc\x13\x84\x42\x3d\xe7\x4d\x59\xc3\xf5\xfc\x57\x87\xb4\x3f\xb7\x7c\xf4\xd6\x9d\xc6\xc7\x2f\x83\xc1\x59\xde\x45\x64\x06\xc9\x9f\x60\x53\xbd\xbc\xe5\xd5\x16\x5e\xd5\x36\x9d\x2b\x59\x44\x2b\x66\x52\x64\x0f\x53\x9d\x71\xc1\x85\xfb\xb0\xd3\x5d\x51\xad\x37\xbf\x16\x3c\x8a\xaf\x00\x00\x00\xff\xff\x46\xb7\x65\xca\x91\x01\x00\x00")

func migrations7_account_limitsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_account_limitsSql,
		"migrations/7_account_limits.sql",
	)
}

func migrations7_account_limitsSql() (*asset, error) {
	bytes, err := migrations7_account_limitsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_account_limits.sql", size: 401, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_account_limits_two_waySql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x3d\x6f\xc3\x20\x10\x86\x77\x4b\xfe\x0f\xb7\x37\x1e\x3a\x67\xa2\x85\x4e\x04\x2a\x0b\x66\x44\x53\x2b\x3d\x29\x40\xe4\xe2\x7e\xfc\xfb\xc6\x6d\xa3\x60\xdc\x8f\xe0\xf5\x85\xf7\x81\xbb\xa7\x69\xe0\xca\xe1\xae\xb7\xb1\x03\x7d\xa8\xab\xba\x22\x5c\xb1\x16\x14\xb9\xe1\x0c\xec\x76\x1b\x06\x1f\xcd\x1e\x1d\xc6\x67\x68\x99\x20\x1b\x06\xb7\x92\xeb\x8d\x00\x67\xdf\x4c\x38\x74\xc7\x2a\x06\x0f\x4a\x4e\x03\x13\x86\xb8\x2e\xa0\x3d\x5a\xdc\xbf\x9b\x38\xf4\x3e\xbc\x74\xfd\x88\xfb\x4a\x3e\xa1\x65\x28\x17\x7c\x7c\xca\x60\xa7\xec\x12\x5c\x5d\x01\x10\x4a\x7f\x9c\xd3\xa0\x87\x07\xdc\xa1\x8f\x20\xa4\x02\xa1\x39\x07\xca\xee\x88\xe6\x0a\x9a\xeb\x55\x56\x3d\x8f\x50\x54\x4b\x3f\xfb\x67\x71\x3d\x0a\x4b\x15\xd2\xf0\xea\x97\x4b\x1c\x37\x33\x13\x59\x2e\xf1\x7b\xc7\x67\x87\x27\x11\x4b\x24\x26\xb0\xdc\xeb\xbf\x12\x69\x2b\xef\x7f\xb3\xb8\xca\x2f\xa4\xae\x66\x87\x53\x23\xc7\x87\x3f\x02\x00\x00\xff\xff\xef\x83\x3f\x08\x38\x03\x00\x00")

func migrations8_account_limits_two_waySqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_account_limits_two_waySql,
		"migrations/8_account_limits_two_way.sql",
	)
}

func migrations8_account_limits_two_waySql() (*asset, error) {
	bytes, err := migrations8_account_limits_two_waySqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_account_limits_two_way.sql", size: 824, mode: os.FileMode(438), modTime: time.Unix(1466765560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_1_assetsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x41\x4f\x84\x30\x14\x84\xcf\x36\xe9\x7f\x78\x47\x88\xec\x41\x63\xbc\xec\x09\xa5\x07\x22\x96\x95\x40\xe2\x9e\xc8\x5b\x68\xf0\x25\xbb\xed\xa6\xed\x6a\xf8\xf7\x2e\x56\x5d\x42\xf4\x1d\x3b\xf3\x35\x33\xb3\x5a\xc1\xf5\x81\x06\x8b\x5e\x41\x73\xe4\x8c\xb3\xc7\x4a\xa4\xb5\x80\x3a\x7d\x28\x04\xa0\x73\xca\x43\xc4\x19\x9c\x8f\x7a\xb8\xdc\x8e\x06\xa7\x2c\xe1\x3e\xe1\xec\xca\x8f\x47\xf5\xab\x90\xf6\x20\xcb\x1a\x64\x53\x14\x49\x20\x3b\xd3\x5f\xf4\xee\x0d\x2d\x76\x5e\x59\x78\x47\x3b\x92\x1e\xa2\x9b\xdb\x78\x49\x90\x73\xa7\xb3\xe3\x3f\xe2\xfe\xee\x0f\xa2\x45\x6d\xf4\x78\x30\x27\x07\x3b\x63\xf6\x0a\xf5\xd2\xb3\xa9\xf2\xe7\xb4\xda\xc2\x93\xd8\x46\xd4\xc7\x9c\xc5\xeb\x59\xe5\x46\xe6\x2f\x8d\x80\x5c\x66\xe2\x35\x34\x77\xed\x94\xbc\x0d\x61\xda\xaf\x96\xa5\xfc\x19\x65\x92\x92\xef\xa0\x09\x4c\x62\xf8\x6d\x3e\x69\x66\x3e\xf4\xf4\x96\x55\xe5\x66\x3e\xe9\xfa\x33\x00\x00\xff\xff\x20\x01\xac\x41\x78\x01\x00\x00")

func migrations9_1_assetsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_1_assetsSql,
		"migrations/9_1_assets.sql",
	)
}

func migrations9_1_assetsSql() (*asset, error) {
	bytes, err := migrations9_1_assetsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_1_assets.sql", size: 376, mode: os.FileMode(438), modTime: time.Unix(1472464340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_commissionSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x93\x51\x4f\xfa\x30\x14\xc5\x9f\x59\xb2\xef\x70\xdf\xd8\xf2\x87\xe4\xff\x60\x7c\xc0\x84\x64\xba\x6a\x16\xe7\xc0\xb9\x25\xf2\xb4\x74\xe5\x02\x55\xb6\x92\xb6\xa8\x7c\x7b\x3b\xc0\x39\x01\x05\xf6\xb4\xed\xfc\x7a\xcf\x3d\x27\x69\xb7\x0b\xff\x0a\x3e\x95\x54\x23\xa4\x0b\xdb\xb2\xad\x9b\x98\x78\x09\x81\xc4\xbb\x0e\x09\x30\x51\x14\x5c\x29\x2e\x4a\x70\x6c\xab\xc5\xc7\x50\x3f\x39\x9f\x2a\x94\x9c\xce\x3b\xb6\x55\x7d\xbf\xe2\x2a\x9b\x51\x35\xab\xde\xd9\x8c\x4a\xca\x34\x4a\xe7\xf2\xc2\x85\x68\x90\x40\x94\x86\x61\x03\x7c\xa3\xf3\x25\x42\xeb\x45\x89\x32\xdf\xd5\x27\x73\xaa\xb3\x09\x1a\xd9\x58\xf0\x52\xd7\x3a\xf8\xe4\xd6\x4b\xc3\x04\xfe\x6f\xc9\x05\x4a\x86\xe5\x06\x3e\xc6\x0e\xe3\xe0\xc1\x8b\x47\x70\x4f\x46\x0e\x1f\xbb\xb6\xe5\x5e\x35\xd2\xa6\x51\xf0\x98\x12\x08\x22\x9f\x3c\x37\x42\x67\xf9\x36\xd3\x20\x6a\x56\x91\x3e\x05\xd1\x1d\xe4\x5a\x1a\x5f\xe7\x2b\x77\x35\x6f\x3b\xed\xd0\x18\xca\x98\x58\x9a\x05\xff\x98\xe4\x38\xdf\xd5\x74\xfb\xfd\xf6\x44\x8a\xa2\xed\xf6\x7a\x1a\x3f\xb4\xdb\x81\x1d\x19\xda\x5a\xd4\xea\x69\xe6\x99\x5e\x2d\xf0\xdc\x0d\xd6\x87\x2a\x23\x53\x2f\x4e\x51\x1e\xde\x64\x8f\x3a\xb6\x91\x52\x78\x56\x19\xeb\x03\xb5\xcb\x6f\x95\x6c\x28\x26\xc6\x27\x50\xc6\x75\x89\xf2\x47\x85\xb6\xd5\xbc\x0f\xbe\x78\x2f\xab\x7f\x7e\x3c\x18\xee\xdd\x07\x43\x7f\x06\x00\x00\xff\xff\xd1\x16\x68\xd2\x3c\x03\x00\x00")

func migrations9_commissionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_commissionSql,
		"migrations/9_commission.sql",
	)
}

func migrations9_commissionSql() (*asset, error) {
	bytes, err := migrations9_commissionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_commission.sql", size: 828, mode: os.FileMode(438), modTime: time.Unix(1472464340, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_aggregate_expenses_for_accounts.sql": migrations3_aggregate_expenses_for_accountsSql,
	"migrations/7_account_limits.sql": migrations7_account_limitsSql,
	"migrations/8_account_limits_two_way.sql": migrations8_account_limits_two_waySql,
	"migrations/9_1_assets.sql": migrations9_1_assetsSql,
	"migrations/9_commission.sql": migrations9_commissionSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_aggregate_expenses_for_accounts.sql": &bintree{migrations3_aggregate_expenses_for_accountsSql, map[string]*bintree{}},
		"7_account_limits.sql": &bintree{migrations7_account_limitsSql, map[string]*bintree{}},
		"8_account_limits_two_way.sql": &bintree{migrations8_account_limits_two_waySql, map[string]*bintree{}},
		"9_1_assets.sql": &bintree{migrations9_1_assetsSql, map[string]*bintree{}},
		"9_commission.sql": &bintree{migrations9_commissionSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

